{"version":3,"file":"firebase_database.js","names":["SDK_VERSION","version","name","sha1","error","query","onDisconnect","child","get","map","root","base12","newWriteTree","newViewCache","serverCache","view","errorPrefix","ref","forceRestClient","logger","SDK_VERSION$1"],"sources":["../../@firebase/database/dist/index.esm.js"],"sourcesContent":["import { _isFirebaseServerApp, _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component, ComponentContainer, Provider } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, deepEqual, createMockUserToken, isCloudWorkstation, pingServer, updateEmulatorBanner } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"1.1.0\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The semver (www.semver.org) version of the SDK. */\nlet SDK_VERSION = '';\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nfunction setSDKVersion(version) {\n    SDK_VERSION = version;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nclass DOMStorageWrapper {\n    /**\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n     */\n    constructor(domStorage_) {\n        this.domStorage_ = domStorage_;\n        // Use a prefix to avoid collisions with other stuff saved by the app.\n        this.prefix_ = 'firebase:';\n    }\n    /**\n     * @param key - The key to save the value under\n     * @param value - The value being stored, or null to remove the key.\n     */\n    set(key, value) {\n        if (value == null) {\n            this.domStorage_.removeItem(this.prefixedName_(key));\n        }\n        else {\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n        }\n    }\n    /**\n     * @returns The value that was stored under this key, or null\n     */\n    get(key) {\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n        if (storedVal == null) {\n            return null;\n        }\n        else {\n            return jsonEval(storedVal);\n        }\n    }\n    remove(key) {\n        this.domStorage_.removeItem(this.prefixedName_(key));\n    }\n    prefixedName_(name) {\n        return this.prefix_ + name;\n    }\n    toString() {\n        return this.domStorage_.toString();\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nclass MemoryStorage {\n    constructor() {\n        this.cache_ = {};\n        this.isInMemoryStorage = true;\n    }\n    set(key, value) {\n        if (value == null) {\n            delete this.cache_[key];\n        }\n        else {\n            this.cache_[key] = value;\n        }\n    }\n    get(key) {\n        if (contains(this.cache_, key)) {\n            return this.cache_[key];\n        }\n        return null;\n    }\n    remove(key) {\n        delete this.cache_[key];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (domStorageName) {\n    try {\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n        // so it must be inside the try/catch.\n        if (typeof window !== 'undefined' &&\n            typeof window[domStorageName] !== 'undefined') {\n            // Need to test cache. Just because it's here doesn't mean it works\n            const domStorage = window[domStorageName];\n            domStorage.setItem('firebase:sentinel', 'cache');\n            domStorage.removeItem('firebase:sentinel');\n            return new DOMStorageWrapper(domStorage);\n        }\n    }\n    catch (e) { }\n    // Failed to create wrapper.  Just return in-memory storage.\n    // TODO: log?\n    return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logClient = new Logger('@firebase/database');\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nconst LUIDGenerator = (function () {\n    let id = 1;\n    return function () {\n        return id++;\n    };\n})();\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nconst sha1 = function (str) {\n    const utf8Bytes = stringToByteArray(str);\n    const sha1 = new Sha1();\n    sha1.update(utf8Bytes);\n    const sha1Bytes = sha1.digest();\n    return base64.encodeByteArray(sha1Bytes);\n};\nconst buildLogMessage_ = function (...varArgs) {\n    let message = '';\n    for (let i = 0; i < varArgs.length; i++) {\n        const arg = varArgs[i];\n        if (Array.isArray(arg) ||\n            (arg &&\n                typeof arg === 'object' &&\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                typeof arg.length === 'number')) {\n            message += buildLogMessage_.apply(null, arg);\n        }\n        else if (typeof arg === 'object') {\n            message += stringify(arg);\n        }\n        else {\n            message += arg;\n        }\n        message += ' ';\n    }\n    return message;\n};\n/**\n * Use this for all debug messages in Firebase.\n */\nlet logger = null;\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nconst enableLogging$1 = function (logger_, persistent) {\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n    if (logger_ === true) {\n        logClient.logLevel = LogLevel.VERBOSE;\n        logger = logClient.log.bind(logClient);\n        if (persistent) {\n            SessionStorage.set('logging_enabled', true);\n        }\n    }\n    else if (typeof logger_ === 'function') {\n        logger = logger_;\n    }\n    else {\n        logger = null;\n        SessionStorage.remove('logging_enabled');\n    }\n};\nconst log = function (...varArgs) {\n    if (firstLog_ === true) {\n        firstLog_ = false;\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\n            enableLogging$1(true);\n        }\n    }\n    if (logger) {\n        const message = buildLogMessage_.apply(null, varArgs);\n        logger(message);\n    }\n};\nconst logWrapper = function (prefix) {\n    return function (...varArgs) {\n        log(prefix, ...varArgs);\n    };\n};\nconst error = function (...varArgs) {\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n    logClient.error(message);\n};\nconst fatal = function (...varArgs) {\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n    logClient.error(message);\n    throw new Error(message);\n};\nconst warn = function (...varArgs) {\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n    logClient.warn(message);\n};\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nconst warnIfPageIsSecure = function () {\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\n    if (typeof window !== 'undefined' &&\n        window.location &&\n        window.location.protocol &&\n        window.location.protocol.indexOf('https:') !== -1) {\n        warn('Insecure Firebase access from a secure page. ' +\n            'Please use https in calls to new Firebase().');\n    }\n};\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nconst isInvalidJSONNumber = function (data) {\n    return (typeof data === 'number' &&\n        (data !== data || // NaN\n            data === Number.POSITIVE_INFINITY ||\n            data === Number.NEGATIVE_INFINITY));\n};\nconst executeWhenDOMReady = function (fn) {\n    if (isNodeSdk() || document.readyState === 'complete') {\n        fn();\n    }\n    else {\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n        // fire before onload), but fall back to onload.\n        let called = false;\n        const wrappedFn = function () {\n            if (!document.body) {\n                setTimeout(wrappedFn, Math.floor(10));\n                return;\n            }\n            if (!called) {\n                called = true;\n                fn();\n            }\n        };\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\n            // fallback to onload.\n            window.addEventListener('load', wrappedFn, false);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        else if (document.attachEvent) {\n            // IE.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            document.attachEvent('onreadystatechange', () => {\n                if (document.readyState === 'complete') {\n                    wrappedFn();\n                }\n            });\n            // fallback to onload.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            window.attachEvent('onload', wrappedFn);\n            // jQuery has an extra hack for IE that we could employ (based on\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n            // I'm hoping we don't need it.\n        }\n    }\n};\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nconst MIN_NAME = '[MIN_NAME]';\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nconst MAX_NAME = '[MAX_NAME]';\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nconst nameCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a === MIN_NAME || b === MAX_NAME) {\n        return -1;\n    }\n    else if (b === MIN_NAME || a === MAX_NAME) {\n        return 1;\n    }\n    else {\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\n        if (aAsInt !== null) {\n            if (bAsInt !== null) {\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (bAsInt !== null) {\n            return 1;\n        }\n        else {\n            return a < b ? -1 : 1;\n        }\n    }\n};\n/**\n * @returns {!number} comparison result.\n */\nconst stringCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a < b) {\n        return -1;\n    }\n    else {\n        return 1;\n    }\n};\nconst requireKey = function (key, obj) {\n    if (obj && key in obj) {\n        return obj[key];\n    }\n    else {\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n    }\n};\nconst ObjectToUniqueKey = function (obj) {\n    if (typeof obj !== 'object' || obj === null) {\n        return stringify(obj);\n    }\n    const keys = [];\n    // eslint-disable-next-line guard-for-in\n    for (const k in obj) {\n        keys.push(k);\n    }\n    // Export as json, but with the keys sorted.\n    keys.sort();\n    let key = '{';\n    for (let i = 0; i < keys.length; i++) {\n        if (i !== 0) {\n            key += ',';\n        }\n        key += stringify(keys[i]);\n        key += ':';\n        key += ObjectToUniqueKey(obj[keys[i]]);\n    }\n    key += '}';\n    return key;\n};\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nconst splitStringBySize = function (str, segsize) {\n    const len = str.length;\n    if (len <= segsize) {\n        return [str];\n    }\n    const dataSegs = [];\n    for (let c = 0; c < len; c += segsize) {\n        if (c + segsize > len) {\n            dataSegs.push(str.substring(c, len));\n        }\n        else {\n            dataSegs.push(str.substring(c, c + segsize));\n        }\n    }\n    return dataSegs;\n};\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nfunction each(obj, fn) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nconst doubleToIEEE754String = function (v) {\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n    const ebits = 11, fbits = 52;\n    const bias = (1 << (ebits - 1)) - 1;\n    let s, e, f, ln, i;\n    // Compute sign, exponent, fraction\n    // Skip NaN / Infinity handling --MJL.\n    if (v === 0) {\n        e = 0;\n        f = 0;\n        s = 1 / v === -Infinity ? 1 : 0;\n    }\n    else {\n        s = v < 0;\n        v = Math.abs(v);\n        if (v >= Math.pow(2, 1 - bias)) {\n            // Normalized\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n            e = ln + bias;\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n        }\n        else {\n            // Denormalized\n            e = 0;\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n        }\n    }\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (i = fbits; i; i -= 1) {\n        bits.push(f % 2 ? 1 : 0);\n        f = Math.floor(f / 2);\n    }\n    for (i = ebits; i; i -= 1) {\n        bits.push(e % 2 ? 1 : 0);\n        e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    const str = bits.join('');\n    // Return the data as a hex string. --MJL\n    let hexByteString = '';\n    for (i = 0; i < 64; i += 8) {\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n        if (hexByte.length === 1) {\n            hexByte = '0' + hexByte;\n        }\n        hexByteString = hexByteString + hexByte;\n    }\n    return hexByteString.toLowerCase();\n};\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nconst isChromeExtensionContentScript = function () {\n    return !!(typeof window === 'object' &&\n        window['chrome'] &&\n        window['chrome']['extension'] &&\n        !/^chrome/.test(window.location.href));\n};\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nconst isWindowsStoreApp = function () {\n    // Check for the presence of a couple WinRT globals\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\n * Converts a server error code to a JavaScript Error\n */\nfunction errorForServerCode(code, query) {\n    let reason = 'Unknown Error';\n    if (code === 'too_big') {\n        reason =\n            'The data requested exceeds the maximum size ' +\n                'that can be accessed with a single request.';\n    }\n    else if (code === 'permission_denied') {\n        reason = \"Client doesn't have permission to access the desired data.\";\n    }\n    else if (code === 'unavailable') {\n        reason = 'The service is unavailable';\n    }\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error.code = code.toUpperCase();\n    return error;\n}\n/**\n * Used to test for integer-looking strings\n */\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nconst INTEGER_32_MIN = -2147483648;\n/**\n * For use in keys, the maximum possible 32-bit integer.\n */\nconst INTEGER_32_MAX = 2147483647;\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nconst tryParseInt = function (str) {\n    if (INTEGER_REGEXP_.test(str)) {\n        const intVal = Number(str);\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n            return intVal;\n        }\n    }\n    return null;\n};\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nconst exceptionGuard = function (fn) {\n    try {\n        fn();\n    }\n    catch (e) {\n        // Re-throw exception when it's safe.\n        setTimeout(() => {\n            // It used to be that \"throw e\" would result in a good console error with\n            // relevant context, but as of Chrome 39, you just get the firebase.js\n            // file/line number where we re-throw it, which is useless. So we log\n            // e.stack explicitly.\n            const stack = e.stack || '';\n            warn('Exception was thrown by user callback.', stack);\n            throw e;\n        }, Math.floor(0));\n    }\n};\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nconst beingCrawled = function () {\n    const userAgent = (typeof window === 'object' &&\n        window['navigator'] &&\n        window['navigator']['userAgent']) ||\n        '';\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n    // believe to support JavaScript/AJAX rendering.\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\n};\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nconst setTimeoutNonBlocking = function (fn, time) {\n    const timeout = setTimeout(fn, time);\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n    if (typeof timeout === 'number' &&\n        // @ts-ignore Is only defined in Deno environments.\n        typeof Deno !== 'undefined' &&\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n        Deno['unrefTimer']) {\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n        Deno.unrefTimer(timeout);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }\n    else if (typeof timeout === 'object' && timeout['unref']) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        timeout['unref']();\n    }\n    return timeout;\n};\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nclass AppCheckTokenProvider {\n    constructor(app, appCheckProvider) {\n        this.appCheckProvider = appCheckProvider;\n        this.appName = app.name;\n        if (_isFirebaseServerApp(app) && app.settings.appCheckToken) {\n            this.serverAppAppCheckToken = app.settings.appCheckToken;\n        }\n        this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n        if (!this.appCheck) {\n            appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n        }\n    }\n    getToken(forceRefresh) {\n        if (this.serverAppAppCheckToken) {\n            if (forceRefresh) {\n                throw new Error('Attempted reuse of `FirebaseServerApp.appCheckToken` after previous usage failed.');\n            }\n            return Promise.resolve({ token: this.serverAppAppCheckToken });\n        }\n        if (!this.appCheck) {\n            return new Promise((resolve, reject) => {\n                // Support delayed initialization of FirebaseAppCheck. This allows our\n                // customers to initialize the RTDB SDK before initializing Firebase\n                // AppCheck and ensures that all requests are authenticated if a token\n                // becomes available before the timeout below expires.\n                setTimeout(() => {\n                    if (this.appCheck) {\n                        this.getToken(forceRefresh).then(resolve, reject);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                }, 0);\n            });\n        }\n        return this.appCheck.getToken(forceRefresh);\n    }\n    addTokenChangeListener(listener) {\n        this.appCheckProvider\n            ?.get()\n            .then(appCheck => appCheck.addTokenListener(listener));\n    }\n    notifyForInvalidToken() {\n        warn(`Provided AppCheck credentials for the app named \"${this.appName}\" ` +\n            'are invalid. This usually indicates your app was not initialized correctly.');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nclass FirebaseAuthTokenProvider {\n    constructor(appName_, firebaseOptions_, authProvider_) {\n        this.appName_ = appName_;\n        this.firebaseOptions_ = firebaseOptions_;\n        this.authProvider_ = authProvider_;\n        this.auth_ = null;\n        this.auth_ = authProvider_.getImmediate({ optional: true });\n        if (!this.auth_) {\n            authProvider_.onInit(auth => (this.auth_ = auth));\n        }\n    }\n    getToken(forceRefresh) {\n        if (!this.auth_) {\n            return new Promise((resolve, reject) => {\n                // Support delayed initialization of FirebaseAuth. This allows our\n                // customers to initialize the RTDB SDK before initializing Firebase\n                // Auth and ensures that all requests are authenticated if a token\n                // becomes available before the timeout below expires.\n                setTimeout(() => {\n                    if (this.auth_) {\n                        this.getToken(forceRefresh).then(resolve, reject);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                }, 0);\n            });\n        }\n        return this.auth_.getToken(forceRefresh).catch(error => {\n            // TODO: Need to figure out all the cases this is raised and whether\n            // this makes sense.\n            if (error && error.code === 'auth/token-not-initialized') {\n                log('Got auth/token-not-initialized error.  Treating as null token.');\n                return null;\n            }\n            else {\n                return Promise.reject(error);\n            }\n        });\n    }\n    addTokenChangeListener(listener) {\n        // TODO: We might want to wrap the listener and call it with no args to\n        // avoid a leaky abstraction, but that makes removing the listener harder.\n        if (this.auth_) {\n            this.auth_.addAuthTokenListener(listener);\n        }\n        else {\n            this.authProvider_\n                .get()\n                .then(auth => auth.addAuthTokenListener(listener));\n        }\n    }\n    removeTokenChangeListener(listener) {\n        this.authProvider_\n            .get()\n            .then(auth => auth.removeAuthTokenListener(listener));\n    }\n    notifyForInvalidToken() {\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\n            this.appName_ +\n            '\" are invalid. This usually indicates your app was not ' +\n            'initialized correctly. ';\n        if ('credential' in this.firebaseOptions_) {\n            errorMessage +=\n                'Make sure the \"credential\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else if ('serviceAccount' in this.firebaseOptions_) {\n            errorMessage +=\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else {\n            errorMessage +=\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n                    'initializeApp() match the values provided for your app at ' +\n                    'https://console.firebase.google.com/.';\n        }\n        warn(errorMessage);\n    }\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nclass EmulatorTokenProvider {\n    constructor(accessToken) {\n        this.accessToken = accessToken;\n    }\n    getToken(forceRefresh) {\n        return Promise.resolve({\n            accessToken: this.accessToken\n        });\n    }\n    addTokenChangeListener(listener) {\n        // Invoke the listener immediately to match the behavior in Firebase Auth\n        // (see packages/auth/src/auth.js#L1807)\n        listener(this.accessToken);\n    }\n    removeTokenChangeListener(listener) { }\n    notifyForInvalidToken() { }\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A class that holds metadata about a Repo object\n */\nclass RepoInfo {\n    /**\n     * @param host - Hostname portion of the url for the repo\n     * @param secure - Whether or not this repo is accessed over ssl\n     * @param namespace - The namespace represented by the repo\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n     * @param persistenceKey - Override the default session persistence storage key\n     */\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false, emulatorOptions = null) {\n        this.secure = secure;\n        this.namespace = namespace;\n        this.webSocketOnly = webSocketOnly;\n        this.nodeAdmin = nodeAdmin;\n        this.persistenceKey = persistenceKey;\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n        this.isUsingEmulator = isUsingEmulator;\n        this.emulatorOptions = emulatorOptions;\n        this._host = host.toLowerCase();\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\n        this.internalHost =\n            PersistentStorage.get('host:' + host) || this._host;\n    }\n    isCacheableHost() {\n        return this.internalHost.substr(0, 2) === 's-';\n    }\n    isCustomHost() {\n        return (this._domain !== 'firebaseio.com' &&\n            this._domain !== 'firebaseio-demo.com');\n    }\n    get host() {\n        return this._host;\n    }\n    set host(newHost) {\n        if (newHost !== this.internalHost) {\n            this.internalHost = newHost;\n            if (this.isCacheableHost()) {\n                PersistentStorage.set('host:' + this._host, this.internalHost);\n            }\n        }\n    }\n    toString() {\n        let str = this.toURLString();\n        if (this.persistenceKey) {\n            str += '<' + this.persistenceKey + '>';\n        }\n        return str;\n    }\n    toURLString() {\n        const protocol = this.secure ? 'https://' : 'http://';\n        const query = this.includeNamespaceInQueryParams\n            ? `?ns=${this.namespace}`\n            : '';\n        return `${protocol}${this.host}/${query}`;\n    }\n}\nfunction repoInfoNeedsQueryParam(repoInfo) {\n    return (repoInfo.host !== repoInfo.internalHost ||\n        repoInfo.isCustomHost() ||\n        repoInfo.includeNamespaceInQueryParams);\n}\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n    let connURL;\n    if (type === WEBSOCKET) {\n        connURL =\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n    }\n    else if (type === LONG_POLLING) {\n        connURL =\n            (repoInfo.secure ? 'https://' : 'http://') +\n                repoInfo.internalHost +\n                '/.lp?';\n    }\n    else {\n        throw new Error('Unknown connection type: ' + type);\n    }\n    if (repoInfoNeedsQueryParam(repoInfo)) {\n        params['ns'] = repoInfo.namespace;\n    }\n    const pairs = [];\n    each(params, (key, value) => {\n        pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Tracks a collection of stats.\n */\nclass StatsCollection {\n    constructor() {\n        this.counters_ = {};\n    }\n    incrementCounter(name, amount = 1) {\n        if (!contains(this.counters_, name)) {\n            this.counters_[name] = 0;\n        }\n        this.counters_[name] += amount;\n    }\n    get() {\n        return deepCopy(this.counters_);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst collections = {};\nconst reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n    const hashString = repoInfo.toString();\n    if (!collections[hashString]) {\n        collections[hashString] = new StatsCollection();\n    }\n    return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n    const hashString = repoInfo.toString();\n    if (!reporters[hashString]) {\n        reporters[hashString] = creatorFunction();\n    }\n    return reporters[hashString];\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nclass PacketReceiver {\n    /**\n     * @param onMessage_\n     */\n    constructor(onMessage_) {\n        this.onMessage_ = onMessage_;\n        this.pendingResponses = [];\n        this.currentResponseNum = 0;\n        this.closeAfterResponse = -1;\n        this.onClose = null;\n    }\n    closeAfter(responseNum, callback) {\n        this.closeAfterResponse = responseNum;\n        this.onClose = callback;\n        if (this.closeAfterResponse < this.currentResponseNum) {\n            this.onClose();\n            this.onClose = null;\n        }\n    }\n    /**\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n     * browsers will respond in the same order as the requests we sent\n     */\n    handleResponse(requestNum, data) {\n        this.pendingResponses[requestNum] = data;\n        while (this.pendingResponses[this.currentResponseNum]) {\n            const toProcess = this.pendingResponses[this.currentResponseNum];\n            delete this.pendingResponses[this.currentResponseNum];\n            for (let i = 0; i < toProcess.length; ++i) {\n                if (toProcess[i]) {\n                    exceptionGuard(() => {\n                        this.onMessage_(toProcess[i]);\n                    });\n                }\n            }\n            if (this.currentResponseNum === this.closeAfterResponse) {\n                if (this.onClose) {\n                    this.onClose();\n                    this.onClose = null;\n                }\n                break;\n            }\n            this.currentResponseNum++;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\n * This class manages a single long-polling connection.\n */\nclass BrowserPollConnection {\n    /**\n     * @param connId An identifier for this connection, used for logging\n     * @param repoInfo The info for the endpoint to send data to.\n     * @param applicationId The Firebase App ID for this project.\n     * @param appCheckToken The AppCheck token for this client.\n     * @param authToken The AuthToken to use for this connection.\n     * @param transportSessionId Optional transportSessionid if we are\n     * reconnecting for an existing transport session\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n     * already created a connection previously\n     */\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.repoInfo = repoInfo;\n        this.applicationId = applicationId;\n        this.appCheckToken = appCheckToken;\n        this.authToken = authToken;\n        this.transportSessionId = transportSessionId;\n        this.lastSessionId = lastSessionId;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.everConnected_ = false;\n        this.log_ = logWrapper(connId);\n        this.stats_ = statsManagerGetCollection(repoInfo);\n        this.urlFn = (params) => {\n            // Always add the token if we have one.\n            if (this.appCheckToken) {\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n            }\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n        };\n    }\n    /**\n     * @param onMessage - Callback when messages arrive\n     * @param onDisconnect - Callback with connection lost.\n     */\n    open(onMessage, onDisconnect) {\n        this.curSegmentNum = 0;\n        this.onDisconnect_ = onDisconnect;\n        this.myPacketOrderer = new PacketReceiver(onMessage);\n        this.isClosed_ = false;\n        this.connectTimeoutTimer_ = setTimeout(() => {\n            this.log_('Timed out trying to connect.');\n            // Make sure we clear the host cache\n            this.onClosed_();\n            this.connectTimeoutTimer_ = null;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(LP_CONNECT_TIMEOUT));\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\n        executeWhenDOMReady(() => {\n            if (this.isClosed_) {\n                return;\n            }\n            //Set up a callback that gets triggered once a connection is set up.\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\n                const [command, arg1, arg2, arg3, arg4] = args;\n                this.incrementIncomingBytes_(args);\n                if (!this.scriptTagHolder) {\n                    return; // we closed the connection.\n                }\n                if (this.connectTimeoutTimer_) {\n                    clearTimeout(this.connectTimeoutTimer_);\n                    this.connectTimeoutTimer_ = null;\n                }\n                this.everConnected_ = true;\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\n                    this.id = arg1;\n                    this.password = arg2;\n                }\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\n                    if (arg1) {\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\n                        // through our already open polls), so don't send any more.\n                        this.scriptTagHolder.sendNewPolls = false;\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\n                        // all of the responses up to this one before closing\n                        this.myPacketOrderer.closeAfter(arg1, () => {\n                            this.onClosed_();\n                        });\n                    }\n                    else {\n                        this.onClosed_();\n                    }\n                }\n                else {\n                    throw new Error('Unrecognized command received: ' + command);\n                }\n            }, (...args) => {\n                const [pN, data] = args;\n                this.incrementIncomingBytes_(args);\n                this.myPacketOrderer.handleResponse(pN, data);\n            }, () => {\n                this.onClosed_();\n            }, this.urlFn);\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n            //from cache.\n            const urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\n            }\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n            if (this.transportSessionId) {\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n            }\n            if (this.lastSessionId) {\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n            }\n            if (this.applicationId) {\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n            }\n            if (this.appCheckToken) {\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n            }\n            if (typeof location !== 'undefined' &&\n                location.hostname &&\n                FORGE_DOMAIN_RE.test(location.hostname)) {\n                urlParams[REFERER_PARAM] = FORGE_REF;\n            }\n            const connectURL = this.urlFn(urlParams);\n            this.log_('Connecting via long-poll to ' + connectURL);\n            this.scriptTagHolder.addTag(connectURL, () => {\n                /* do nothing */\n            });\n        });\n    }\n    /**\n     * Call this when a handshake has completed successfully and we want to consider the connection established\n     */\n    start() {\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\n        this.addDisconnectPingFrame(this.id, this.password);\n    }\n    /**\n     * Forces long polling to be considered as a potential transport\n     */\n    static forceAllow() {\n        BrowserPollConnection.forceAllow_ = true;\n    }\n    /**\n     * Forces longpolling to not be considered as a potential transport\n     */\n    static forceDisallow() {\n        BrowserPollConnection.forceDisallow_ = true;\n    }\n    // Static method, use string literal so it can be accessed in a generic way\n    static isAvailable() {\n        if (isNodeSdk()) {\n            return false;\n        }\n        else if (BrowserPollConnection.forceAllow_) {\n            return true;\n        }\n        else {\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n            return (!BrowserPollConnection.forceDisallow_ &&\n                typeof document !== 'undefined' &&\n                document.createElement != null &&\n                !isChromeExtensionContentScript() &&\n                !isWindowsStoreApp());\n        }\n    }\n    /**\n     * No-op for polling\n     */\n    markConnectionHealthy() { }\n    /**\n     * Stops polling and cleans up the iframe\n     */\n    shutdown_() {\n        this.isClosed_ = true;\n        if (this.scriptTagHolder) {\n            this.scriptTagHolder.close();\n            this.scriptTagHolder = null;\n        }\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n        if (this.myDisconnFrame) {\n            document.body.removeChild(this.myDisconnFrame);\n            this.myDisconnFrame = null;\n        }\n        if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n        }\n    }\n    /**\n     * Triggered when this transport is closed\n     */\n    onClosed_() {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is closing itself');\n            this.shutdown_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_(this.everConnected_);\n                this.onDisconnect_ = null;\n            }\n        }\n    }\n    /**\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n     * that we've left.\n     */\n    close() {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is being closed.');\n            this.shutdown_();\n        }\n    }\n    /**\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n     * broken into chunks (since URLs have a small maximum length).\n     * @param data - The JSON data to transmit.\n     */\n    send(data) {\n        const dataStr = stringify(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //first, lets get the base64-encoded data\n        const base64data = base64Encode(dataStr);\n        //We can only fit a certain amount in each URL, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n        //of segments so that we can reassemble the packet on the server.\n        for (let i = 0; i < dataSegs.length; i++) {\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n            this.curSegmentNum++;\n        }\n    }\n    /**\n     * This is how we notify the server that we're leaving.\n     * We aren't able to send requests with DHTML on a window close event, but we can\n     * trigger XHR requests in some browsers (everything but Opera basically).\n     */\n    addDisconnectPingFrame(id, pw) {\n        if (isNodeSdk()) {\n            return;\n        }\n        this.myDisconnFrame = document.createElement('iframe');\n        const urlParams = {};\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n        this.myDisconnFrame.src = this.urlFn(urlParams);\n        this.myDisconnFrame.style.display = 'none';\n        document.body.appendChild(this.myDisconnFrame);\n    }\n    /**\n     * Used to track the bytes received by this client\n     */\n    incrementIncomingBytes_(args) {\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n        const bytesReceived = stringify(args).length;\n        this.bytesReceived += bytesReceived;\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\n    }\n}\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nclass FirebaseIFrameScriptHolder {\n    /**\n     * @param commandCB - The callback to be called when control commands are received from the server.\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\n     */\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n        this.onDisconnect = onDisconnect;\n        this.urlFn = urlFn;\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n        //problems in some browsers.\n        this.outstandingRequests = new Set();\n        //A queue of the pending segments waiting for transmission to the server.\n        this.pendingSegs = [];\n        //A serial number. We use this for two things:\n        // 1) A way to ensure the browser doesn't cache responses to polls\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n        //    JSONP code in the order it was added to the iframe.\n        this.currentSerial = Math.floor(Math.random() * 100000000);\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n        // incoming data from the server that we're waiting for).\n        this.sendNewPolls = true;\n        if (!isNodeSdk()) {\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n            //iframes where we put the long-polling script tags. We have two callbacks:\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\n            //   2) Message Callback - Triggered when new data arrives.\n            this.uniqueCallbackIdentifier = LUIDGenerator();\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n                onMessageCB;\n            //Create an iframe for us to add script tags to.\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n            // Set the iframe's contents.\n            let script = '';\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n            // for ie9, but ie8 needs to do it again in the document itself.\n            if (this.myIFrame.src &&\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n                const currentDomain = document.domain;\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n            }\n            const iframeContents = '<html><body>' + script + '</body></html>';\n            try {\n                this.myIFrame.doc.open();\n                this.myIFrame.doc.write(iframeContents);\n                this.myIFrame.doc.close();\n            }\n            catch (e) {\n                log('frame writing exception');\n                if (e.stack) {\n                    log(e.stack);\n                }\n                log(e);\n            }\n        }\n        else {\n            this.commandCB = commandCB;\n            this.onMessageCB = onMessageCB;\n        }\n    }\n    /**\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n     * actually use.\n     */\n    static createIFrame_() {\n        const iframe = document.createElement('iframe');\n        iframe.style.display = 'none';\n        // This is necessary in order to initialize the document inside the iframe\n        if (document.body) {\n            document.body.appendChild(iframe);\n            try {\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n                const a = iframe.contentWindow.document;\n                if (!a) {\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n                    log('No IE domain setting required');\n                }\n            }\n            catch (e) {\n                const domain = document.domain;\n                iframe.src =\n                    \"javascript:void((function(){document.open();document.domain='\" +\n                        domain +\n                        \"';document.close();})())\";\n            }\n        }\n        else {\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n            // never gets hit.\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n        }\n        // Get the document of the iframe in a browser-specific way.\n        if (iframe.contentDocument) {\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n        }\n        else if (iframe.contentWindow) {\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        else if (iframe.document) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            iframe.doc = iframe.document; //others?\n        }\n        return iframe;\n    }\n    /**\n     * Cancel all outstanding queries and remove the frame.\n     */\n    close() {\n        //Mark this iframe as dead, so no new requests are sent.\n        this.alive = false;\n        if (this.myIFrame) {\n            //We have to actually remove all of the html inside this iframe before removing it from the\n            //window, or IE will continue loading and executing the script tags we've already added, which\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n            this.myIFrame.doc.body.textContent = '';\n            setTimeout(() => {\n                if (this.myIFrame !== null) {\n                    document.body.removeChild(this.myIFrame);\n                    this.myIFrame = null;\n                }\n            }, Math.floor(0));\n        }\n        // Protect from being called recursively.\n        const onDisconnect = this.onDisconnect;\n        if (onDisconnect) {\n            this.onDisconnect = null;\n            onDisconnect();\n        }\n    }\n    /**\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n     * @param id - The ID of this connection\n     * @param pw - The password for this connection\n     */\n    startLongPoll(id, pw) {\n        this.myID = id;\n        this.myPW = pw;\n        this.alive = true;\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n        while (this.newRequest_()) { }\n    }\n    /**\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n     * too many outstanding requests and we are still alive.\n     *\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n     * needed.\n     */\n    newRequest_() {\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n        // close the old request.\n        if (this.alive &&\n            this.sendNewPolls &&\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n            //construct our url\n            this.currentSerial++;\n            const urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n            let theURL = this.urlFn(urlParams);\n            //Now add as much data as we can.\n            let curDataString = '';\n            let i = 0;\n            while (this.pendingSegs.length > 0) {\n                //first, lets see if the next segment will fit.\n                const nextSeg = this.pendingSegs[0];\n                if (nextSeg.d.length +\n                    SEG_HEADER_SIZE +\n                    curDataString.length <=\n                    MAX_URL_DATA_SIZE) {\n                    //great, the segment will fit. Lets append it.\n                    const theSeg = this.pendingSegs.shift();\n                    curDataString =\n                        curDataString +\n                            '&' +\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n                            i +\n                            '=' +\n                            theSeg.seg +\n                            '&' +\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n                            i +\n                            '=' +\n                            theSeg.ts +\n                            '&' +\n                            FIREBASE_LONGPOLL_DATA_PARAM +\n                            i +\n                            '=' +\n                            theSeg.d;\n                    i++;\n                }\n                else {\n                    break;\n                }\n            }\n            theURL = theURL + curDataString;\n            this.addLongPollTag_(theURL, this.currentSerial);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Queue a packet for transmission to the server.\n     * @param segnum - A sequential id for this packet segment used for reassembly\n     * @param totalsegs - The total number of segments in this packet\n     * @param data - The data for this segment.\n     */\n    enqueueSegment(segnum, totalsegs, data) {\n        //add this to the queue of segments to send.\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n        //send the data immediately if there isn't already data being transmitted, unless\n        //startLongPoll hasn't been called yet.\n        if (this.alive) {\n            this.newRequest_();\n        }\n    }\n    /**\n     * Add a script tag for a regular long-poll request.\n     * @param url - The URL of the script tag.\n     * @param serial - The serial number of the request.\n     */\n    addLongPollTag_(url, serial) {\n        //remember that we sent this request.\n        this.outstandingRequests.add(serial);\n        const doNewRequest = () => {\n            this.outstandingRequests.delete(serial);\n            this.newRequest_();\n        };\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n        const readyStateCB = () => {\n            // Request completed.  Cancel the keepalive.\n            clearTimeout(keepaliveTimeout);\n            // Trigger a new request so we can continue receiving data.\n            doNewRequest();\n        };\n        this.addTag(url, readyStateCB);\n    }\n    /**\n     * Add an arbitrary script tag to the iframe.\n     * @param url - The URL for the script tag source.\n     * @param loadCB - A callback to be triggered once the script has loaded.\n     */\n    addTag(url, loadCB) {\n        if (isNodeSdk()) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.doNodeLongPoll(url, loadCB);\n        }\n        else {\n            setTimeout(() => {\n                try {\n                    // if we're already closed, don't add this poll\n                    if (!this.sendNewPolls) {\n                        return;\n                    }\n                    const newScript = this.myIFrame.doc.createElement('script');\n                    newScript.type = 'text/javascript';\n                    newScript.async = true;\n                    newScript.src = url;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    newScript.onload = newScript.onreadystatechange =\n                        function () {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            const rstate = newScript.readyState;\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                newScript.onload = newScript.onreadystatechange = null;\n                                if (newScript.parentNode) {\n                                    newScript.parentNode.removeChild(newScript);\n                                }\n                                loadCB();\n                            }\n                        };\n                    newScript.onerror = () => {\n                        log('Long-poll script failed to load: ' + url);\n                        this.sendNewPolls = false;\n                        this.close();\n                    };\n                    this.myIFrame.doc.body.appendChild(newScript);\n                }\n                catch (e) {\n                    // TODO: we should make this error visible somehow\n                }\n            }, Math.floor(1));\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n    WebSocketImpl = MozWebSocket;\n}\nelse if (typeof WebSocket !== 'undefined') {\n    WebSocketImpl = WebSocket;\n}\n/**\n * Create a new websocket connection with the given callbacks.\n */\nclass WebSocketConnection {\n    /**\n     * @param connId identifier for this transport\n     * @param repoInfo The info for the websocket endpoint.\n     * @param applicationId The Firebase App ID for this project.\n     * @param appCheckToken The App Check Token for this client.\n     * @param authToken The Auth Token for this client.\n     * @param transportSessionId Optional transportSessionId if this is connecting\n     * to an existing transport session\n     * @param lastSessionId Optional lastSessionId if there was a previous\n     * connection\n     */\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.applicationId = applicationId;\n        this.appCheckToken = appCheckToken;\n        this.authToken = authToken;\n        this.keepaliveTimer = null;\n        this.frames = null;\n        this.totalFrames = 0;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.log_ = logWrapper(this.connId);\n        this.stats_ = statsManagerGetCollection(repoInfo);\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n        this.nodeAdmin = repoInfo.nodeAdmin;\n    }\n    /**\n     * @param repoInfo - The info for the websocket endpoint.\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n     *                                         session\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\n     * @returns connection url\n     */\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n        const urlParams = {};\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n        if (!isNodeSdk() &&\n            typeof location !== 'undefined' &&\n            location.hostname &&\n            FORGE_DOMAIN_RE.test(location.hostname)) {\n            urlParams[REFERER_PARAM] = FORGE_REF;\n        }\n        if (transportSessionId) {\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n        }\n        if (lastSessionId) {\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\n        }\n        if (appCheckToken) {\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n        }\n        if (applicationId) {\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\n        }\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n    }\n    /**\n     * @param onMessage - Callback when messages arrive\n     * @param onDisconnect - Callback with connection lost.\n     */\n    open(onMessage, onDisconnect) {\n        this.onDisconnect = onDisconnect;\n        this.onMessage = onMessage;\n        this.log_('Websocket connecting to ' + this.connURL);\n        this.everConnected_ = false;\n        // Assume failure until proven otherwise.\n        PersistentStorage.set('previous_websocket_failure', true);\n        try {\n            let options;\n            if (isNodeSdk()) {\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n                options = {\n                    headers: {\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n                        'X-Firebase-GMPID': this.applicationId || ''\n                    }\n                };\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\n                // Note that we send the credentials here even if they aren't admin credentials, which is\n                // not a problem.\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\n                // through the websocket connection once it is established.\n                if (this.authToken) {\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\n                }\n                if (this.appCheckToken) {\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n                }\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n                const env = process['env'];\n                const proxy = this.connURL.indexOf('wss://') === 0\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\n                    : env['HTTP_PROXY'] || env['http_proxy'];\n                if (proxy) {\n                    options['proxy'] = { origin: proxy };\n                }\n            }\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\n        }\n        catch (e) {\n            this.log_('Error instantiating WebSocket.');\n            const error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n            return;\n        }\n        this.mySock.onopen = () => {\n            this.log_('Websocket connected.');\n            this.everConnected_ = true;\n        };\n        this.mySock.onclose = () => {\n            this.log_('Websocket connection was disconnected.');\n            this.mySock = null;\n            this.onClosed_();\n        };\n        this.mySock.onmessage = m => {\n            this.handleIncomingFrame(m);\n        };\n        this.mySock.onerror = e => {\n            this.log_('WebSocket error.  Closing connection.');\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n        };\n    }\n    /**\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n     */\n    start() { }\n    static forceDisallow() {\n        WebSocketConnection.forceDisallow_ = true;\n    }\n    static isAvailable() {\n        let isOldAndroid = false;\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n                    isOldAndroid = true;\n                }\n            }\n        }\n        return (!isOldAndroid &&\n            WebSocketImpl !== null &&\n            !WebSocketConnection.forceDisallow_);\n    }\n    /**\n     * Returns true if we previously failed to connect with this transport.\n     */\n    static previouslyFailed() {\n        // If our persistent storage is actually only in-memory storage,\n        // we default to assuming that it previously failed to be safe.\n        return (PersistentStorage.isInMemoryStorage ||\n            PersistentStorage.get('previous_websocket_failure') === true);\n    }\n    markConnectionHealthy() {\n        PersistentStorage.remove('previous_websocket_failure');\n    }\n    appendFrame_(data) {\n        this.frames.push(data);\n        if (this.frames.length === this.totalFrames) {\n            const fullMess = this.frames.join('');\n            this.frames = null;\n            const jsonMess = jsonEval(fullMess);\n            //handle the message\n            this.onMessage(jsonMess);\n        }\n    }\n    /**\n     * @param frameCount - The number of frames we are expecting from the server\n     */\n    handleNewFrameCount_(frameCount) {\n        this.totalFrames = frameCount;\n        this.frames = [];\n    }\n    /**\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n     * @returns Any remaining data to be process, or null if there is none\n     */\n    extractFrameCount_(data) {\n        assert(this.frames === null, 'We already have a frame buffer');\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n        if (data.length <= 6) {\n            const frameCount = Number(data);\n            if (!isNaN(frameCount)) {\n                this.handleNewFrameCount_(frameCount);\n                return null;\n            }\n        }\n        this.handleNewFrameCount_(1);\n        return data;\n    }\n    /**\n     * Process a websocket frame that has arrived from the server.\n     * @param mess - The frame data\n     */\n    handleIncomingFrame(mess) {\n        if (this.mySock === null) {\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n        }\n        const data = mess['data'];\n        this.bytesReceived += data.length;\n        this.stats_.incrementCounter('bytes_received', data.length);\n        this.resetKeepAlive();\n        if (this.frames !== null) {\n            // we're buffering\n            this.appendFrame_(data);\n        }\n        else {\n            // try to parse out a frame count, otherwise, assume 1 and process it\n            const remainingData = this.extractFrameCount_(data);\n            if (remainingData !== null) {\n                this.appendFrame_(remainingData);\n            }\n        }\n    }\n    /**\n     * Send a message to the server\n     * @param data - The JSON object to transmit\n     */\n    send(data) {\n        this.resetKeepAlive();\n        const dataStr = stringify(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n        //Send the length header\n        if (dataSegs.length > 1) {\n            this.sendString_(String(dataSegs.length));\n        }\n        //Send the actual data in segments.\n        for (let i = 0; i < dataSegs.length; i++) {\n            this.sendString_(dataSegs[i]);\n        }\n    }\n    shutdown_() {\n        this.isClosed_ = true;\n        if (this.keepaliveTimer) {\n            clearInterval(this.keepaliveTimer);\n            this.keepaliveTimer = null;\n        }\n        if (this.mySock) {\n            this.mySock.close();\n            this.mySock = null;\n        }\n    }\n    onClosed_() {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is closing itself');\n            this.shutdown_();\n            // since this is an internal close, trigger the close listener\n            if (this.onDisconnect) {\n                this.onDisconnect(this.everConnected_);\n                this.onDisconnect = null;\n            }\n        }\n    }\n    /**\n     * External-facing close handler.\n     * Close the websocket and kill the connection.\n     */\n    close() {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is being closed');\n            this.shutdown_();\n        }\n    }\n    /**\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n     * the last activity.\n     */\n    resetKeepAlive() {\n        clearInterval(this.keepaliveTimer);\n        this.keepaliveTimer = setInterval(() => {\n            //If there has been no websocket activity for a while, send a no-op\n            if (this.mySock) {\n                this.sendString_('0');\n            }\n            this.resetKeepAlive();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n    }\n    /**\n     * Send a string over the websocket.\n     *\n     * @param str - String to send.\n     */\n    sendString_(str) {\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n        // calls for some unknown reason.  We treat these as an error and disconnect.\n        // See https://app.asana.com/0/58926111402292/68021340250410\n        try {\n            this.mySock.send(str);\n        }\n        catch (e) {\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n            setTimeout(this.onClosed_.bind(this), 0);\n        }\n    }\n}\n/**\n * Number of response before we consider the connection \"healthy.\"\n */\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\n * Time to wait for the connection te become healthy before giving up.\n */\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nclass TransportManager {\n    static get ALL_TRANSPORTS() {\n        return [BrowserPollConnection, WebSocketConnection];\n    }\n    /**\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n     * TransportManager has already set up transports_\n     */\n    static get IS_TRANSPORT_INITIALIZED() {\n        return this.globalTransportInitialized_;\n    }\n    /**\n     * @param repoInfo - Metadata around the namespace we're connecting to\n     */\n    constructor(repoInfo) {\n        this.initTransports_(repoInfo);\n    }\n    initTransports_(repoInfo) {\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n        if (repoInfo.webSocketOnly) {\n            if (!isWebSocketsAvailable) {\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n            }\n            isSkipPollConnection = true;\n        }\n        if (isSkipPollConnection) {\n            this.transports_ = [WebSocketConnection];\n        }\n        else {\n            const transports = (this.transports_ = []);\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\n                if (transport && transport['isAvailable']()) {\n                    transports.push(transport);\n                }\n            }\n            TransportManager.globalTransportInitialized_ = true;\n        }\n    }\n    /**\n     * @returns The constructor for the initial transport to use\n     */\n    initialTransport() {\n        if (this.transports_.length > 0) {\n            return this.transports_[0];\n        }\n        else {\n            throw new Error('No transports available');\n        }\n    }\n    /**\n     * @returns The constructor for the next transport, or null\n     */\n    upgradeTransport() {\n        if (this.transports_.length > 1) {\n            return this.transports_[1];\n        }\n        else {\n            return null;\n        }\n    }\n}\n// Keeps track of whether the TransportManager has already chosen a transport to use\nTransportManager.globalTransportInitialized_ = false;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nclass Connection {\n    /**\n     * @param id - an id for this connection\n     * @param repoInfo_ - the info for the endpoint to connect to\n     * @param applicationId_ - the Firebase App ID for this project\n     * @param appCheckToken_ - The App Check Token for this device.\n     * @param authToken_ - The auth token for this session.\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n     */\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n        this.id = id;\n        this.repoInfo_ = repoInfo_;\n        this.applicationId_ = applicationId_;\n        this.appCheckToken_ = appCheckToken_;\n        this.authToken_ = authToken_;\n        this.onMessage_ = onMessage_;\n        this.onReady_ = onReady_;\n        this.onDisconnect_ = onDisconnect_;\n        this.onKill_ = onKill_;\n        this.lastSessionId = lastSessionId;\n        this.connectionCount = 0;\n        this.pendingDataMessages = [];\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\n        this.log_ = logWrapper('c:' + this.id + ':');\n        this.transportManager_ = new TransportManager(repoInfo_);\n        this.log_('Connection created');\n        this.start_();\n    }\n    /**\n     * Starts a connection attempt\n     */\n    start_() {\n        const conn = this.transportManager_.initialTransport();\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n        const onMessageReceived = this.connReceiver_(this.conn_);\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\n        this.tx_ = this.conn_;\n        this.rx_ = this.conn_;\n        this.secondaryConn_ = null;\n        this.isHealthy_ = false;\n        /*\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n         * still have the context of your originating frame.\n         */\n        setTimeout(() => {\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n        }, Math.floor(0));\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n        if (healthyTimeoutMS > 0) {\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n                this.healthyTimeout_ = null;\n                if (!this.isHealthy_) {\n                    if (this.conn_ &&\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n                        this.log_('Connection exceeded healthy timeout but has received ' +\n                            this.conn_.bytesReceived +\n                            ' bytes.  Marking connection healthy.');\n                        this.isHealthy_ = true;\n                        this.conn_.markConnectionHealthy();\n                    }\n                    else if (this.conn_ &&\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\n                            this.conn_.bytesSent +\n                            ' bytes.  Leaving connection alive.');\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n                        // the server.\n                    }\n                    else {\n                        this.log_('Closing unhealthy connection after timeout.');\n                        this.close();\n                    }\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }, Math.floor(healthyTimeoutMS));\n        }\n    }\n    nextTransportId_() {\n        return 'c:' + this.id + ':' + this.connectionCount++;\n    }\n    disconnReceiver_(conn) {\n        return everConnected => {\n            if (conn === this.conn_) {\n                this.onConnectionLost_(everConnected);\n            }\n            else if (conn === this.secondaryConn_) {\n                this.log_('Secondary connection lost.');\n                this.onSecondaryConnectionLost_();\n            }\n            else {\n                this.log_('closing an old connection');\n            }\n        };\n    }\n    connReceiver_(conn) {\n        return (message) => {\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n                if (conn === this.rx_) {\n                    this.onPrimaryMessageReceived_(message);\n                }\n                else if (conn === this.secondaryConn_) {\n                    this.onSecondaryMessageReceived_(message);\n                }\n                else {\n                    this.log_('message on old connection');\n                }\n            }\n        };\n    }\n    /**\n     * @param dataMsg - An arbitrary data message to be sent to the server\n     */\n    sendRequest(dataMsg) {\n        // wrap in a data message envelope and send it on\n        const msg = { t: 'd', d: dataMsg };\n        this.sendData_(msg);\n    }\n    tryCleanupConnection() {\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n            this.conn_ = this.secondaryConn_;\n            this.secondaryConn_ = null;\n            // the server will shutdown the old connection\n        }\n    }\n    onSecondaryControl_(controlData) {\n        if (MESSAGE_TYPE in controlData) {\n            const cmd = controlData[MESSAGE_TYPE];\n            if (cmd === SWITCH_ACK) {\n                this.upgradeIfSecondaryHealthy_();\n            }\n            else if (cmd === CONTROL_RESET) {\n                // Most likely the session wasn't valid. Abandon the switch attempt\n                this.log_('Got a reset on secondary, closing it');\n                this.secondaryConn_.close();\n                // If we were already using this connection for something, than we need to fully close\n                if (this.tx_ === this.secondaryConn_ ||\n                    this.rx_ === this.secondaryConn_) {\n                    this.close();\n                }\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on secondary.');\n                this.secondaryResponsesRequired_--;\n                this.upgradeIfSecondaryHealthy_();\n            }\n        }\n    }\n    onSecondaryMessageReceived_(parsedData) {\n        const layer = requireKey('t', parsedData);\n        const data = requireKey('d', parsedData);\n        if (layer === 'c') {\n            this.onSecondaryControl_(data);\n        }\n        else if (layer === 'd') {\n            // got a data message, but we're still second connection. Need to buffer it up\n            this.pendingDataMessages.push(data);\n        }\n        else {\n            throw new Error('Unknown protocol layer: ' + layer);\n        }\n    }\n    upgradeIfSecondaryHealthy_() {\n        if (this.secondaryResponsesRequired_ <= 0) {\n            this.log_('Secondary connection is healthy.');\n            this.isHealthy_ = true;\n            this.secondaryConn_.markConnectionHealthy();\n            this.proceedWithUpgrade_();\n        }\n        else {\n            // Send a ping to make sure the connection is healthy.\n            this.log_('sending ping on secondary.');\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n        }\n    }\n    proceedWithUpgrade_() {\n        // tell this connection to consider itself open\n        this.secondaryConn_.start();\n        // send ack\n        this.log_('sending client ack on secondary');\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n        // send end packet on primary transport, switch to sending on this one\n        // can receive on this one, buffer responses until end received on primary transport\n        this.log_('Ending transmission on primary');\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n        this.tx_ = this.secondaryConn_;\n        this.tryCleanupConnection();\n    }\n    onPrimaryMessageReceived_(parsedData) {\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n        const layer = requireKey('t', parsedData);\n        const data = requireKey('d', parsedData);\n        if (layer === 'c') {\n            this.onControl_(data);\n        }\n        else if (layer === 'd') {\n            this.onDataMessage_(data);\n        }\n    }\n    onDataMessage_(message) {\n        this.onPrimaryResponse_();\n        // We don't do anything with data messages, just kick them up a level\n        this.onMessage_(message);\n    }\n    onPrimaryResponse_() {\n        if (!this.isHealthy_) {\n            this.primaryResponsesRequired_--;\n            if (this.primaryResponsesRequired_ <= 0) {\n                this.log_('Primary connection is healthy.');\n                this.isHealthy_ = true;\n                this.conn_.markConnectionHealthy();\n            }\n        }\n    }\n    onControl_(controlData) {\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\n        if (MESSAGE_DATA in controlData) {\n            const payload = controlData[MESSAGE_DATA];\n            if (cmd === SERVER_HELLO) {\n                const handshakePayload = {\n                    ...payload\n                };\n                if (this.repoInfo_.isUsingEmulator) {\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n                    handshakePayload.h = this.repoInfo_.host;\n                }\n                this.onHandshake_(handshakePayload);\n            }\n            else if (cmd === END_TRANSMISSION) {\n                this.log_('recvd end transmission on primary');\n                this.rx_ = this.secondaryConn_;\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n                    this.onDataMessage_(this.pendingDataMessages[i]);\n                }\n                this.pendingDataMessages = [];\n                this.tryCleanupConnection();\n            }\n            else if (cmd === CONTROL_SHUTDOWN) {\n                // This was previously the 'onKill' callback passed to the lower-level connection\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\n                this.onConnectionShutdown_(payload);\n            }\n            else if (cmd === CONTROL_RESET) {\n                // payload in this case is the host we should contact\n                this.onReset_(payload);\n            }\n            else if (cmd === CONTROL_ERROR) {\n                error('Server Error: ' + payload);\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on primary.');\n                this.onPrimaryResponse_();\n                this.sendPingOnPrimaryIfNecessary_();\n            }\n            else {\n                error('Unknown control packet command: ' + cmd);\n            }\n        }\n    }\n    /**\n     * @param handshake - The handshake data returned from the server\n     */\n    onHandshake_(handshake) {\n        const timestamp = handshake.ts;\n        const version = handshake.v;\n        const host = handshake.h;\n        this.sessionId = handshake.s;\n        this.repoInfo_.host = host;\n        // if we've already closed the connection, then don't bother trying to progress further\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\n            this.conn_.start();\n            this.onConnectionEstablished_(this.conn_, timestamp);\n            if (PROTOCOL_VERSION !== version) {\n                warn('Protocol version mismatch detected');\n            }\n            // TODO: do we want to upgrade? when? maybe a delay?\n            this.tryStartUpgrade_();\n        }\n    }\n    tryStartUpgrade_() {\n        const conn = this.transportManager_.upgradeTransport();\n        if (conn) {\n            this.startUpgrade_(conn);\n        }\n    }\n    startUpgrade_(conn) {\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.secondaryResponsesRequired_ =\n            conn['responsesRequiredToBeHealthy'] || 0;\n        const onMessage = this.connReceiver_(this.secondaryConn_);\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n        this.secondaryConn_.open(onMessage, onDisconnect);\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n        setTimeoutNonBlocking(() => {\n            if (this.secondaryConn_) {\n                this.log_('Timed out trying to upgrade.');\n                this.secondaryConn_.close();\n            }\n        }, Math.floor(UPGRADE_TIMEOUT));\n    }\n    onReset_(host) {\n        this.log_('Reset packet received.  New host: ' + host);\n        this.repoInfo_.host = host;\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n        // We don't currently support resets after the connection has already been established\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.close();\n        }\n        else {\n            // Close whatever connections we have open and start again.\n            this.closeConnections_();\n            this.start_();\n        }\n    }\n    onConnectionEstablished_(conn, timestamp) {\n        this.log_('Realtime connection established.');\n        this.conn_ = conn;\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\n        if (this.onReady_) {\n            this.onReady_(timestamp, this.sessionId);\n            this.onReady_ = null;\n        }\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n        // send some pings.\n        if (this.primaryResponsesRequired_ === 0) {\n            this.log_('Primary connection is healthy.');\n            this.isHealthy_ = true;\n        }\n        else {\n            setTimeoutNonBlocking(() => {\n                this.sendPingOnPrimaryIfNecessary_();\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n        }\n    }\n    sendPingOnPrimaryIfNecessary_() {\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.log_('sending ping on primary.');\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n        }\n    }\n    onSecondaryConnectionLost_() {\n        const conn = this.secondaryConn_;\n        this.secondaryConn_ = null;\n        if (this.tx_ === conn || this.rx_ === conn) {\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\n            this.close();\n        }\n    }\n    /**\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n     * we should flush the host cache\n     */\n    onConnectionLost_(everConnected) {\n        this.conn_ = null;\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\n            this.log_('Realtime connection failed.');\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n            if (this.repoInfo_.isCacheableHost()) {\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n                this.repoInfo_.internalHost = this.repoInfo_.host;\n            }\n        }\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.log_('Realtime connection lost.');\n        }\n        this.close();\n    }\n    onConnectionShutdown_(reason) {\n        this.log_('Connection shutdown command received. Shutting down...');\n        if (this.onKill_) {\n            this.onKill_(reason);\n            this.onKill_ = null;\n        }\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\n        // so clear the callback.\n        this.onDisconnect_ = null;\n        this.close();\n    }\n    sendData_(data) {\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\n            throw 'Connection is not connected';\n        }\n        else {\n            this.tx_.send(data);\n        }\n    }\n    /**\n     * Cleans up this connection, calling the appropriate callbacks\n     */\n    close() {\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n            this.log_('Closing realtime connection.');\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\n            this.closeConnections_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_();\n                this.onDisconnect_ = null;\n            }\n        }\n    }\n    closeConnections_() {\n        this.log_('Shutting down all connections');\n        if (this.conn_) {\n            this.conn_.close();\n            this.conn_ = null;\n        }\n        if (this.secondaryConn_) {\n            this.secondaryConn_.close();\n            this.secondaryConn_ = null;\n        }\n        if (this.healthyTimeout_) {\n            clearTimeout(this.healthyTimeout_);\n            this.healthyTimeout_ = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nclass ServerActions {\n    put(pathString, data, onComplete, hash) { }\n    merge(pathString, data, onComplete, hash) { }\n    /**\n     * Refreshes the auth token for the current connection.\n     * @param token - The authentication token\n     */\n    refreshAuthToken(token) { }\n    /**\n     * Refreshes the app check token for the current connection.\n     * @param token The app check token\n     */\n    refreshAppCheckToken(token) { }\n    onDisconnectPut(pathString, data, onComplete) { }\n    onDisconnectMerge(pathString, data, onComplete) { }\n    onDisconnectCancel(pathString, onComplete) { }\n    reportStats(stats) { }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nclass EventEmitter {\n    constructor(allowedEvents_) {\n        this.allowedEvents_ = allowedEvents_;\n        this.listeners_ = {};\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n    }\n    /**\n     * To be called by derived classes to trigger events.\n     */\n    trigger(eventType, ...varArgs) {\n        if (Array.isArray(this.listeners_[eventType])) {\n            // Clone the list, since callbacks could add/remove listeners.\n            const listeners = [...this.listeners_[eventType]];\n            for (let i = 0; i < listeners.length; i++) {\n                listeners[i].callback.apply(listeners[i].context, varArgs);\n            }\n        }\n    }\n    on(eventType, callback, context) {\n        this.validateEventType_(eventType);\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\n        this.listeners_[eventType].push({ callback, context });\n        const eventData = this.getInitialEvent(eventType);\n        if (eventData) {\n            callback.apply(context, eventData);\n        }\n    }\n    off(eventType, callback, context) {\n        this.validateEventType_(eventType);\n        const listeners = this.listeners_[eventType] || [];\n        for (let i = 0; i < listeners.length; i++) {\n            if (listeners[i].callback === callback &&\n                (!context || context === listeners[i].context)) {\n                listeners.splice(i, 1);\n                return;\n            }\n        }\n    }\n    validateEventType_(eventType) {\n        assert(this.allowedEvents_.find(et => {\n            return et === eventType;\n        }), 'Unknown event: ' + eventType);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nclass OnlineMonitor extends EventEmitter {\n    static getInstance() {\n        return new OnlineMonitor();\n    }\n    constructor() {\n        super(['online']);\n        this.online_ = true;\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\n        // for Cordova.\n        if (typeof window !== 'undefined' &&\n            typeof window.addEventListener !== 'undefined' &&\n            !isMobileCordova()) {\n            window.addEventListener('online', () => {\n                if (!this.online_) {\n                    this.online_ = true;\n                    this.trigger('online', true);\n                }\n            }, false);\n            window.addEventListener('offline', () => {\n                if (this.online_) {\n                    this.online_ = false;\n                    this.trigger('online', false);\n                }\n            }, false);\n        }\n    }\n    getInitialEvent(eventType) {\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\n        return [this.online_];\n    }\n    currentlyOnline() {\n        return this.online_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\nclass Path {\n    /**\n     * @param pathOrString - Path string to parse, or another path, or the raw\n     * tokens array\n     */\n    constructor(pathOrString, pieceNum) {\n        if (pieceNum === void 0) {\n            this.pieces_ = pathOrString.split('/');\n            // Remove empty pieces.\n            let copyTo = 0;\n            for (let i = 0; i < this.pieces_.length; i++) {\n                if (this.pieces_[i].length > 0) {\n                    this.pieces_[copyTo] = this.pieces_[i];\n                    copyTo++;\n                }\n            }\n            this.pieces_.length = copyTo;\n            this.pieceNum_ = 0;\n        }\n        else {\n            this.pieces_ = pathOrString;\n            this.pieceNum_ = pieceNum;\n        }\n    }\n    toString() {\n        let pathString = '';\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n            if (this.pieces_[i] !== '') {\n                pathString += '/' + this.pieces_[i];\n            }\n        }\n        return pathString || '/';\n    }\n}\nfunction newEmptyPath() {\n    return new Path('');\n}\nfunction pathGetFront(path) {\n    if (path.pieceNum_ >= path.pieces_.length) {\n        return null;\n    }\n    return path.pieces_[path.pieceNum_];\n}\n/**\n * @returns The number of segments in this path\n */\nfunction pathGetLength(path) {\n    return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n    let pieceNum = path.pieceNum_;\n    if (pieceNum < path.pieces_.length) {\n        pieceNum++;\n    }\n    return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n    if (path.pieceNum_ < path.pieces_.length) {\n        return path.pieces_[path.pieces_.length - 1];\n    }\n    return null;\n}\nfunction pathToUrlEncodedString(path) {\n    let pathString = '';\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n        if (path.pieces_[i] !== '') {\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n        }\n    }\n    return pathString || '/';\n}\n/**\n * Shallow copy of the parts of the path.\n *\n */\nfunction pathSlice(path, begin = 0) {\n    return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n    if (path.pieceNum_ >= path.pieces_.length) {\n        return null;\n    }\n    const pieces = [];\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n        pieces.push(path.pieces_[i]);\n    }\n    return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n    const pieces = [];\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n        pieces.push(path.pieces_[i]);\n    }\n    if (childPathObj instanceof Path) {\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n            pieces.push(childPathObj.pieces_[i]);\n        }\n    }\n    else {\n        const childPieces = childPathObj.split('/');\n        for (let i = 0; i < childPieces.length; i++) {\n            if (childPieces[i].length > 0) {\n                pieces.push(childPieces[i]);\n            }\n        }\n    }\n    return new Path(pieces, 0);\n}\n/**\n * @returns True if there are no segments in this path\n */\nfunction pathIsEmpty(path) {\n    return path.pieceNum_ >= path.pieces_.length;\n}\n/**\n * @returns The path from outerPath to innerPath\n */\nfunction newRelativePath(outerPath, innerPath) {\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\n    if (outer === null) {\n        return innerPath;\n    }\n    else if (outer === inner) {\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n    }\n    else {\n        throw new Error('INTERNAL ERROR: innerPath (' +\n            innerPath +\n            ') is not within ' +\n            'outerPath (' +\n            outerPath +\n            ')');\n    }\n}\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nfunction pathCompare(left, right) {\n    const leftKeys = pathSlice(left, 0);\n    const rightKeys = pathSlice(right, 0);\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n        if (cmp !== 0) {\n            return cmp;\n        }\n    }\n    if (leftKeys.length === rightKeys.length) {\n        return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\n * @returns true if paths are the same.\n */\nfunction pathEquals(path, other) {\n    if (pathGetLength(path) !== pathGetLength(other)) {\n        return false;\n    }\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n        if (path.pieces_[i] !== other.pieces_[j]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nfunction pathContains(path, other) {\n    let i = path.pieceNum_;\n    let j = other.pieceNum_;\n    if (pathGetLength(path) > pathGetLength(other)) {\n        return false;\n    }\n    while (i < path.pieces_.length) {\n        if (path.pieces_[i] !== other.pieces_[j]) {\n            return false;\n        }\n        ++i;\n        ++j;\n    }\n    return true;\n}\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nclass ValidationPath {\n    /**\n     * @param path - Initial Path.\n     * @param errorPrefix_ - Prefix for any error messages.\n     */\n    constructor(path, errorPrefix_) {\n        this.errorPrefix_ = errorPrefix_;\n        this.parts_ = pathSlice(path, 0);\n        /** Initialize to number of '/' chars needed in path. */\n        this.byteLength_ = Math.max(1, this.parts_.length);\n        for (let i = 0; i < this.parts_.length; i++) {\n            this.byteLength_ += stringLength(this.parts_[i]);\n        }\n        validationPathCheckValid(this);\n    }\n}\nfunction validationPathPush(validationPath, child) {\n    // Count the needed '/'\n    if (validationPath.parts_.length > 0) {\n        validationPath.byteLength_ += 1;\n    }\n    validationPath.parts_.push(child);\n    validationPath.byteLength_ += stringLength(child);\n    validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n    const last = validationPath.parts_.pop();\n    validationPath.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (validationPath.parts_.length > 0) {\n        validationPath.byteLength_ -= 1;\n    }\n}\nfunction validationPathCheckValid(validationPath) {\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n        throw new Error(validationPath.errorPrefix_ +\n            'has a key path longer than ' +\n            MAX_PATH_LENGTH_BYTES +\n            ' bytes (' +\n            validationPath.byteLength_ +\n            ').');\n    }\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n        throw new Error(validationPath.errorPrefix_ +\n            'path specified exceeds the maximum depth that can be written (' +\n            MAX_PATH_DEPTH +\n            ') or object contains a cycle ' +\n            validationPathToErrorString(validationPath));\n    }\n}\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nfunction validationPathToErrorString(validationPath) {\n    if (validationPath.parts_.length === 0) {\n        return '';\n    }\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass VisibilityMonitor extends EventEmitter {\n    static getInstance() {\n        return new VisibilityMonitor();\n    }\n    constructor() {\n        super(['visible']);\n        let hidden;\n        let visibilityChange;\n        if (typeof document !== 'undefined' &&\n            typeof document.addEventListener !== 'undefined') {\n            if (typeof document['hidden'] !== 'undefined') {\n                // Opera 12.10 and Firefox 18 and later support\n                visibilityChange = 'visibilitychange';\n                hidden = 'hidden';\n            }\n            else if (typeof document['mozHidden'] !== 'undefined') {\n                visibilityChange = 'mozvisibilitychange';\n                hidden = 'mozHidden';\n            }\n            else if (typeof document['msHidden'] !== 'undefined') {\n                visibilityChange = 'msvisibilitychange';\n                hidden = 'msHidden';\n            }\n            else if (typeof document['webkitHidden'] !== 'undefined') {\n                visibilityChange = 'webkitvisibilitychange';\n                hidden = 'webkitHidden';\n            }\n        }\n        // Initially, we always assume we are visible. This ensures that in browsers\n        // without page visibility support or in cases where we are never visible\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n        // reconnects\n        this.visible_ = true;\n        if (visibilityChange) {\n            document.addEventListener(visibilityChange, () => {\n                const visible = !document[hidden];\n                if (visible !== this.visible_) {\n                    this.visible_ = visible;\n                    this.trigger('visible', visible);\n                }\n            }, false);\n        }\n    }\n    getInitialEvent(eventType) {\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n        return [this.visible_];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nclass PersistentConnection extends ServerActions {\n    /**\n     * @param repoInfo_ - Data about the namespace we are connecting to\n     * @param applicationId_ - The Firebase App ID for this project\n     * @param onDataUpdate_ - A callback for new data from the server\n     */\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n        super();\n        this.repoInfo_ = repoInfo_;\n        this.applicationId_ = applicationId_;\n        this.onDataUpdate_ = onDataUpdate_;\n        this.onConnectStatus_ = onConnectStatus_;\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\n        this.authOverride_ = authOverride_;\n        // Used for diagnostic logging.\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\n        this.log_ = logWrapper('p:' + this.id + ':');\n        this.interruptReasons_ = {};\n        this.listens = new Map();\n        this.outstandingPuts_ = [];\n        this.outstandingGets_ = [];\n        this.outstandingPutCount_ = 0;\n        this.outstandingGetCount_ = 0;\n        this.onDisconnectRequestQueue_ = [];\n        this.connected_ = false;\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n        this.securityDebugCallback_ = null;\n        this.lastSessionId = null;\n        this.establishConnectionTimer_ = null;\n        this.visible_ = false;\n        // Before we get connected, we keep a queue of pending messages to send.\n        this.requestCBHash_ = {};\n        this.requestNumber_ = 0;\n        this.realtime_ = null;\n        this.authToken_ = null;\n        this.appCheckToken_ = null;\n        this.forceTokenRefresh_ = false;\n        this.invalidAuthTokenCount_ = 0;\n        this.invalidAppCheckTokenCount_ = 0;\n        this.firstConnection_ = true;\n        this.lastConnectionAttemptTime_ = null;\n        this.lastConnectionEstablishedTime_ = null;\n        if (authOverride_ && !isNodeSdk()) {\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n        }\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n        }\n    }\n    sendRequest(action, body, onResponse) {\n        const curReqNum = ++this.requestNumber_;\n        const msg = { r: curReqNum, a: action, b: body };\n        this.log_(stringify(msg));\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n        this.realtime_.sendRequest(msg);\n        if (onResponse) {\n            this.requestCBHash_[curReqNum] = onResponse;\n        }\n    }\n    get(query) {\n        this.initConnection_();\n        const deferred = new Deferred();\n        const request = {\n            p: query._path.toString(),\n            q: query._queryObject\n        };\n        const outstandingGet = {\n            action: 'g',\n            request,\n            onComplete: (message) => {\n                const payload = message['d'];\n                if (message['s'] === 'ok') {\n                    deferred.resolve(payload);\n                }\n                else {\n                    deferred.reject(payload);\n                }\n            }\n        };\n        this.outstandingGets_.push(outstandingGet);\n        this.outstandingGetCount_++;\n        const index = this.outstandingGets_.length - 1;\n        if (this.connected_) {\n            this.sendGet_(index);\n        }\n        return deferred.promise;\n    }\n    listen(query, currentHashFn, tag, onComplete) {\n        this.initConnection_();\n        const queryId = query._queryIdentifier;\n        const pathString = query._path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\n        if (!this.listens.has(pathString)) {\n            this.listens.set(pathString, new Map());\n        }\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n        const listenSpec = {\n            onComplete,\n            hashFn: currentHashFn,\n            query,\n            tag\n        };\n        this.listens.get(pathString).set(queryId, listenSpec);\n        if (this.connected_) {\n            this.sendListen_(listenSpec);\n        }\n    }\n    sendGet_(index) {\n        const get = this.outstandingGets_[index];\n        this.sendRequest('g', get.request, (message) => {\n            delete this.outstandingGets_[index];\n            this.outstandingGetCount_--;\n            if (this.outstandingGetCount_ === 0) {\n                this.outstandingGets_ = [];\n            }\n            if (get.onComplete) {\n                get.onComplete(message);\n            }\n        });\n    }\n    sendListen_(listenSpec) {\n        const query = listenSpec.query;\n        const pathString = query._path.toString();\n        const queryId = query._queryIdentifier;\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\n        const req = { /*path*/ p: pathString };\n        const action = 'q';\n        // Only bother to send query if it's non-default.\n        if (listenSpec.tag) {\n            req['q'] = query._queryObject;\n            req['t'] = listenSpec.tag;\n        }\n        req[ /*hash*/'h'] = listenSpec.hashFn();\n        this.sendRequest(action, req, (message) => {\n            const payload = message[ /*data*/'d'];\n            const status = message[ /*status*/'s'];\n            // print warnings in any case...\n            PersistentConnection.warnOnListenWarnings_(payload, query);\n            const currentListenSpec = this.listens.get(pathString) &&\n                this.listens.get(pathString).get(queryId);\n            // only trigger actions if the listen hasn't been removed and readded\n            if (currentListenSpec === listenSpec) {\n                this.log_('listen response', message);\n                if (status !== 'ok') {\n                    this.removeListen_(pathString, queryId);\n                }\n                if (listenSpec.onComplete) {\n                    listenSpec.onComplete(status, payload);\n                }\n            }\n        });\n    }\n    static warnOnListenWarnings_(payload, query) {\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const warnings = safeGet(payload, 'w');\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n                const indexPath = query._path.toString();\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\n                    `${indexPath} to your security rules for better performance.`);\n            }\n        }\n    }\n    refreshAuthToken(token) {\n        this.authToken_ = token;\n        this.log_('Auth token refreshed');\n        if (this.authToken_) {\n            this.tryAuth();\n        }\n        else {\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n            //the credential so we dont become authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unauth', {}, () => { });\n            }\n        }\n        this.reduceReconnectDelayIfAdminCredential_(token);\n    }\n    reduceReconnectDelayIfAdminCredential_(credential) {\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n        const isFirebaseSecret = credential && credential.length === 40;\n        if (isFirebaseSecret || isAdmin(credential)) {\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        }\n    }\n    refreshAppCheckToken(token) {\n        this.appCheckToken_ = token;\n        this.log_('App check token refreshed');\n        if (this.appCheckToken_) {\n            this.tryAppCheck();\n        }\n        else {\n            //If we're connected we want to let the server know to unauthenticate us.\n            //If we're not connected, simply delete the credential so we dont become\n            // authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unappeck', {}, () => { });\n            }\n        }\n    }\n    /**\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n     * a auth revoked (the connection is closed).\n     */\n    tryAuth() {\n        if (this.connected_ && this.authToken_) {\n            const token = this.authToken_;\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n            const requestData = { cred: token };\n            if (this.authOverride_ === null) {\n                requestData['noauth'] = true;\n            }\n            else if (typeof this.authOverride_ === 'object') {\n                requestData['authvar'] = this.authOverride_;\n            }\n            this.sendRequest(authMethod, requestData, (res) => {\n                const status = res[ /*status*/'s'];\n                const data = res[ /*data*/'d'] || 'error';\n                if (this.authToken_ === token) {\n                    if (status === 'ok') {\n                        this.invalidAuthTokenCount_ = 0;\n                    }\n                    else {\n                        // Triggers reconnect and force refresh for auth token\n                        this.onAuthRevoked_(status, data);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Attempts to authenticate with the given token. If the authentication\n     * attempt fails, it's triggered like the token was revoked (the connection is\n     * closed).\n     */\n    tryAppCheck() {\n        if (this.connected_ && this.appCheckToken_) {\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\n                const status = res[ /*status*/'s'];\n                const data = res[ /*data*/'d'] || 'error';\n                if (status === 'ok') {\n                    this.invalidAppCheckTokenCount_ = 0;\n                }\n                else {\n                    this.onAppCheckRevoked_(status, data);\n                }\n            });\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    unlisten(query, tag) {\n        const pathString = query._path.toString();\n        const queryId = query._queryIdentifier;\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n        const listen = this.removeListen_(pathString, queryId);\n        if (listen && this.connected_) {\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n        }\n    }\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n        const req = { /*path*/ p: pathString };\n        const action = 'n';\n        // Only bother sending queryId if it's non-default.\n        if (tag) {\n            req['q'] = queryObj;\n            req['t'] = tag;\n        }\n        this.sendRequest(action, req);\n    }\n    onDisconnectPut(pathString, data, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'o',\n                data,\n                onComplete\n            });\n        }\n    }\n    onDisconnectMerge(pathString, data, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'om',\n                data,\n                onComplete\n            });\n        }\n    }\n    onDisconnectCancel(pathString, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'oc',\n                data: null,\n                onComplete\n            });\n        }\n    }\n    sendOnDisconnect_(action, pathString, data, onComplete) {\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\n        this.log_('onDisconnect ' + action, request);\n        this.sendRequest(action, request, (response) => {\n            if (onComplete) {\n                setTimeout(() => {\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\n                }, Math.floor(0));\n            }\n        });\n    }\n    put(pathString, data, onComplete, hash) {\n        this.putInternal('p', pathString, data, onComplete, hash);\n    }\n    merge(pathString, data, onComplete, hash) {\n        this.putInternal('m', pathString, data, onComplete, hash);\n    }\n    putInternal(action, pathString, data, onComplete, hash) {\n        this.initConnection_();\n        const request = {\n            /*path*/ p: pathString,\n            /*data*/ d: data\n        };\n        if (hash !== undefined) {\n            request[ /*hash*/'h'] = hash;\n        }\n        // TODO: Only keep track of the most recent put for a given path?\n        this.outstandingPuts_.push({\n            action,\n            request,\n            onComplete\n        });\n        this.outstandingPutCount_++;\n        const index = this.outstandingPuts_.length - 1;\n        if (this.connected_) {\n            this.sendPut_(index);\n        }\n        else {\n            this.log_('Buffering put: ' + pathString);\n        }\n    }\n    sendPut_(index) {\n        const action = this.outstandingPuts_[index].action;\n        const request = this.outstandingPuts_[index].request;\n        const onComplete = this.outstandingPuts_[index].onComplete;\n        this.outstandingPuts_[index].queued = this.connected_;\n        this.sendRequest(action, request, (message) => {\n            this.log_(action + ' response', message);\n            delete this.outstandingPuts_[index];\n            this.outstandingPutCount_--;\n            // Clean up array occasionally.\n            if (this.outstandingPutCount_ === 0) {\n                this.outstandingPuts_ = [];\n            }\n            if (onComplete) {\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\n            }\n        });\n    }\n    reportStats(stats) {\n        // If we're not connected, we just drop the stats.\n        if (this.connected_) {\n            const request = { /*counters*/ c: stats };\n            this.log_('reportStats', request);\n            this.sendRequest(/*stats*/ 's', request, result => {\n                const status = result[ /*status*/'s'];\n                if (status !== 'ok') {\n                    const errorReason = result[ /* data */'d'];\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\n                }\n            });\n        }\n    }\n    onDataMessage_(message) {\n        if ('r' in message) {\n            // this is a response\n            this.log_('from server: ' + stringify(message));\n            const reqNum = message['r'];\n            const onResponse = this.requestCBHash_[reqNum];\n            if (onResponse) {\n                delete this.requestCBHash_[reqNum];\n                onResponse(message[ /*body*/'b']);\n            }\n        }\n        else if ('error' in message) {\n            throw 'A server-side error has occurred: ' + message['error'];\n        }\n        else if ('a' in message) {\n            // a and b are action and body, respectively\n            this.onDataPush_(message['a'], message['b']);\n        }\n    }\n    onDataPush_(action, body) {\n        this.log_('handleServerMessage', action, body);\n        if (action === 'd') {\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \n            /*isMerge*/ false, body['t']);\n        }\n        else if (action === 'm') {\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \n            /*isMerge=*/ true, body['t']);\n        }\n        else if (action === 'c') {\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\n        }\n        else if (action === 'ac') {\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\n        }\n        else if (action === 'apc') {\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\n        }\n        else if (action === 'sd') {\n            this.onSecurityDebugPacket_(body);\n        }\n        else {\n            error('Unrecognized action received from server: ' +\n                stringify(action) +\n                '\\nAre you using the latest client?');\n        }\n    }\n    onReady_(timestamp, sessionId) {\n        this.log_('connection ready');\n        this.connected_ = true;\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\n        this.handleTimestamp_(timestamp);\n        this.lastSessionId = sessionId;\n        if (this.firstConnection_) {\n            this.sendConnectStats_();\n        }\n        this.restoreState_();\n        this.firstConnection_ = false;\n        this.onConnectStatus_(true);\n    }\n    scheduleConnect_(timeout) {\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n        if (this.establishConnectionTimer_) {\n            clearTimeout(this.establishConnectionTimer_);\n        }\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n        this.establishConnectionTimer_ = setTimeout(() => {\n            this.establishConnectionTimer_ = null;\n            this.establishConnection_();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(timeout));\n    }\n    initConnection_() {\n        if (!this.realtime_ && this.firstConnection_) {\n            this.scheduleConnect_(0);\n        }\n    }\n    onVisible_(visible) {\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n        if (visible &&\n            !this.visible_ &&\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\n            this.log_('Window became visible.  Reducing delay.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        this.visible_ = visible;\n    }\n    onOnline_(online) {\n        if (online) {\n            this.log_('Browser went online.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        else {\n            this.log_('Browser went offline.  Killing connection.');\n            if (this.realtime_) {\n                this.realtime_.close();\n            }\n        }\n    }\n    onRealtimeDisconnect_() {\n        this.log_('data client disconnected');\n        this.connected_ = false;\n        this.realtime_ = null;\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n        this.cancelSentTransactions_();\n        // Clear out the pending requests.\n        this.requestCBHash_ = {};\n        if (this.shouldReconnect_()) {\n            if (!this.visible_) {\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\n                this.reconnectDelay_ = this.maxReconnectDelay_;\n                this.lastConnectionAttemptTime_ = new Date().getTime();\n            }\n            else if (this.lastConnectionEstablishedTime_) {\n                // If we've been connected long enough, reset reconnect delay to minimum.\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n                }\n                this.lastConnectionEstablishedTime_ = null;\n            }\n            const timeSinceLastConnectAttempt = Math.max(0, new Date().getTime() - this.lastConnectionAttemptTime_);\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n            reconnectDelay = Math.random() * reconnectDelay;\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n            this.scheduleConnect_(reconnectDelay);\n            // Adjust reconnect delay for next time.\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n        }\n        this.onConnectStatus_(false);\n    }\n    async establishConnection_() {\n        if (this.shouldReconnect_()) {\n            this.log_('Making a connection attempt');\n            this.lastConnectionAttemptTime_ = new Date().getTime();\n            this.lastConnectionEstablishedTime_ = null;\n            const onDataMessage = this.onDataMessage_.bind(this);\n            const onReady = this.onReady_.bind(this);\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n            const lastSessionId = this.lastSessionId;\n            let canceled = false;\n            let connection = null;\n            const closeFn = function () {\n                if (connection) {\n                    connection.close();\n                }\n                else {\n                    canceled = true;\n                    onDisconnect();\n                }\n            };\n            const sendRequestFn = function (msg) {\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\n                connection.sendRequest(msg);\n            };\n            this.realtime_ = {\n                close: closeFn,\n                sendRequest: sendRequestFn\n            };\n            const forceRefresh = this.forceTokenRefresh_;\n            this.forceTokenRefresh_ = false;\n            try {\n                // First fetch auth and app check token, and establish connection after\n                // fetching the token was successful\n                const [authToken, appCheckToken] = await Promise.all([\n                    this.authTokenProvider_.getToken(forceRefresh),\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\n                ]);\n                if (!canceled) {\n                    log('getToken() completed. Creating connection.');\n                    this.authToken_ = authToken && authToken.accessToken;\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \n                    /* onKill= */ reason => {\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n                    }, lastSessionId);\n                }\n                else {\n                    log('getToken() completed but was canceled');\n                }\n            }\n            catch (error) {\n                this.log_('Failed to get token: ' + error);\n                if (!canceled) {\n                    if (this.repoInfo_.nodeAdmin) {\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\n                        // But getToken() may also just have temporarily failed, so we still want to\n                        // continue retrying.\n                        warn(error);\n                    }\n                    closeFn();\n                }\n            }\n        }\n    }\n    interrupt(reason) {\n        log('Interrupting connection for reason: ' + reason);\n        this.interruptReasons_[reason] = true;\n        if (this.realtime_) {\n            this.realtime_.close();\n        }\n        else {\n            if (this.establishConnectionTimer_) {\n                clearTimeout(this.establishConnectionTimer_);\n                this.establishConnectionTimer_ = null;\n            }\n            if (this.connected_) {\n                this.onRealtimeDisconnect_();\n            }\n        }\n    }\n    resume(reason) {\n        log('Resuming connection for reason: ' + reason);\n        delete this.interruptReasons_[reason];\n        if (isEmpty(this.interruptReasons_)) {\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n    }\n    handleTimestamp_(timestamp) {\n        const delta = timestamp - new Date().getTime();\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\n    }\n    cancelSentTransactions_() {\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\n            const put = this.outstandingPuts_[i];\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\n                if (put.onComplete) {\n                    put.onComplete('disconnect');\n                }\n                delete this.outstandingPuts_[i];\n                this.outstandingPutCount_--;\n            }\n        }\n        // Clean up array occasionally.\n        if (this.outstandingPutCount_ === 0) {\n            this.outstandingPuts_ = [];\n        }\n    }\n    onListenRevoked_(pathString, query) {\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n        let queryId;\n        if (!query) {\n            queryId = 'default';\n        }\n        else {\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n        }\n        const listen = this.removeListen_(pathString, queryId);\n        if (listen && listen.onComplete) {\n            listen.onComplete('permission_denied');\n        }\n    }\n    removeListen_(pathString, queryId) {\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\n        let listen;\n        if (this.listens.has(normalizedPathString)) {\n            const map = this.listens.get(normalizedPathString);\n            listen = map.get(queryId);\n            map.delete(queryId);\n            if (map.size === 0) {\n                this.listens.delete(normalizedPathString);\n            }\n        }\n        else {\n            // all listens for this path has already been removed\n            listen = undefined;\n        }\n        return listen;\n    }\n    onAuthRevoked_(statusCode, explanation) {\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\n        this.authToken_ = null;\n        this.forceTokenRefresh_ = true;\n        this.realtime_.close();\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAuthTokenCount_++;\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n                // Set a long reconnect delay because recovery is unlikely\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n                // Notify the auth token provider that the token is invalid, which will log\n                // a warning\n                this.authTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    }\n    onAppCheckRevoked_(statusCode, explanation) {\n        log('App check token revoked: ' + statusCode + '/' + explanation);\n        this.appCheckToken_ = null;\n        this.forceTokenRefresh_ = true;\n        // Note: We don't close the connection as the developer may not have\n        // enforcement enabled. The backend closes connections with enforcements.\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAppCheckTokenCount_++;\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n                this.appCheckTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    }\n    onSecurityDebugPacket_(body) {\n        if (this.securityDebugCallback_) {\n            this.securityDebugCallback_(body);\n        }\n        else {\n            if ('msg' in body) {\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n            }\n        }\n    }\n    restoreState_() {\n        //Re-authenticate ourselves if we have a credential stored.\n        this.tryAuth();\n        this.tryAppCheck();\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\n        // make sure to send listens before puts.\n        for (const queries of this.listens.values()) {\n            for (const listenSpec of queries.values()) {\n                this.sendListen_(listenSpec);\n            }\n        }\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\n            if (this.outstandingPuts_[i]) {\n                this.sendPut_(i);\n            }\n        }\n        while (this.onDisconnectRequestQueue_.length) {\n            const request = this.onDisconnectRequestQueue_.shift();\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n        }\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\n            if (this.outstandingGets_[i]) {\n                this.sendGet_(i);\n            }\n        }\n    }\n    /**\n     * Sends client stats for first connection\n     */\n    sendConnectStats_() {\n        const stats = {};\n        let clientName = 'js';\n        if (isNodeSdk()) {\n            if (this.repoInfo_.nodeAdmin) {\n                clientName = 'admin_node';\n            }\n            else {\n                clientName = 'node';\n            }\n        }\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n        if (isMobileCordova()) {\n            stats['framework.cordova'] = 1;\n        }\n        else if (isReactNative()) {\n            stats['framework.reactnative'] = 1;\n        }\n        this.reportStats(stats);\n    }\n    shouldReconnect_() {\n        const online = OnlineMonitor.getInstance().currentlyOnline();\n        return isEmpty(this.interruptReasons_) && online;\n    }\n}\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\n * Counter for number of connections created. Mainly used for tagging in the logs\n */\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass NamedNode {\n    constructor(name, node) {\n        this.name = name;\n        this.node = node;\n    }\n    static Wrap(name, node) {\n        return new NamedNode(name, node);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Index {\n    /**\n     * @returns A standalone comparison function for\n     * this index\n     */\n    getCompare() {\n        return this.compare.bind(this);\n    }\n    /**\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n     *\n     *\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n     */\n    indexedValueChanged(oldNode, newNode) {\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\n        return this.compare(oldWrapped, newWrapped) !== 0;\n    }\n    /**\n     * @returns a node wrapper that will sort equal to or less than\n     * any other node wrapper, using this index\n     */\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __EMPTY_NODE;\nclass KeyIndex extends Index {\n    static get __EMPTY_NODE() {\n        return __EMPTY_NODE;\n    }\n    static set __EMPTY_NODE(val) {\n        __EMPTY_NODE = val;\n    }\n    compare(a, b) {\n        return nameCompare(a.name, b.name);\n    }\n    isDefinedOn(node) {\n        // We could probably return true here (since every node has a key), but it's never called\n        // so just leaving unimplemented for now.\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return false; // The key for a node never changes.\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        // TODO: This should really be created once and cached in a static property, but\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\n    }\n    makePost(indexValue, name) {\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n        return new NamedNode(indexValue, __EMPTY_NODE);\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.key';\n    }\n}\nconst KEY_INDEX = new KeyIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An iterator over an LLRBNode.\n */\nclass SortedMapIterator {\n    /**\n     * @param node - Node to iterate.\n     * @param isReverse_ - Whether or not to iterate in reverse\n     */\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\n        this.isReverse_ = isReverse_;\n        this.resultGenerator_ = resultGenerator_;\n        this.nodeStack_ = [];\n        let cmp = 1;\n        while (!node.isEmpty()) {\n            node = node;\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse_) {\n                cmp *= -1;\n            }\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse_) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n                this.nodeStack_.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move to the next one\n                this.nodeStack_.push(node);\n                if (this.isReverse_) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    getNext() {\n        if (this.nodeStack_.length === 0) {\n            return null;\n        }\n        let node = this.nodeStack_.pop();\n        let result;\n        if (this.resultGenerator_) {\n            result = this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            result = { key: node.key, value: node.value };\n        }\n        if (this.isReverse_) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    }\n    hasNext() {\n        return this.nodeStack_.length > 0;\n    }\n    peek() {\n        if (this.nodeStack_.length === 0) {\n            return null;\n        }\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\n        if (this.resultGenerator_) {\n            return this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    }\n}\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nclass LLRBNode {\n    /**\n     * @param key - Key associated with this node.\n     * @param value - Value associated with this node.\n     * @param color - Whether this node is red.\n     * @param left - Left child.\n     * @param right - Right child.\n     */\n    constructor(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left =\n            left != null ? left : SortedMap.EMPTY_NODE;\n        this.right =\n            right != null ? right : SortedMap.EMPTY_NODE;\n    }\n    /**\n     * Returns a copy of the current node, optionally replacing pieces of it.\n     *\n     * @param key - New key for the node, or null.\n     * @param value - New value for the node, or null.\n     * @param color - New color for the node, or null.\n     * @param left - New left child for the node, or null.\n     * @param right - New right child for the node, or null.\n     * @returns The node copy.\n     */\n    copy(key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    }\n    /**\n     * @returns The total number of nodes in the tree.\n     */\n    count() {\n        return this.left.count() + 1 + this.right.count();\n    }\n    /**\n     * @returns True if the tree is empty.\n     */\n    isEmpty() {\n        return false;\n    }\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     *   node.  If it returns true, traversal is aborted.\n     * @returns The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    inorderTraversal(action) {\n        return (this.left.inorderTraversal(action) ||\n            !!action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    }\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    }\n    /**\n     * @returns The minimum node in the tree.\n     */\n    min_() {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min_();\n        }\n    }\n    /**\n     * @returns The maximum key in the tree.\n     */\n    minKey() {\n        return this.min_().key;\n    }\n    /**\n     * @returns The maximum key in the tree.\n     */\n    maxKey() {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    }\n    /**\n     * @param key - Key to insert.\n     * @param value - Value to insert.\n     * @param comparator - Comparator.\n     * @returns New tree, with the key/value added.\n     */\n    insert(key, value, comparator) {\n        let n = this;\n        const cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp_();\n    }\n    /**\n     * @returns New tree, with the minimum key removed.\n     */\n    removeMin_() {\n        if (this.left.isEmpty()) {\n            return SortedMap.EMPTY_NODE;\n        }\n        let n = this;\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\n            n = n.moveRedLeft_();\n        }\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\n        return n.fixUp_();\n    }\n    /**\n     * @param key - The key of the item to remove.\n     * @param comparator - Comparator.\n     * @returns New tree, with the specified item removed.\n     */\n    remove(key, comparator) {\n        let n, smallest;\n        n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n                n = n.moveRedLeft_();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed_()) {\n                n = n.rotateRight_();\n            }\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n                n = n.moveRedRight_();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return SortedMap.EMPTY_NODE;\n                }\n                else {\n                    smallest = n.right.min_();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp_();\n    }\n    /**\n     * @returns Whether this is a RED node.\n     */\n    isRed_() {\n        return this.color;\n    }\n    /**\n     * @returns New tree after performing any needed rotations.\n     */\n    fixUp_() {\n        let n = this;\n        if (n.right.isRed_() && !n.left.isRed_()) {\n            n = n.rotateLeft_();\n        }\n        if (n.left.isRed_() && n.left.left.isRed_()) {\n            n = n.rotateRight_();\n        }\n        if (n.left.isRed_() && n.right.isRed_()) {\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after moveRedLeft.\n     */\n    moveRedLeft_() {\n        let n = this.colorFlip_();\n        if (n.right.left.isRed_()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\n            n = n.rotateLeft_();\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after moveRedRight.\n     */\n    moveRedRight_() {\n        let n = this.colorFlip_();\n        if (n.left.left.isRed_()) {\n            n = n.rotateRight_();\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after rotateLeft.\n     */\n    rotateLeft_() {\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    }\n    /**\n     * @returns New tree, after rotateRight.\n     */\n    rotateRight_() {\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    }\n    /**\n     * @returns Newt ree, after colorFlip.\n     */\n    colorFlip_() {\n        const left = this.left.copy(null, null, !this.left.color, null, null);\n        const right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    }\n    /**\n     * For testing.\n     *\n     * @returns True if all is well.\n     */\n    checkMaxDepth_() {\n        const blackDepth = this.check_();\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\n    }\n    check_() {\n        if (this.isRed_() && this.left.isRed_()) {\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed_()) {\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        const blackDepth = this.left.check_();\n        if (blackDepth !== this.right.check_()) {\n            throw new Error('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed_() ? 0 : 1);\n        }\n    }\n}\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nclass LLRBEmptyNode {\n    /**\n     * Returns a copy of the current node.\n     *\n     * @returns The node copy.\n     */\n    copy(key, value, color, left, right) {\n        return this;\n    }\n    /**\n     * Returns a copy of the tree, with the specified key/value added.\n     *\n     * @param key - Key to be added.\n     * @param value - Value to be added.\n     * @param comparator - Comparator.\n     * @returns New tree, with item added.\n     */\n    insert(key, value, comparator) {\n        return new LLRBNode(key, value, null);\n    }\n    /**\n     * Returns a copy of the tree, with the specified key removed.\n     *\n     * @param key - The key to remove.\n     * @param comparator - Comparator.\n     * @returns New tree, with item removed.\n     */\n    remove(key, comparator) {\n        return this;\n    }\n    /**\n     * @returns The total number of nodes in the tree.\n     */\n    count() {\n        return 0;\n    }\n    /**\n     * @returns True if the tree is empty.\n     */\n    isEmpty() {\n        return true;\n    }\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    inorderTraversal(action) {\n        return false;\n    }\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return false;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    check_() {\n        return 0;\n    }\n    /**\n     * @returns Whether this node is red.\n     */\n    isRed_() {\n        return false;\n    }\n}\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nclass SortedMap {\n    /**\n     * @param comparator_ - Key comparator.\n     * @param root_ - Optional root node for the map.\n     */\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\n        this.comparator_ = comparator_;\n        this.root_ = root_;\n    }\n    /**\n     * Returns a copy of the map, with the specified key/value added or replaced.\n     * (TODO: We should perhaps rename this method to 'put')\n     *\n     * @param key - Key to be added.\n     * @param value - Value to be added.\n     * @returns New map, with item added.\n     */\n    insert(key, value) {\n        return new SortedMap(this.comparator_, this.root_\n            .insert(key, value, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\n     * Returns a copy of the map, with the specified key removed.\n     *\n     * @param key - The key to remove.\n     * @returns New map, with item removed.\n     */\n    remove(key) {\n        return new SortedMap(this.comparator_, this.root_\n            .remove(key, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\n     * Returns the value of the node with the given key, or null.\n     *\n     * @param key - The key to look up.\n     * @returns The value of the node with the given key, or null if the\n     * key doesn't exist.\n     */\n    get(key) {\n        let cmp;\n        let node = this.root_;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\n     * @param key - The key to find the predecessor of\n     * @returns The predecessor key.\n     */\n    getPredecessorKey(key) {\n        let cmp, node = this.root_, rightParent = null;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty()) {\n                        node = node.right;\n                    }\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n    }\n    /**\n     * @returns True if the map is empty.\n     */\n    isEmpty() {\n        return this.root_.isEmpty();\n    }\n    /**\n     * @returns The total number of nodes in the map.\n     */\n    count() {\n        return this.root_.count();\n    }\n    /**\n     * @returns The minimum key in the map.\n     */\n    minKey() {\n        return this.root_.minKey();\n    }\n    /**\n     * @returns The maximum key in the map.\n     */\n    maxKey() {\n        return this.root_.maxKey();\n    }\n    /**\n     * Traverses the map in key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param action - Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @returns The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    inorderTraversal(action) {\n        return this.root_.inorderTraversal(action);\n    }\n    /**\n     * Traverses the map in reverse key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param action - Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @returns True if the traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return this.root_.reverseTraversal(action);\n    }\n    /**\n     * Returns an iterator over the SortedMap.\n     * @returns The iterator.\n     */\n    getIterator(resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n    }\n    getIteratorFrom(key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n    }\n    getReverseIteratorFrom(key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n    }\n    getReverseIterator(resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n    }\n}\n/**\n * Always use the same empty node, to reduce memory.\n */\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n    return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n    return nameCompare(left, right);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet MAX_NODE$2;\nfunction setMaxNode$1(val) {\n    MAX_NODE$2 = val;\n}\nconst priorityHashText = function (priority) {\n    if (typeof priority === 'number') {\n        return 'number:' + doubleToIEEE754String(priority);\n    }\n    else {\n        return 'string:' + priority;\n    }\n};\n/**\n * Validates that a priority snapshot Node is valid.\n */\nconst validatePriorityNode = function (priorityNode) {\n    if (priorityNode.isLeafNode()) {\n        const val = priorityNode.val();\n        assert(typeof val === 'string' ||\n            typeof val === 'number' ||\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\n    }\n    else {\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n    }\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __childrenNodeConstructor;\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nclass LeafNode {\n    static set __childrenNodeConstructor(val) {\n        __childrenNodeConstructor = val;\n    }\n    static get __childrenNodeConstructor() {\n        return __childrenNodeConstructor;\n    }\n    /**\n     * @param value_ - The value to store in this leaf node. The object type is\n     * possible in the event of a deferred value\n     * @param priorityNode_ - The priority of this node.\n     */\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n        this.value_ = value_;\n        this.priorityNode_ = priorityNode_;\n        this.lazyHash_ = null;\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n        validatePriorityNode(this.priorityNode_);\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n        return true;\n    }\n    /** @inheritDoc */\n    getPriority() {\n        return this.priorityNode_;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n        return new LeafNode(this.value_, newPriorityNode);\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n        if (pathIsEmpty(path)) {\n            return this;\n        }\n        else if (pathGetFront(path) === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    }\n    hasChild() {\n        return false;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode) {\n        return null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\n            return this;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n        }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return newChildNode;\n        }\n        else if (newChildNode.isEmpty() && front !== '.priority') {\n            return this;\n        }\n        else {\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n        }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n        return false;\n    }\n    /** @inheritDoc */\n    numChildren() {\n        return 0;\n    }\n    /** @inheritDoc */\n    forEachChild(index, action) {\n        return false;\n    }\n    val(exportFormat) {\n        if (exportFormat && !this.getPriority().isEmpty()) {\n            return {\n                '.value': this.getValue(),\n                '.priority': this.getPriority().val()\n            };\n        }\n        else {\n            return this.getValue();\n        }\n    }\n    /** @inheritDoc */\n    hash() {\n        if (this.lazyHash_ === null) {\n            let toHash = '';\n            if (!this.priorityNode_.isEmpty()) {\n                toHash +=\n                    'priority:' +\n                        priorityHashText(this.priorityNode_.val()) +\n                        ':';\n            }\n            const type = typeof this.value_;\n            toHash += type + ':';\n            if (type === 'number') {\n                toHash += doubleToIEEE754String(this.value_);\n            }\n            else {\n                toHash += this.value_;\n            }\n            this.lazyHash_ = sha1(toHash);\n        }\n        return this.lazyHash_;\n    }\n    /**\n     * Returns the value of the leaf node.\n     * @returns The value of the node.\n     */\n    getValue() {\n        return this.value_;\n    }\n    compareTo(other) {\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n            return 1;\n        }\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\n            return -1;\n        }\n        else {\n            assert(other.isLeafNode(), 'Unknown node type');\n            return this.compareToLeafNode_(other);\n        }\n    }\n    /**\n     * Comparison specifically for two leaf nodes\n     */\n    compareToLeafNode_(otherLeaf) {\n        const otherLeafType = typeof otherLeaf.value_;\n        const thisLeafType = typeof this.value_;\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n        if (otherIndex === thisIndex) {\n            // Same type, compare values\n            if (thisLeafType === 'object') {\n                // Deferred value nodes are all equal, but we should also never get to this point...\n                return 0;\n            }\n            else {\n                // Note that this works because true > false, all others are number or string comparisons\n                if (this.value_ < otherLeaf.value_) {\n                    return -1;\n                }\n                else if (this.value_ === otherLeaf.value_) {\n                    return 0;\n                }\n                else {\n                    return 1;\n                }\n            }\n        }\n        else {\n            return thisIndex - otherIndex;\n        }\n    }\n    withIndex() {\n        return this;\n    }\n    isIndexed() {\n        return true;\n    }\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            const otherLeaf = other;\n            return (this.value_ === otherLeaf.value_ &&\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\n        }\n        else {\n            return false;\n        }\n    }\n}\n/**\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n * the same type, the comparison falls back to their value\n */\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n    nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n    MAX_NODE$1 = val;\n}\nclass PriorityIndex extends Index {\n    compare(a, b) {\n        const aPriority = a.node.getPriority();\n        const bPriority = b.node.getPriority();\n        const indexCmp = aPriority.compareTo(bPriority);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    isDefinedOn(node) {\n        return !node.getPriority().isEmpty();\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return !oldNode.getPriority().equals(newNode.getPriority());\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n    }\n    makePost(indexValue, name) {\n        const priorityNode = nodeFromJSON$1(indexValue);\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.priority';\n    }\n}\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_2 = Math.log(2);\nclass Base12Num {\n    constructor(length) {\n        const logBase2 = (num) => \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        parseInt((Math.log(num) / LOG_2), 10);\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\n        this.count = logBase2(length + 1);\n        this.current_ = this.count - 1;\n        const mask = bitMask(this.count);\n        this.bits_ = (length + 1) & mask;\n    }\n    nextBitIsOne() {\n        //noinspection JSBitwiseOperatorUsage\n        const result = !(this.bits_ & (0x1 << this.current_));\n        this.current_--;\n        return result;\n    }\n}\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n    childList.sort(cmp);\n    const buildBalancedTree = function (low, high) {\n        const length = high - low;\n        let namedNode;\n        let key;\n        if (length === 0) {\n            return null;\n        }\n        else if (length === 1) {\n            namedNode = childList[low];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const middle = parseInt((length / 2), 10) + low;\n            const left = buildBalancedTree(low, middle);\n            const right = buildBalancedTree(middle + 1, high);\n            namedNode = childList[middle];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n        }\n    };\n    const buildFrom12Array = function (base12) {\n        let node = null;\n        let root = null;\n        let index = childList.length;\n        const buildPennant = function (chunkSize, color) {\n            const low = index - chunkSize;\n            const high = index;\n            index -= chunkSize;\n            const childTree = buildBalancedTree(low + 1, high);\n            const namedNode = childList[low];\n            const key = keyFn ? keyFn(namedNode) : namedNode;\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n        };\n        const attachPennant = function (pennant) {\n            if (node) {\n                node.left = pennant;\n                node = pennant;\n            }\n            else {\n                root = pennant;\n                node = pennant;\n            }\n        };\n        for (let i = 0; i < base12.count; ++i) {\n            const isOne = base12.nextBitIsOne();\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\n            if (isOne) {\n                buildPennant(chunkSize, LLRBNode.BLACK);\n            }\n            else {\n                // current == 2\n                buildPennant(chunkSize, LLRBNode.BLACK);\n                buildPennant(chunkSize, LLRBNode.RED);\n            }\n        }\n        return root;\n    };\n    const base12 = new Base12Num(childList.length);\n    const root = buildFrom12Array(base12);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet _defaultIndexMap;\nconst fallbackObject = {};\nclass IndexMap {\n    /**\n     * The default IndexMap for nodes without a priority\n     */\n    static get Default() {\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n        _defaultIndexMap =\n            _defaultIndexMap ||\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\n        return _defaultIndexMap;\n    }\n    constructor(indexes_, indexSet_) {\n        this.indexes_ = indexes_;\n        this.indexSet_ = indexSet_;\n    }\n    get(indexKey) {\n        const sortedMap = safeGet(this.indexes_, indexKey);\n        if (!sortedMap) {\n            throw new Error('No index defined for ' + indexKey);\n        }\n        if (sortedMap instanceof SortedMap) {\n            return sortedMap;\n        }\n        else {\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n            // regular child map\n            return null;\n        }\n    }\n    hasIndex(indexDefinition) {\n        return contains(this.indexSet_, indexDefinition.toString());\n    }\n    addIndex(indexDefinition, existingChildren) {\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n        const childList = [];\n        let sawIndexedValue = false;\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\n        let next = iter.getNext();\n        while (next) {\n            sawIndexedValue =\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n            childList.push(next);\n            next = iter.getNext();\n        }\n        let newIndex;\n        if (sawIndexedValue) {\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\n        }\n        else {\n            newIndex = fallbackObject;\n        }\n        const indexName = indexDefinition.toString();\n        const newIndexSet = { ...this.indexSet_ };\n        newIndexSet[indexName] = indexDefinition;\n        const newIndexes = { ...this.indexes_ };\n        newIndexes[indexName] = newIndex;\n        return new IndexMap(newIndexes, newIndexSet);\n    }\n    /**\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\n     */\n    addToIndexes(namedNode, existingChildren) {\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n            const index = safeGet(this.indexSet_, indexName);\n            assert(index, 'Missing index implementation for ' + indexName);\n            if (indexedChildren === fallbackObject) {\n                // Check to see if we need to index everything\n                if (index.isDefinedOn(namedNode.node)) {\n                    // We need to build this index\n                    const childList = [];\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\n                    let next = iter.getNext();\n                    while (next) {\n                        if (next.name !== namedNode.name) {\n                            childList.push(next);\n                        }\n                        next = iter.getNext();\n                    }\n                    childList.push(namedNode);\n                    return buildChildSet(childList, index.getCompare());\n                }\n                else {\n                    // No change, this remains a fallback\n                    return fallbackObject;\n                }\n            }\n            else {\n                const existingSnap = existingChildren.get(namedNode.name);\n                let newChildren = indexedChildren;\n                if (existingSnap) {\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                }\n                return newChildren.insert(namedNode, namedNode.node);\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    }\n    /**\n     * Create a new IndexMap instance with the given value removed\n     */\n    removeFromIndexes(namedNode, existingChildren) {\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\n            if (indexedChildren === fallbackObject) {\n                // This is the fallback. Just return it, nothing to do in this case\n                return indexedChildren;\n            }\n            else {\n                const existingSnap = existingChildren.get(namedNode.name);\n                if (existingSnap) {\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                }\n                else {\n                    // No record of this child\n                    return indexedChildren;\n                }\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nclass ChildrenNode {\n    static get EMPTY_NODE() {\n        return (EMPTY_NODE ||\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\n    }\n    /**\n     * @param children_ - List of children of this node..\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\n     */\n    constructor(children_, priorityNode_, indexMap_) {\n        this.children_ = children_;\n        this.priorityNode_ = priorityNode_;\n        this.indexMap_ = indexMap_;\n        this.lazyHash_ = null;\n        /**\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n         * class instead of an empty ChildrenNode.\n         */\n        if (this.priorityNode_) {\n            validatePriorityNode(this.priorityNode_);\n        }\n        if (this.children_.isEmpty()) {\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n        }\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n        return false;\n    }\n    /** @inheritDoc */\n    getPriority() {\n        return this.priorityNode_ || EMPTY_NODE;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n        if (this.children_.isEmpty()) {\n            // Don't allow priorities on empty nodes\n            return this;\n        }\n        else {\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n        }\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.getPriority();\n        }\n        else {\n            const child = this.children_.get(childName);\n            return child === null ? EMPTY_NODE : child;\n        }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return this;\n        }\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\n    }\n    /** @inheritDoc */\n    hasChild(childName) {\n        return this.children_.get(childName) !== null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n        assert(newChildNode, 'We should always be passing snapshot nodes');\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else {\n            const namedNode = new NamedNode(childName, newChildNode);\n            let newChildren, newIndexMap;\n            if (newChildNode.isEmpty()) {\n                newChildren = this.children_.remove(childName);\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n            }\n            else {\n                newChildren = this.children_.insert(childName, newChildNode);\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n            }\n            const newPriority = newChildren.isEmpty()\n                ? EMPTY_NODE\n                : this.priorityNode_;\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\n        }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return newChildNode;\n        }\n        else {\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n            return this.updateImmediateChild(front, newImmediateChild);\n        }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n        return this.children_.isEmpty();\n    }\n    /** @inheritDoc */\n    numChildren() {\n        return this.children_.count();\n    }\n    /** @inheritDoc */\n    val(exportFormat) {\n        if (this.isEmpty()) {\n            return null;\n        }\n        const obj = {};\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            obj[key] = childNode.val(exportFormat);\n            numKeys++;\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n                maxKey = Math.max(maxKey, Number(key));\n            }\n            else {\n                allIntegerKeys = false;\n            }\n        });\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n            // convert to array.\n            const array = [];\n            // eslint-disable-next-line guard-for-in\n            for (const key in obj) {\n                array[key] = obj[key];\n            }\n            return array;\n        }\n        else {\n            if (exportFormat && !this.getPriority().isEmpty()) {\n                obj['.priority'] = this.getPriority().val();\n            }\n            return obj;\n        }\n    }\n    /** @inheritDoc */\n    hash() {\n        if (this.lazyHash_ === null) {\n            let toHash = '';\n            if (!this.getPriority().isEmpty()) {\n                toHash +=\n                    'priority:' +\n                        priorityHashText(this.getPriority().val()) +\n                        ':';\n            }\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                const childHash = childNode.hash();\n                if (childHash !== '') {\n                    toHash += ':' + key + ':' + childHash;\n                }\n            });\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n        }\n        return this.lazyHash_;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode, index) {\n        const idx = this.resolveIndex_(index);\n        if (idx) {\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n            return predecessor ? predecessor.name : null;\n        }\n        else {\n            return this.children_.getPredecessorKey(childName);\n        }\n    }\n    getFirstChildName(indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            const minKey = idx.minKey();\n            return minKey && minKey.name;\n        }\n        else {\n            return this.children_.minKey();\n        }\n    }\n    getFirstChild(indexDefinition) {\n        const minKey = this.getFirstChildName(indexDefinition);\n        if (minKey) {\n            return new NamedNode(minKey, this.children_.get(minKey));\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Given an index, return the key name of the largest value we have, according to that index\n     */\n    getLastChildName(indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            const maxKey = idx.maxKey();\n            return maxKey && maxKey.name;\n        }\n        else {\n            return this.children_.maxKey();\n        }\n    }\n    getLastChild(indexDefinition) {\n        const maxKey = this.getLastChildName(indexDefinition);\n        if (maxKey) {\n            return new NamedNode(maxKey, this.children_.get(maxKey));\n        }\n        else {\n            return null;\n        }\n    }\n    forEachChild(index, action) {\n        const idx = this.resolveIndex_(index);\n        if (idx) {\n            return idx.inorderTraversal(wrappedNode => {\n                return action(wrappedNode.name, wrappedNode.node);\n            });\n        }\n        else {\n            return this.children_.inorderTraversal(action);\n        }\n    }\n    getIterator(indexDefinition) {\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n    }\n    getIteratorFrom(startPost, indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getIteratorFrom(startPost, key => key);\n        }\n        else {\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n            let next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    }\n    getReverseIterator(indexDefinition) {\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n    }\n    getReverseIteratorFrom(endPost, indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getReverseIteratorFrom(endPost, key => {\n                return key;\n            });\n        }\n        else {\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n            let next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    }\n    compareTo(other) {\n        if (this.isEmpty()) {\n            if (other.isEmpty()) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (other.isLeafNode() || other.isEmpty()) {\n            return 1;\n        }\n        else if (other === MAX_NODE) {\n            return -1;\n        }\n        else {\n            // Must be another node with children.\n            return 0;\n        }\n    }\n    withIndex(indexDefinition) {\n        if (indexDefinition === KEY_INDEX ||\n            this.indexMap_.hasIndex(indexDefinition)) {\n            return this;\n        }\n        else {\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n        }\n    }\n    isIndexed(index) {\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n    }\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            return false;\n        }\n        else {\n            const otherChildrenNode = other;\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n                return false;\n            }\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\n                const thisIter = this.getIterator(PRIORITY_INDEX);\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n                let thisCurrent = thisIter.getNext();\n                let otherCurrent = otherIter.getNext();\n                while (thisCurrent && otherCurrent) {\n                    if (thisCurrent.name !== otherCurrent.name ||\n                        !thisCurrent.node.equals(otherCurrent.node)) {\n                        return false;\n                    }\n                    thisCurrent = thisIter.getNext();\n                    otherCurrent = otherIter.getNext();\n                }\n                return thisCurrent === null && otherCurrent === null;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    /**\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n     * instead.\n     *\n     */\n    resolveIndex_(indexDefinition) {\n        if (indexDefinition === KEY_INDEX) {\n            return null;\n        }\n        else {\n            return this.indexMap_.get(indexDefinition.toString());\n        }\n    }\n}\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\nclass MaxNode extends ChildrenNode {\n    constructor() {\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n    }\n    compareTo(other) {\n        if (other === this) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    }\n    equals(other) {\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\n        return other === this;\n    }\n    getPriority() {\n        return this;\n    }\n    getImmediateChild(childName) {\n        return ChildrenNode.EMPTY_NODE;\n    }\n    isEmpty() {\n        return false;\n    }\n}\n/**\n * Marker that will sort higher than any other snapshot.\n */\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n    MIN: {\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n    },\n    MAX: {\n        value: new NamedNode(MAX_NAME, MAX_NODE)\n    }\n});\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst USE_HINZE = true;\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nfunction nodeFromJSON(json, priority = null) {\n    if (json === null) {\n        return ChildrenNode.EMPTY_NODE;\n    }\n    if (typeof json === 'object' && '.priority' in json) {\n        priority = json['.priority'];\n    }\n    assert(priority === null ||\n        typeof priority === 'string' ||\n        typeof priority === 'number' ||\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n        json = json['.value'];\n    }\n    // Valid leaf nodes include non-objects or server-value wrapper objects\n    if (typeof json !== 'object' || '.sv' in json) {\n        const jsonLeaf = json;\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n    }\n    if (!(json instanceof Array) && USE_HINZE) {\n        const children = [];\n        let childrenHavePriority = false;\n        const hinzeJsonObj = json;\n        each(hinzeJsonObj, (key, child) => {\n            if (key.substring(0, 1) !== '.') {\n                // Ignore metadata nodes\n                const childNode = nodeFromJSON(child);\n                if (!childNode.isEmpty()) {\n                    childrenHavePriority =\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\n                    children.push(new NamedNode(key, childNode));\n                }\n            }\n        });\n        if (children.length === 0) {\n            return ChildrenNode.EMPTY_NODE;\n        }\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n        if (childrenHavePriority) {\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\n        }\n        else {\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n        }\n    }\n    else {\n        let node = ChildrenNode.EMPTY_NODE;\n        each(json, (key, childData) => {\n            if (contains(json, key)) {\n                if (key.substring(0, 1) !== '.') {\n                    // ignore metadata nodes.\n                    const childNode = nodeFromJSON(childData);\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\n                        node = node.updateImmediateChild(key, childNode);\n                    }\n                }\n            }\n        });\n        return node.updatePriority(nodeFromJSON(priority));\n    }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass PathIndex extends Index {\n    constructor(indexPath_) {\n        super();\n        this.indexPath_ = indexPath_;\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    }\n    extractChild(snap) {\n        return snap.getChild(this.indexPath_);\n    }\n    isDefinedOn(node) {\n        return !node.getChild(this.indexPath_).isEmpty();\n    }\n    compare(a, b) {\n        const aChild = this.extractChild(a.node);\n        const bChild = this.extractChild(b.node);\n        const indexCmp = aChild.compareTo(bChild);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    makePost(indexValue, name) {\n        const valueNode = nodeFromJSON(indexValue);\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n        return new NamedNode(name, node);\n    }\n    maxPost() {\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n        return new NamedNode(MAX_NAME, node);\n    }\n    toString() {\n        return pathSlice(this.indexPath_, 0).join('/');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ValueIndex extends Index {\n    compare(a, b) {\n        const indexCmp = a.node.compareTo(b.node);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    isDefinedOn(node) {\n        return true;\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return !oldNode.equals(newNode);\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MAX;\n    }\n    makePost(indexValue, name) {\n        const valueNode = nodeFromJSON(indexValue);\n        return new NamedNode(name, valueNode);\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.value';\n    }\n}\nconst VALUE_INDEX = new ValueIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction changeValue(snapshotNode) {\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n    return {\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\n        snapshotNode,\n        childName,\n        oldSnap\n    };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nclass IndexedFilter {\n    constructor(index_) {\n        this.index_ = index_;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n        const oldChild = snap.getImmediateChild(key);\n        // Check if anything actually changed.\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n            // to avoid treating these cases as \"nothing changed.\"\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\n                // Nothing changed.\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n                return snap;\n            }\n        }\n        if (optChangeAccumulator != null) {\n            if (newChild.isEmpty()) {\n                if (snap.hasChild(key)) {\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n                }\n                else {\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n                }\n            }\n            else if (oldChild.isEmpty()) {\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n            }\n            else {\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n            }\n        }\n        if (snap.isLeafNode() && newChild.isEmpty()) {\n            return snap;\n        }\n        else {\n            // Make sure the node is indexed\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n        }\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        if (optChangeAccumulator != null) {\n            if (!oldSnap.isLeafNode()) {\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                    if (!newSnap.hasChild(key)) {\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n                    }\n                });\n            }\n            if (!newSnap.isLeafNode()) {\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                    if (oldSnap.hasChild(key)) {\n                        const oldChild = oldSnap.getImmediateChild(key);\n                        if (!oldChild.equals(childNode)) {\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n                        }\n                    }\n                    else {\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n                    }\n                });\n            }\n        }\n        return newSnap.withIndex(this.index_);\n    }\n    updatePriority(oldSnap, newPriority) {\n        if (oldSnap.isEmpty()) {\n            return ChildrenNode.EMPTY_NODE;\n        }\n        else {\n            return oldSnap.updatePriority(newPriority);\n        }\n    }\n    filtersNodes() {\n        return false;\n    }\n    getIndexedFilter() {\n        return this;\n    }\n    getIndex() {\n        return this.index_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nclass RangedFilter {\n    constructor(params) {\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\n        this.index_ = params.getIndex();\n        this.startPost_ = RangedFilter.getStartPost_(params);\n        this.endPost_ = RangedFilter.getEndPost_(params);\n        this.startIsInclusive_ = !params.startAfterSet_;\n        this.endIsInclusive_ = !params.endBeforeSet_;\n    }\n    getStartPost() {\n        return this.startPost_;\n    }\n    getEndPost() {\n        return this.endPost_;\n    }\n    matches(node) {\n        const isWithinStart = this.startIsInclusive_\n            ? this.index_.compare(this.getStartPost(), node) <= 0\n            : this.index_.compare(this.getStartPost(), node) < 0;\n        const isWithinEnd = this.endIsInclusive_\n            ? this.index_.compare(node, this.getEndPost()) <= 0\n            : this.index_.compare(node, this.getEndPost()) < 0;\n        return isWithinStart && isWithinEnd;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode.EMPTY_NODE;\n        }\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        if (newSnap.isLeafNode()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            newSnap = ChildrenNode.EMPTY_NODE;\n        }\n        let filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        const self = this;\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            if (!self.matches(new NamedNode(key, childNode))) {\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n            }\n        });\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n    updatePriority(oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    }\n    filtersNodes() {\n        return true;\n    }\n    getIndexedFilter() {\n        return this.indexedFilter_;\n    }\n    getIndex() {\n        return this.index_;\n    }\n    static getStartPost_(params) {\n        if (params.hasStart()) {\n            const startName = params.getIndexStartName();\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\n        }\n        else {\n            return params.getIndex().minPost();\n        }\n    }\n    static getEndPost_(params) {\n        if (params.hasEnd()) {\n            const endName = params.getIndexEndName();\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\n        }\n        else {\n            return params.getIndex().maxPost();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nclass LimitedFilter {\n    constructor(params) {\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n        this.withinStartPost = (node) => {\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n        };\n        this.withinEndPost = (node) => {\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n        };\n        this.rangedFilter_ = new RangedFilter(params);\n        this.index_ = params.getIndex();\n        this.limit_ = params.getLimit();\n        this.reverse_ = !params.isViewFromLeft();\n        this.startIsInclusive_ = !params.startAfterSet_;\n        this.endIsInclusive_ = !params.endBeforeSet_;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode.EMPTY_NODE;\n        }\n        if (snap.getImmediateChild(key).equals(newChild)) {\n            // No change\n            return snap;\n        }\n        else if (snap.numChildren() < this.limit_) {\n            return this.rangedFilter_\n                .getIndexedFilter()\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n        }\n        else {\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n        }\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        let filtered;\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        }\n        else {\n            if (this.limit_ * 2 < newSnap.numChildren() &&\n                newSnap.isIndexed(this.index_)) {\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n                // anchor to the startPost, endPost, or last element as appropriate\n                let iterator;\n                if (this.reverse_) {\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n                }\n                else {\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n                }\n                let count = 0;\n                while (iterator.hasNext() && count < this.limit_) {\n                    const next = iterator.getNext();\n                    if (!this.withinDirectionalStart(next)) {\n                        // if we have not reached the start, skip to the next element\n                        continue;\n                    }\n                    else if (!this.withinDirectionalEnd(next)) {\n                        // if we have reached the end, stop adding elements\n                        break;\n                    }\n                    else {\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\n                        count++;\n                    }\n                }\n            }\n            else {\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n                filtered = newSnap.withIndex(this.index_);\n                // Don't support priorities on queries\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n                let iterator;\n                if (this.reverse_) {\n                    iterator = filtered.getReverseIterator(this.index_);\n                }\n                else {\n                    iterator = filtered.getIterator(this.index_);\n                }\n                let count = 0;\n                while (iterator.hasNext()) {\n                    const next = iterator.getNext();\n                    const inRange = count < this.limit_ &&\n                        this.withinDirectionalStart(next) &&\n                        this.withinDirectionalEnd(next);\n                    if (inRange) {\n                        count++;\n                    }\n                    else {\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n                    }\n                }\n            }\n        }\n        return this.rangedFilter_\n            .getIndexedFilter()\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n    updatePriority(oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    }\n    filtersNodes() {\n        return true;\n    }\n    getIndexedFilter() {\n        return this.rangedFilter_.getIndexedFilter();\n    }\n    getIndex() {\n        return this.index_;\n    }\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n        // TODO: rename all cache stuff etc to general snap terminology\n        let cmp;\n        if (this.reverse_) {\n            const indexCmp = this.index_.getCompare();\n            cmp = (a, b) => indexCmp(b, a);\n        }\n        else {\n            cmp = this.index_.getCompare();\n        }\n        const oldEventCache = snap;\n        assert(oldEventCache.numChildren() === this.limit_, '');\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\n        const windowBoundary = this.reverse_\n            ? oldEventCache.getFirstChild(this.index_)\n            : oldEventCache.getLastChild(this.index_);\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\n        if (oldEventCache.hasChild(childKey)) {\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n            while (nextChild != null &&\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\n                // the limited filter...\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n            }\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n            if (remainsInWindow) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n                }\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\n            }\n            else {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n                }\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n                if (nextChildInRange) {\n                    if (changeAccumulator != null) {\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n                    }\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n                }\n                else {\n                    return newEventCache;\n                }\n            }\n        }\n        else if (childSnap.isEmpty()) {\n            // we're deleting a node, but it was not in the window, so ignore it\n            return snap;\n        }\n        else if (inRange) {\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n                }\n                return oldEventCache\n                    .updateImmediateChild(childKey, childSnap)\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n            }\n            else {\n                return snap;\n            }\n        }\n        else {\n            return snap;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nclass QueryParams {\n    constructor() {\n        this.limitSet_ = false;\n        this.startSet_ = false;\n        this.startNameSet_ = false;\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\n        this.endSet_ = false;\n        this.endNameSet_ = false;\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\n        this.limit_ = 0;\n        this.viewFrom_ = '';\n        this.indexStartValue_ = null;\n        this.indexStartName_ = '';\n        this.indexEndValue_ = null;\n        this.indexEndName_ = '';\n        this.index_ = PRIORITY_INDEX;\n    }\n    hasStart() {\n        return this.startSet_;\n    }\n    /**\n     * @returns True if it would return from left.\n     */\n    isViewFromLeft() {\n        if (this.viewFrom_ === '') {\n            // limit(), rather than limitToFirst or limitToLast was called.\n            // This means that only one of startSet_ and endSet_ is true. Use them\n            // to calculate which side of the view to anchor to. If neither is set,\n            // anchor to the end.\n            return this.startSet_;\n        }\n        else {\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n        }\n    }\n    /**\n     * Only valid to call if hasStart() returns true\n     */\n    getIndexStartValue() {\n        assert(this.startSet_, 'Only valid if start has been set');\n        return this.indexStartValue_;\n    }\n    /**\n     * Only valid to call if hasStart() returns true.\n     * Returns the starting key name for the range defined by these query parameters\n     */\n    getIndexStartName() {\n        assert(this.startSet_, 'Only valid if start has been set');\n        if (this.startNameSet_) {\n            return this.indexStartName_;\n        }\n        else {\n            return MIN_NAME;\n        }\n    }\n    hasEnd() {\n        return this.endSet_;\n    }\n    /**\n     * Only valid to call if hasEnd() returns true.\n     */\n    getIndexEndValue() {\n        assert(this.endSet_, 'Only valid if end has been set');\n        return this.indexEndValue_;\n    }\n    /**\n     * Only valid to call if hasEnd() returns true.\n     * Returns the end key name for the range defined by these query parameters\n     */\n    getIndexEndName() {\n        assert(this.endSet_, 'Only valid if end has been set');\n        if (this.endNameSet_) {\n            return this.indexEndName_;\n        }\n        else {\n            return MAX_NAME;\n        }\n    }\n    hasLimit() {\n        return this.limitSet_;\n    }\n    /**\n     * @returns True if a limit has been set and it has been explicitly anchored\n     */\n    hasAnchoredLimit() {\n        return this.limitSet_ && this.viewFrom_ !== '';\n    }\n    /**\n     * Only valid to call if hasLimit() returns true\n     */\n    getLimit() {\n        assert(this.limitSet_, 'Only valid if limit has been set');\n        return this.limit_;\n    }\n    getIndex() {\n        return this.index_;\n    }\n    loadsAllData() {\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\n    }\n    isDefault() {\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n    }\n    copy() {\n        const copy = new QueryParams();\n        copy.limitSet_ = this.limitSet_;\n        copy.limit_ = this.limit_;\n        copy.startSet_ = this.startSet_;\n        copy.startAfterSet_ = this.startAfterSet_;\n        copy.indexStartValue_ = this.indexStartValue_;\n        copy.startNameSet_ = this.startNameSet_;\n        copy.indexStartName_ = this.indexStartName_;\n        copy.endSet_ = this.endSet_;\n        copy.endBeforeSet_ = this.endBeforeSet_;\n        copy.indexEndValue_ = this.indexEndValue_;\n        copy.endNameSet_ = this.endNameSet_;\n        copy.indexEndName_ = this.indexEndName_;\n        copy.index_ = this.index_;\n        copy.viewFrom_ = this.viewFrom_;\n        return copy;\n    }\n}\nfunction queryParamsGetNodeFilter(queryParams) {\n    if (queryParams.loadsAllData()) {\n        return new IndexedFilter(queryParams.getIndex());\n    }\n    else if (queryParams.hasLimit()) {\n        return new LimitedFilter(queryParams);\n    }\n    else {\n        return new RangedFilter(queryParams);\n    }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n    const newParams = queryParams.copy();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n    return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n    const newParams = queryParams.copy();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n    return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n    const newParams = queryParams.copy();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n        indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n        newParams.startNameSet_ = true;\n        newParams.indexStartName_ = key;\n    }\n    else {\n        newParams.startNameSet_ = false;\n        newParams.indexStartName_ = '';\n    }\n    return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n    let params;\n    if (queryParams.index_ === KEY_INDEX || !!key) {\n        params = queryParamsStartAt(queryParams, indexValue, key);\n    }\n    else {\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n    }\n    params.startAfterSet_ = true;\n    return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n    const newParams = queryParams.copy();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n        indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n        newParams.endNameSet_ = true;\n        newParams.indexEndName_ = key;\n    }\n    else {\n        newParams.endNameSet_ = false;\n        newParams.indexEndName_ = '';\n    }\n    return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n    let params;\n    if (queryParams.index_ === KEY_INDEX || !!key) {\n        params = queryParamsEndAt(queryParams, indexValue, key);\n    }\n    else {\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n    }\n    params.endBeforeSet_ = true;\n    return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n    const newParams = queryParams.copy();\n    newParams.index_ = index;\n    return newParams;\n}\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n    const qs = {};\n    if (queryParams.isDefault()) {\n        return qs;\n    }\n    let orderBy;\n    if (queryParams.index_ === PRIORITY_INDEX) {\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\n    }\n    else if (queryParams.index_ === VALUE_INDEX) {\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\n    }\n    else if (queryParams.index_ === KEY_INDEX) {\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\n    }\n    else {\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n        orderBy = queryParams.index_.toString();\n    }\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\n    if (queryParams.startSet_) {\n        const startParam = queryParams.startAfterSet_\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\n        qs[startParam] = stringify(queryParams.indexStartValue_);\n        if (queryParams.startNameSet_) {\n            qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n        }\n    }\n    if (queryParams.endSet_) {\n        const endParam = queryParams.endBeforeSet_\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\n        qs[endParam] = stringify(queryParams.indexEndValue_);\n        if (queryParams.endNameSet_) {\n            qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n        }\n    }\n    if (queryParams.limitSet_) {\n        if (queryParams.isViewFromLeft()) {\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\n        }\n        else {\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\n        }\n    }\n    return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n    const obj = {};\n    if (queryParams.startSet_) {\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\n            queryParams.indexStartValue_;\n        if (queryParams.startNameSet_) {\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\n                queryParams.indexStartName_;\n        }\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\n            !queryParams.startAfterSet_;\n    }\n    if (queryParams.endSet_) {\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\n        if (queryParams.endNameSet_) {\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\n        }\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\n            !queryParams.endBeforeSet_;\n    }\n    if (queryParams.limitSet_) {\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\n        let viewFrom = queryParams.viewFrom_;\n        if (viewFrom === '') {\n            if (queryParams.isViewFromLeft()) {\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n            }\n            else {\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n            }\n        }\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (queryParams.index_ !== PRIORITY_INDEX) {\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\n    }\n    return obj;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nclass ReadonlyRestClient extends ServerActions {\n    reportStats(stats) {\n        throw new Error('Method not implemented.');\n    }\n    static getListenId_(query, tag) {\n        if (tag !== undefined) {\n            return 'tag$' + tag;\n        }\n        else {\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n            return query._path.toString();\n        }\n    }\n    /**\n     * @param repoInfo_ - Data about the namespace we are connecting to\n     * @param onDataUpdate_ - A callback for new data from the server\n     */\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n        super();\n        this.repoInfo_ = repoInfo_;\n        this.onDataUpdate_ = onDataUpdate_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\n        /** @private {function(...[*])} */\n        this.log_ = logWrapper('p:rest:');\n        /**\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n         * that's been removed. :-/\n         */\n        this.listens_ = {};\n    }\n    /** @inheritDoc */\n    listen(query, currentHashFn, tag, onComplete) {\n        const pathString = query._path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n        // Mark this listener so we can tell if it's removed.\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\n        const thisListen = {};\n        this.listens_[listenId] = thisListen;\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n            let data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n            }\n            if (safeGet(this.listens_, listenId) === thisListen) {\n                let status;\n                if (!error) {\n                    status = 'ok';\n                }\n                else if (error === 401) {\n                    status = 'permission_denied';\n                }\n                else {\n                    status = 'rest_error:' + error;\n                }\n                onComplete(status, null);\n            }\n        });\n    }\n    /** @inheritDoc */\n    unlisten(query, tag) {\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\n        delete this.listens_[listenId];\n    }\n    get(query) {\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n        const pathString = query._path.toString();\n        const deferred = new Deferred();\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n            let data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                this.onDataUpdate_(pathString, data, \n                /*isMerge=*/ false, \n                /*tag=*/ null);\n                deferred.resolve(data);\n            }\n            else {\n                deferred.reject(new Error(data));\n            }\n        });\n        return deferred.promise;\n    }\n    /** @inheritDoc */\n    refreshAuthToken(token) {\n        // no-op since we just always call getToken.\n    }\n    /**\n     * Performs a REST request to the given path, with the provided query string parameters,\n     * and any auth credentials we have.\n     */\n    restRequest_(pathString, queryStringParameters = {}, callback) {\n        queryStringParameters['format'] = 'export';\n        return Promise.all([\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n        ]).then(([authToken, appCheckToken]) => {\n            if (authToken && authToken.accessToken) {\n                queryStringParameters['auth'] = authToken.accessToken;\n            }\n            if (appCheckToken && appCheckToken.token) {\n                queryStringParameters['ac'] = appCheckToken.token;\n            }\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\n                this.repoInfo_.host +\n                pathString +\n                '?' +\n                'ns=' +\n                this.repoInfo_.namespace +\n                querystring(queryStringParameters);\n            this.log_('Sending REST request for ' + url);\n            const xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = () => {\n                if (callback && xhr.readyState === 4) {\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n                    let res = null;\n                    if (xhr.status >= 200 && xhr.status < 300) {\n                        try {\n                            res = jsonEval(xhr.responseText);\n                        }\n                        catch (e) {\n                            warn('Failed to parse JSON response for ' +\n                                url +\n                                ': ' +\n                                xhr.responseText);\n                        }\n                        callback(null, res);\n                    }\n                    else {\n                        // 401 and 404 are expected.\n                        if (xhr.status !== 401 && xhr.status !== 404) {\n                            warn('Got unsuccessful REST response for ' +\n                                url +\n                                ' Status: ' +\n                                xhr.status);\n                        }\n                        callback(xhr.status);\n                    }\n                    callback = null;\n                }\n            };\n            xhr.open('GET', url, /*asynchronous=*/ true);\n            xhr.send();\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nclass SnapshotHolder {\n    constructor() {\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\n    }\n    getNode(path) {\n        return this.rootNode_.getChild(path);\n    }\n    updateSnapshot(path, newSnapshotNode) {\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newSparseSnapshotTree() {\n    return {\n        value: null,\n        children: new Map()\n    };\n}\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n    if (pathIsEmpty(path)) {\n        sparseSnapshotTree.value = data;\n        sparseSnapshotTree.children.clear();\n    }\n    else if (sparseSnapshotTree.value !== null) {\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n    }\n    else {\n        const childKey = pathGetFront(path);\n        if (!sparseSnapshotTree.children.has(childKey)) {\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n        }\n        const child = sparseSnapshotTree.children.get(childKey);\n        path = pathPopFront(path);\n        sparseSnapshotTreeRemember(child, path, data);\n    }\n}\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n    if (pathIsEmpty(path)) {\n        sparseSnapshotTree.value = null;\n        sparseSnapshotTree.children.clear();\n        return true;\n    }\n    else {\n        if (sparseSnapshotTree.value !== null) {\n            if (sparseSnapshotTree.value.isLeafNode()) {\n                // We're trying to forget a node that doesn't exist\n                return false;\n            }\n            else {\n                const value = sparseSnapshotTree.value;\n                sparseSnapshotTree.value = null;\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n                });\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n            }\n        }\n        else if (sparseSnapshotTree.children.size > 0) {\n            const childKey = pathGetFront(path);\n            path = pathPopFront(path);\n            if (sparseSnapshotTree.children.has(childKey)) {\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n                if (safeToRemove) {\n                    sparseSnapshotTree.children.delete(childKey);\n                }\n            }\n            return sparseSnapshotTree.children.size === 0;\n        }\n        else {\n            return true;\n        }\n    }\n}\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n    if (sparseSnapshotTree.value !== null) {\n        func(prefixPath, sparseSnapshotTree.value);\n    }\n    else {\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n            const path = new Path(prefixPath.toString() + '/' + key);\n            sparseSnapshotTreeForEachTree(tree, path, func);\n        });\n    }\n}\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n    sparseSnapshotTree.children.forEach((tree, key) => {\n        func(key, tree);\n    });\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nclass StatsListener {\n    constructor(collection_) {\n        this.collection_ = collection_;\n        this.last_ = null;\n    }\n    get() {\n        const newStats = this.collection_.get();\n        const delta = { ...newStats };\n        if (this.last_) {\n            each(this.last_, (stat, value) => {\n                delta[stat] = delta[stat] - value;\n            });\n        }\n        this.last_ = newStats;\n        return delta;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nclass StatsReporter {\n    constructor(collection, server_) {\n        this.server_ = server_;\n        this.statsToReport_ = {};\n        this.statsListener_ = new StatsListener(collection);\n        const timeout = FIRST_STATS_MIN_TIME +\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n    }\n    reportStats_() {\n        const stats = this.statsListener_.get();\n        const reportedStats = {};\n        let haveStatsToReport = false;\n        each(stats, (stat, value) => {\n            if (value > 0 && contains(this.statsToReport_, stat)) {\n                reportedStats[stat] = value;\n                haveStatsToReport = true;\n            }\n        });\n        if (haveStatsToReport) {\n            this.server_.reportStats(reportedStats);\n        }\n        // queue our next run.\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n *\n * @enum\n */\nvar OperationType;\n(function (OperationType) {\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\nfunction newOperationSourceUser() {\n    return {\n        fromUser: true,\n        fromServer: false,\n        queryId: null,\n        tagged: false\n    };\n}\nfunction newOperationSourceServer() {\n    return {\n        fromUser: false,\n        fromServer: true,\n        queryId: null,\n        tagged: false\n    };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n    return {\n        fromUser: false,\n        fromServer: true,\n        queryId,\n        tagged: true\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AckUserWrite {\n    /**\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n     */\n    constructor(\n    /** @inheritDoc */ path, \n    /** @inheritDoc */ affectedTree, \n    /** @inheritDoc */ revert) {\n        this.path = path;\n        this.affectedTree = affectedTree;\n        this.revert = revert;\n        /** @inheritDoc */\n        this.type = OperationType.ACK_USER_WRITE;\n        /** @inheritDoc */\n        this.source = newOperationSourceUser();\n    }\n    operationForChild(childName) {\n        if (!pathIsEmpty(this.path)) {\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n        }\n        else if (this.affectedTree.value != null) {\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n            // All child locations are affected as well; just return same operation.\n            return this;\n        }\n        else {\n            const childTree = this.affectedTree.subtree(new Path(childName));\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ListenComplete {\n    constructor(source, path) {\n        this.source = source;\n        this.path = path;\n        /** @inheritDoc */\n        this.type = OperationType.LISTEN_COMPLETE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            return new ListenComplete(this.source, newEmptyPath());\n        }\n        else {\n            return new ListenComplete(this.source, pathPopFront(this.path));\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Overwrite {\n    constructor(source, path, snap) {\n        this.source = source;\n        this.path = path;\n        this.snap = snap;\n        /** @inheritDoc */\n        this.type = OperationType.OVERWRITE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n        }\n        else {\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Merge {\n    constructor(\n    /** @inheritDoc */ source, \n    /** @inheritDoc */ path, \n    /** @inheritDoc */ children) {\n        this.source = source;\n        this.path = path;\n        this.children = children;\n        /** @inheritDoc */\n        this.type = OperationType.MERGE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            const childTree = this.children.subtree(new Path(childName));\n            if (childTree.isEmpty()) {\n                // This child is unaffected\n                return null;\n            }\n            else if (childTree.value) {\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\n            }\n            else {\n                // This is a merge at a deeper level\n                return new Merge(this.source, newEmptyPath(), childTree);\n            }\n        }\n        else {\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n            return new Merge(this.source, pathPopFront(this.path), this.children);\n        }\n    }\n    toString() {\n        return ('Operation(' +\n            this.path +\n            ': ' +\n            this.source.toString() +\n            ' merge: ' +\n            this.children.toString() +\n            ')');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nclass CacheNode {\n    constructor(node_, fullyInitialized_, filtered_) {\n        this.node_ = node_;\n        this.fullyInitialized_ = fullyInitialized_;\n        this.filtered_ = filtered_;\n    }\n    /**\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n     */\n    isFullyInitialized() {\n        return this.fullyInitialized_;\n    }\n    /**\n     * Returns whether this node is potentially missing children due to a filter applied to the node\n     */\n    isFiltered() {\n        return this.filtered_;\n    }\n    isCompleteForPath(path) {\n        if (pathIsEmpty(path)) {\n            return this.isFullyInitialized() && !this.filtered_;\n        }\n        const childKey = pathGetFront(path);\n        return this.isCompleteForChild(childKey);\n    }\n    isCompleteForChild(key) {\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\n    }\n    getNode() {\n        return this.node_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nclass EventGenerator {\n    constructor(query_) {\n        this.query_ = query_;\n        this.index_ = this.query_._queryParams.getIndex();\n    }\n}\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n    const events = [];\n    const moves = [];\n    changes.forEach(change => {\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\n        }\n    });\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\n    return events;\n}\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n    filteredChanges.forEach(change => {\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n        registrations.forEach(registration => {\n            if (registration.respondsTo(change.type)) {\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n            }\n        });\n    });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n        return change;\n    }\n    else {\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n        return change;\n    }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n    if (a.childName == null || b.childName == null) {\n        throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewCache(eventCache, serverCache) {\n    return { eventCache, serverCache };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n    return viewCache.eventCache.isFullyInitialized()\n        ? viewCache.eventCache.getNode()\n        : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n    return viewCache.serverCache.isFullyInitialized()\n        ? viewCache.serverCache.getNode()\n        : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet emptyChildrenSingleton;\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = () => {\n    if (!emptyChildrenSingleton) {\n        emptyChildrenSingleton = new SortedMap(stringCompare);\n    }\n    return emptyChildrenSingleton;\n};\n/**\n * A tree with immutable elements.\n */\nclass ImmutableTree {\n    static fromObject(obj) {\n        let tree = new ImmutableTree(null);\n        each(obj, (childPath, childSnap) => {\n            tree = tree.set(new Path(childPath), childSnap);\n        });\n        return tree;\n    }\n    constructor(value, children = EmptyChildren()) {\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * True if the value is empty and there are no children\n     */\n    isEmpty() {\n        return this.value === null && this.children.isEmpty();\n    }\n    /**\n     * Given a path and predicate, return the first node and the path to that node\n     * where the predicate returns true.\n     *\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\n     *\n     * @param relativePath - The remainder of the path\n     * @param predicate - The predicate to satisfy to return a node\n     */\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\n        if (this.value != null && predicate(this.value)) {\n            return { path: newEmptyPath(), value: this.value };\n        }\n        else {\n            if (pathIsEmpty(relativePath)) {\n                return null;\n            }\n            else {\n                const front = pathGetFront(relativePath);\n                const child = this.children.get(front);\n                if (child !== null) {\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n                    if (childExistingPathAndValue != null) {\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n                        return { path: fullPath, value: childExistingPathAndValue.value };\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    }\n    /**\n     * Find, if it exists, the shortest subpath of the given path that points a defined\n     * value in the tree\n     */\n    findRootMostValueAndPath(relativePath) {\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n    }\n    /**\n     * @returns The subtree at the given path\n     */\n    subtree(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            return this;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const childTree = this.children.get(front);\n            if (childTree !== null) {\n                return childTree.subtree(pathPopFront(relativePath));\n            }\n            else {\n                return new ImmutableTree(null);\n            }\n        }\n    }\n    /**\n     * Sets a value at the specified path.\n     *\n     * @param relativePath - Path to set value at.\n     * @param toSet - Value to set.\n     * @returns Resulting tree.\n     */\n    set(relativePath, toSet) {\n        if (pathIsEmpty(relativePath)) {\n            return new ImmutableTree(toSet, this.children);\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front) || new ImmutableTree(null);\n            const newChild = child.set(pathPopFront(relativePath), toSet);\n            const newChildren = this.children.insert(front, newChild);\n            return new ImmutableTree(this.value, newChildren);\n        }\n    }\n    /**\n     * Removes the value at the specified path.\n     *\n     * @param relativePath - Path to value to remove.\n     * @returns Resulting tree.\n     */\n    remove(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            if (this.children.isEmpty()) {\n                return new ImmutableTree(null);\n            }\n            else {\n                return new ImmutableTree(null, this.children);\n            }\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front);\n            if (child) {\n                const newChild = child.remove(pathPopFront(relativePath));\n                let newChildren;\n                if (newChild.isEmpty()) {\n                    newChildren = this.children.remove(front);\n                }\n                else {\n                    newChildren = this.children.insert(front, newChild);\n                }\n                if (this.value === null && newChildren.isEmpty()) {\n                    return new ImmutableTree(null);\n                }\n                else {\n                    return new ImmutableTree(this.value, newChildren);\n                }\n            }\n            else {\n                return this;\n            }\n        }\n    }\n    /**\n     * Gets a value from the tree.\n     *\n     * @param relativePath - Path to get value for.\n     * @returns Value at path, or null.\n     */\n    get(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            return this.value;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front);\n            if (child) {\n                return child.get(pathPopFront(relativePath));\n            }\n            else {\n                return null;\n            }\n        }\n    }\n    /**\n     * Replace the subtree at the specified path with the given new tree.\n     *\n     * @param relativePath - Path to replace subtree for.\n     * @param newTree - New tree.\n     * @returns Resulting tree.\n     */\n    setTree(relativePath, newTree) {\n        if (pathIsEmpty(relativePath)) {\n            return newTree;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front) || new ImmutableTree(null);\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\n            let newChildren;\n            if (newChild.isEmpty()) {\n                newChildren = this.children.remove(front);\n            }\n            else {\n                newChildren = this.children.insert(front, newChild);\n            }\n            return new ImmutableTree(this.value, newChildren);\n        }\n    }\n    /**\n     * Performs a depth first fold on this tree. Transforms a tree into a single\n     * value, given a function that operates on the path to a node, an optional\n     * current value, and a map of child names to folded subtrees\n     */\n    fold(fn) {\n        return this.fold_(newEmptyPath(), fn);\n    }\n    /**\n     * Recursive helper for public-facing fold() method\n     */\n    fold_(pathSoFar, fn) {\n        const accum = {};\n        this.children.inorderTraversal((childKey, childTree) => {\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n        });\n        return fn(pathSoFar, this.value, accum);\n    }\n    /**\n     * Find the first matching value on the given path. Return the result of applying f to it.\n     */\n    findOnPath(path, f) {\n        return this.findOnPath_(path, newEmptyPath(), f);\n    }\n    findOnPath_(pathToFollow, pathSoFar, f) {\n        const result = this.value ? f(pathSoFar, this.value) : false;\n        if (result) {\n            return result;\n        }\n        else {\n            if (pathIsEmpty(pathToFollow)) {\n                return null;\n            }\n            else {\n                const front = pathGetFront(pathToFollow);\n                const nextChild = this.children.get(front);\n                if (nextChild) {\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    }\n    foreachOnPath(path, f) {\n        return this.foreachOnPath_(path, newEmptyPath(), f);\n    }\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\n        if (pathIsEmpty(pathToFollow)) {\n            return this;\n        }\n        else {\n            if (this.value) {\n                f(currentRelativePath, this.value);\n            }\n            const front = pathGetFront(pathToFollow);\n            const nextChild = this.children.get(front);\n            if (nextChild) {\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n            }\n            else {\n                return new ImmutableTree(null);\n            }\n        }\n    }\n    /**\n     * Calls the given function for each node in the tree that has a value.\n     *\n     * @param f - A function to be called with the path from the root of the tree to\n     * a node, and the value at that node. Called in depth-first order.\n     */\n    foreach(f) {\n        this.foreach_(newEmptyPath(), f);\n    }\n    foreach_(currentRelativePath, f) {\n        this.children.inorderTraversal((childName, childTree) => {\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\n        });\n        if (this.value) {\n            f(currentRelativePath, this.value);\n        }\n    }\n    foreachChild(f) {\n        this.children.inorderTraversal((childName, childTree) => {\n            if (childTree.value) {\n                f(childName, childTree.value);\n            }\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nclass CompoundWrite {\n    constructor(writeTree_) {\n        this.writeTree_ = writeTree_;\n    }\n    static empty() {\n        return new CompoundWrite(new ImmutableTree(null));\n    }\n}\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n    if (pathIsEmpty(path)) {\n        return new CompoundWrite(new ImmutableTree(node));\n    }\n    else {\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n        if (rootmost != null) {\n            const rootMostPath = rootmost.path;\n            let value = rootmost.value;\n            const relativePath = newRelativePath(rootMostPath, path);\n            value = value.updateChild(relativePath, node);\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n        }\n        else {\n            const subtree = new ImmutableTree(node);\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n            return new CompoundWrite(newWriteTree);\n        }\n    }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n    let newWrite = compoundWrite;\n    each(updates, (childKey, node) => {\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n    });\n    return newWrite;\n}\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n    if (pathIsEmpty(path)) {\n        return CompoundWrite.empty();\n    }\n    else {\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n        return new CompoundWrite(newWriteTree);\n    }\n}\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n        return compoundWrite.writeTree_\n            .get(rootmost.path)\n            .getChild(newRelativePath(rootmost.path, path));\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n    const children = [];\n    const node = compoundWrite.writeTree_.value;\n    if (node != null) {\n        // If it's a leaf node, it has no children; so nothing to do.\n        if (!node.isLeafNode()) {\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n                children.push(new NamedNode(childName, childNode));\n            });\n        }\n    }\n    else {\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n            if (childTree.value != null) {\n                children.push(new NamedNode(childName, childTree.value));\n            }\n        });\n    }\n    return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n    if (pathIsEmpty(path)) {\n        return compoundWrite;\n    }\n    else {\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n        if (shadowingNode != null) {\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\n        }\n        else {\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n        }\n    }\n}\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n    return compoundWrite.writeTree_.isEmpty();\n}\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nfunction compoundWriteApply(compoundWrite, node) {\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n    if (writeTree.value != null) {\n        // Since there a write is always a leaf, we're done here\n        return node.updateChild(relativePath, writeTree.value);\n    }\n    else {\n        let priorityWrite = null;\n        writeTree.children.inorderTraversal((childKey, childTree) => {\n            if (childKey === '.priority') {\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n                // to apply priorities to empty nodes that are later filled\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n                priorityWrite = childTree.value;\n            }\n            else {\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n            }\n        });\n        // If there was a priority write, we only apply it if the node is not empty\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n        }\n        return node;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nfunction writeTreeChildWrites(writeTree, path) {\n    return newWriteTreeRef(path, writeTree);\n}\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n    if (visible === undefined) {\n        visible = true;\n    }\n    writeTree.allWrites.push({\n        path,\n        snap,\n        writeId,\n        visible\n    });\n    if (visible) {\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n    }\n    writeTree.lastWriteId = writeId;\n}\n/**\n * Record a new merge from user code.\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n    writeTree.allWrites.push({\n        path,\n        children: changedChildren,\n        writeId,\n        visible: true\n    });\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n    writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\n        const record = writeTree.allWrites[i];\n        if (record.writeId === writeId) {\n            return record;\n        }\n    }\n    return null;\n}\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n    const idx = writeTree.allWrites.findIndex(s => {\n        return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = writeTree.allWrites[idx];\n    writeTree.allWrites.splice(idx, 1);\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n    let i = writeTree.allWrites.length - 1;\n    while (removedWriteWasVisible && i >= 0) {\n        const currentWrite = writeTree.allWrites[i];\n        if (currentWrite.visible) {\n            if (i >= idx &&\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n                // The removed write was completely shadowed by a subsequent write.\n                removedWriteWasVisible = false;\n            }\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\n                removedWriteOverlapsWithOtherWrites = true;\n            }\n        }\n        i--;\n    }\n    if (!removedWriteWasVisible) {\n        return false;\n    }\n    else if (removedWriteOverlapsWithOtherWrites) {\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\n        writeTreeResetTree_(writeTree);\n        return true;\n    }\n    else {\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n        if (writeToRemove.snap) {\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n        }\n        else {\n            const children = writeToRemove.children;\n            each(children, (childName) => {\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n            });\n        }\n        return true;\n    }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n    if (writeRecord.snap) {\n        return pathContains(writeRecord.path, path);\n    }\n    else {\n        for (const childName in writeRecord.children) {\n            if (writeRecord.children.hasOwnProperty(childName) &&\n                pathContains(pathChild(writeRecord.path, childName), path)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree) {\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n    if (writeTree.allWrites.length > 0) {\n        writeTree.lastWriteId =\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n    }\n    else {\n        writeTree.lastWriteId = -1;\n    }\n}\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write) {\n    return write.visible;\n}\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n    let compoundWrite = CompoundWrite.empty();\n    for (let i = 0; i < writes.length; ++i) {\n        const write = writes[i];\n        // Theory, a later set will either:\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n        if (filter(write)) {\n            const writePath = write.path;\n            let relativePath;\n            if (write.snap) {\n                if (pathContains(treeRoot, writePath)) {\n                    relativePath = newRelativePath(treeRoot, writePath);\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n                }\n                else if (pathContains(writePath, treeRoot)) {\n                    relativePath = newRelativePath(writePath, treeRoot);\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n                }\n                else ;\n            }\n            else if (write.children) {\n                if (pathContains(treeRoot, writePath)) {\n                    relativePath = newRelativePath(treeRoot, writePath);\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n                }\n                else if (pathContains(writePath, treeRoot)) {\n                    relativePath = newRelativePath(writePath, treeRoot);\n                    if (pathIsEmpty(relativePath)) {\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n                    }\n                    else {\n                        const child = safeGet(write.children, pathGetFront(relativePath));\n                        if (child) {\n                            // There exists a child in this node that matches the root path\n                            const deepNode = child.getChild(pathPopFront(relativePath));\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n                        }\n                    }\n                }\n                else ;\n            }\n            else {\n                throw assertionError('WriteRecord should have .snap or .children');\n            }\n        }\n    }\n    return compoundWrite;\n}\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n        if (shadowingNode != null) {\n            return shadowingNode;\n        }\n        else {\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n            if (compoundWriteIsEmpty(subMerge)) {\n                return completeServerCache;\n            }\n            else if (completeServerCache == null &&\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n                return null;\n            }\n            else {\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                return compoundWriteApply(subMerge, layeredCache);\n            }\n        }\n    }\n    else {\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n            return completeServerCache;\n        }\n        else {\n            // If the server cache is null, and we don't have a complete cache, we need to return null\n            if (!includeHiddenWrites &&\n                completeServerCache == null &&\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n                return null;\n            }\n            else {\n                const filter = function (write) {\n                    return ((write.visible || includeHiddenWrites) &&\n                        (!writeIdsToExclude ||\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\n                        (pathContains(write.path, treePath) ||\n                            pathContains(treePath, write.path)));\n                };\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                return compoundWriteApply(mergeAtPath, layeredCache);\n            }\n        }\n    }\n}\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n    let completeChildren = ChildrenNode.EMPTY_NODE;\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (topLevelSet) {\n        if (!topLevelSet.isLeafNode()) {\n            // we're shadowing everything. Return the children.\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n            });\n        }\n        return completeChildren;\n    }\n    else if (completeServerChildren) {\n        // Layer any children we have on top of this\n        // We know we don't have a top-level set, so just enumerate existing children\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\n        });\n        // Add any complete children we have from the set\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n        });\n        return completeChildren;\n    }\n    else {\n        // We don't have anything to layer on top of. Layer on any children we have\n        // Note that we can return an empty snap if we have a defined delete\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n        });\n        return completeChildren;\n    }\n}\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n    const path = pathChild(treePath, childPath);\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n        // At this point we can probably guarantee that we're in case 2, meaning no events\n        // May need to check visibility while doing the findRootMostValueAndPath call\n        return null;\n    }\n    else {\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n        if (compoundWriteIsEmpty(childMerge)) {\n            // We're not shadowing at all. Case 1\n            return existingServerSnap.getChild(childPath);\n        }\n        else {\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n            // However this is tricky to find out, since user updates don't necessary change the server\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n            // only check if the updates change the serverNode.\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n        }\n    }\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n    const path = pathChild(treePath, childKey);\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n    if (shadowingNode != null) {\n        return shadowingNode;\n    }\n    else {\n        if (existingServerSnap.isCompleteForChild(childKey)) {\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n        }\n        else {\n            return null;\n        }\n    }\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n    let toIterate;\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n    if (shadowingNode != null) {\n        toIterate = shadowingNode;\n    }\n    else if (completeServerData != null) {\n        toIterate = compoundWriteApply(merge, completeServerData);\n    }\n    else {\n        // no children to iterate on\n        return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n        const nodes = [];\n        const cmp = index.getCompare();\n        const iter = reverse\n            ? toIterate.getReverseIteratorFrom(startPost, index)\n            : toIterate.getIteratorFrom(startPost, index);\n        let next = iter.getNext();\n        while (next && nodes.length < count) {\n            if (cmp(next, startPost) !== 0) {\n                nodes.push(next);\n            }\n            next = iter.getNext();\n        }\n        return nodes;\n    }\n    else {\n        return [];\n    }\n}\nfunction newWriteTree() {\n    return {\n        visibleWrites: CompoundWrite.empty(),\n        allWrites: [],\n        lastWriteId: -1\n    };\n}\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\n * Return a WriteTreeRef for a child.\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n    return {\n        treePath: path,\n        writeTree\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ChildChangeAccumulator {\n    constructor() {\n        this.changeMap = new Map();\n    }\n    trackChildChange(change) {\n        const type = change.type;\n        const childKey = change.childName;\n        assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n        const oldChange = this.changeMap.get(childKey);\n        if (oldChange) {\n            const oldType = oldChange.type;\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n            }\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n                this.changeMap.delete(childKey);\n            }\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n            }\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n            }\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n            }\n            else {\n                throw assertionError('Illegal combination of changes: ' +\n                    change +\n                    ' occurred after ' +\n                    oldChange);\n            }\n        }\n        else {\n            this.changeMap.set(childKey, change);\n        }\n    }\n    getChanges() {\n        return Array.from(this.changeMap.values());\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_ {\n    getCompleteChild(childKey) {\n        return null;\n    }\n    getChildAfterChild(index, child, reverse) {\n        return null;\n    }\n}\n/**\n * Singleton instance.\n */\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nclass WriteTreeCompleteChildSource {\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\n        this.writes_ = writes_;\n        this.viewCache_ = viewCache_;\n        this.optCompleteServerCache_ = optCompleteServerCache_;\n    }\n    getCompleteChild(childKey) {\n        const node = this.viewCache_.eventCache;\n        if (node.isCompleteForChild(childKey)) {\n            return node.getNode().getImmediateChild(childKey);\n        }\n        else {\n            const serverNode = this.optCompleteServerCache_ != null\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\n                : this.viewCache_.serverCache;\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n        }\n    }\n    getChildAfterChild(index, child, reverse) {\n        const completeServerData = this.optCompleteServerCache_ != null\n            ? this.optCompleteServerCache_\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n        if (nodes.length === 0) {\n            return null;\n        }\n        else {\n            return nodes[0];\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewProcessor(filter) {\n    return { filter };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n        const overwrite = operation;\n        if (overwrite.source.fromUser) {\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n        }\n        else {\n            assert(overwrite.source.fromServer, 'Unknown source.');\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n            // again\n            filterServerNode =\n                overwrite.source.tagged ||\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.MERGE) {\n        const merge = operation;\n        if (merge.source.fromUser) {\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n        }\n        else {\n            assert(merge.source.fromServer, 'Unknown source.');\n            // We filter the node if it's a tagged update or the node has been previously filtered\n            filterServerNode =\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\n        const ackUserWrite = operation;\n        if (!ackUserWrite.revert) {\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n        }\n        else {\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n    }\n    else {\n        throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n    return { viewCache: newViewCache, changes };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n    const eventSnap = newViewCache.eventCache;\n    if (eventSnap.isFullyInitialized()) {\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n        if (accumulator.length > 0 ||\n            !oldViewCache.eventCache.isFullyInitialized() ||\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n        }\n    }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n    const oldEventSnap = viewCache.eventCache;\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n        // we have a shadowing write, ignore changes\n        return viewCache;\n    }\n    else {\n        let newEventCache, serverNode;\n        if (pathIsEmpty(changePath)) {\n            // TODO: figure out how this plays with \"sliding ack windows\"\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n            if (viewCache.serverCache.isFiltered()) {\n                // We need to special case this, because we need to only apply writes to complete children, or\n                // we might end up raising events for incomplete children. If the server data is filtered deep\n                // writes cannot be guaranteed to be complete\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n                const completeChildren = serverCache instanceof ChildrenNode\n                    ? serverCache\n                    : ChildrenNode.EMPTY_NODE;\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n            }\n            else {\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n            }\n        }\n        else {\n            const childKey = pathGetFront(changePath);\n            if (childKey === '.priority') {\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n                const oldEventNode = oldEventSnap.getNode();\n                serverNode = viewCache.serverCache.getNode();\n                // we might have overwrites for this priority\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n                if (updatedPriority != null) {\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n                }\n                else {\n                    // priority didn't change, keep old node\n                    newEventCache = oldEventSnap.getNode();\n                }\n            }\n            else {\n                const childChangePath = pathPopFront(changePath);\n                // update child\n                let newEventChild;\n                if (oldEventSnap.isCompleteForChild(childKey)) {\n                    serverNode = viewCache.serverCache.getNode();\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n                    if (eventChildUpdate != null) {\n                        newEventChild = oldEventSnap\n                            .getNode()\n                            .getImmediateChild(childKey)\n                            .updateChild(childChangePath, eventChildUpdate);\n                    }\n                    else {\n                        // Nothing changed, just keep the old child\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n                    }\n                }\n                else {\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n                }\n                if (newEventChild != null) {\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n                }\n                else {\n                    // no complete child available or no change\n                    newEventCache = oldEventSnap.getNode();\n                }\n            }\n        }\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n    }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n    const oldServerSnap = oldViewCache.serverCache;\n    let newServerCache;\n    const serverFilter = filterServerNode\n        ? viewProcessor.filter\n        : viewProcessor.filter.getIndexedFilter();\n    if (pathIsEmpty(changePath)) {\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n    }\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n        const newServerNode = oldServerSnap\n            .getNode()\n            .updateChild(changePath, changedSnap);\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n    }\n    else {\n        const childKey = pathGetFront(changePath);\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\n            pathGetLength(changePath) > 1) {\n            // We don't update incomplete nodes with updates intended for other listeners\n            return oldViewCache;\n        }\n        const childChangePath = pathPopFront(changePath);\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n        if (childKey === '.priority') {\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n        }\n        else {\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n        }\n    }\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n    const oldEventSnap = oldViewCache.eventCache;\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n    if (pathIsEmpty(changePath)) {\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n    }\n    else {\n        const childKey = pathGetFront(changePath);\n        if (childKey === '.priority') {\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n        }\n        else {\n            const childChangePath = pathPopFront(changePath);\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n            let newChild;\n            if (pathIsEmpty(childChangePath)) {\n                // Child overwrite, we can replace the child\n                newChild = changedSnap;\n            }\n            else {\n                const childNode = source.getCompleteChild(childKey);\n                if (childNode != null) {\n                    if (pathGetBack(childChangePath) === '.priority' &&\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n                        // This is a priority update on an empty node. If this node exists on the server, the\n                        // server will send down the priority in the update, so ignore for now\n                        newChild = childNode;\n                    }\n                    else {\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\n                    }\n                }\n                else {\n                    // There is no complete child node available\n                    newChild = ChildrenNode.EMPTY_NODE;\n                }\n            }\n            if (!oldChild.equals(newChild)) {\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n            }\n            else {\n                newViewCache = oldViewCache;\n            }\n        }\n    }\n    return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n    return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n        const writePath = pathChild(path, relativePath);\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n        }\n    });\n    changedChildren.foreach((relativePath, childNode) => {\n        const writePath = pathChild(path, relativePath);\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n        }\n    });\n    return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n    merge.foreach((relativePath, childNode) => {\n        node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (viewCache.serverCache.getNode().isEmpty() &&\n        !viewCache.serverCache.isFullyInitialized()) {\n        return viewCache;\n    }\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (pathIsEmpty(path)) {\n        viewMergeTree = changedChildren;\n    }\n    else {\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.serverCache.getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n        if (serverNode.hasChild(childKey)) {\n            const serverChild = viewCache.serverCache\n                .getNode()\n                .getImmediateChild(childKey);\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n        }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\n            childMergeTree.value === null;\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n            const serverChild = viewCache.serverCache\n                .getNode()\n                .getImmediateChild(childKey);\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n        }\n    });\n    return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n        return viewCache;\n    }\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.serverCache.isFiltered();\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.serverCache;\n    if (affectedTree.value != null) {\n        // This is an overwrite.\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n            serverCache.isCompleteForPath(ackPath)) {\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n        }\n        else if (pathIsEmpty(ackPath)) {\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n            // should just re-apply whatever we have in our cache as a merge.\n            let changedChildren = new ImmutableTree(null);\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n                changedChildren = changedChildren.set(new Path(name), node);\n            });\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n        }\n        else {\n            return viewCache;\n        }\n    }\n    else {\n        // This is a merge.\n        let changedChildren = new ImmutableTree(null);\n        affectedTree.foreach((mergePath, value) => {\n            const serverCachePath = pathChild(ackPath, mergePath);\n            if (serverCache.isCompleteForPath(serverCachePath)) {\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n            }\n        });\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n    const oldServerNode = viewCache.serverCache;\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n    let complete;\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n        return viewCache;\n    }\n    else {\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n        const oldEventCache = viewCache.eventCache.getNode();\n        let newEventCache;\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n            let newNode;\n            if (viewCache.serverCache.isFullyInitialized()) {\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n            }\n            else {\n                const serverChildren = viewCache.serverCache.getNode();\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n            }\n            newNode = newNode;\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n        }\n        else {\n            const childKey = pathGetFront(path);\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n            if (newChild == null &&\n                viewCache.serverCache.isCompleteForChild(childKey)) {\n                newChild = oldEventCache.getImmediateChild(childKey);\n            }\n            if (newChild != null) {\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n            }\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n                // No complete child available, delete the existing one, if any\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n            }\n            else {\n                newEventCache = oldEventCache;\n            }\n            if (newEventCache.isEmpty() &&\n                viewCache.serverCache.isFullyInitialized()) {\n                // We might have reverted all child writes. Maybe the old event was a leaf node\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n                if (complete.isLeafNode()) {\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n                }\n            }\n        }\n        complete =\n            viewCache.serverCache.isFullyInitialized() ||\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nclass View {\n    constructor(query_, initialViewCache) {\n        this.query_ = query_;\n        this.eventRegistrations_ = [];\n        const params = this.query_._queryParams;\n        const indexFilter = new IndexedFilter(params.getIndex());\n        const filter = queryParamsGetNodeFilter(params);\n        this.processor_ = newViewProcessor(filter);\n        const initialServerCache = initialViewCache.serverCache;\n        const initialEventCache = initialViewCache.eventCache;\n        // Don't filter server node with other filter than index, wait for tagged listen\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\n        this.eventGenerator_ = new EventGenerator(this.query_);\n    }\n    get query() {\n        return this.query_;\n    }\n}\nfunction viewGetServerCache(view) {\n    return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n    if (cache) {\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n        // we need to see if it contains the child we're interested in.\n        if (view.query._queryParams.loadsAllData() ||\n            (!pathIsEmpty(path) &&\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\n            return cache.getChild(path);\n        }\n    }\n    return null;\n}\nfunction viewIsEmpty(view) {\n    return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n    view.eventRegistrations_.push(eventRegistration);\n}\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n    const cancelEvents = [];\n    if (cancelError) {\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n        const path = view.query._path;\n        view.eventRegistrations_.forEach(registration => {\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\n            if (maybeEvent) {\n                cancelEvents.push(maybeEvent);\n            }\n        });\n    }\n    if (eventRegistration) {\n        let remaining = [];\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n            const existing = view.eventRegistrations_[i];\n            if (!existing.matches(eventRegistration)) {\n                remaining.push(existing);\n            }\n            else if (eventRegistration.hasAnyCallback()) {\n                // We're removing just this one\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n                break;\n            }\n        }\n        view.eventRegistrations_ = remaining;\n    }\n    else {\n        view.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n}\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n    if (operation.type === OperationType.MERGE &&\n        operation.source.queryId !== null) {\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n    }\n    const oldViewCache = view.viewCache_;\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    view.viewCache_ = result.viewCache;\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n    const eventSnap = view.viewCache_.eventCache;\n    const initialChanges = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n        const eventNode = eventSnap.getNode();\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            initialChanges.push(changeChildAdded(key, childNode));\n        });\n    }\n    if (eventSnap.isFullyInitialized()) {\n        initialChanges.push(changeValue(eventSnap.getNode()));\n    }\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n    const registrations = eventRegistration\n        ? [eventRegistration]\n        : view.eventRegistrations_;\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor$1;\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nclass SyncPoint {\n    constructor() {\n        /**\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\n         * queryId and the value is the View for that query.\n         *\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n         */\n        this.views = new Map();\n    }\n}\nfunction syncPointSetReferenceConstructor(val) {\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n    referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n    return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n    return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n        const view = syncPoint.views.get(queryId);\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n    }\n    else {\n        let events = [];\n        for (const view of syncPoint.views.values()) {\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n        }\n        return events;\n    }\n}\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n    const queryId = query._queryIdentifier;\n    const view = syncPoint.views.get(queryId);\n    if (!view) {\n        // TODO: make writesCache take flag for complete server node\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n        let eventCacheComplete = false;\n        if (eventCache) {\n            eventCacheComplete = true;\n        }\n        else if (serverCache instanceof ChildrenNode) {\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n            eventCacheComplete = false;\n        }\n        else {\n            eventCache = ChildrenNode.EMPTY_NODE;\n            eventCacheComplete = false;\n        }\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n        return new View(query, viewCache);\n    }\n    return view;\n}\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n    if (!syncPoint.views.has(query._queryIdentifier)) {\n        syncPoint.views.set(query._queryIdentifier, view);\n    }\n    // This is guaranteed to exist now, we just created anything that was missing\n    viewAddEventRegistration(view, eventRegistration);\n    return viewGetInitialEvents(view, eventRegistration);\n}\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n    const queryId = query._queryIdentifier;\n    const removed = [];\n    let cancelEvents = [];\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\n    if (queryId === 'default') {\n        // When you do ref.off(...), we search all views for the registration to remove.\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n            if (viewIsEmpty(view)) {\n                syncPoint.views.delete(viewQueryId);\n                // We'll deal with complete views later.\n                if (!view.query._queryParams.loadsAllData()) {\n                    removed.push(view.query);\n                }\n            }\n        }\n    }\n    else {\n        // remove the callback from the specific view.\n        const view = syncPoint.views.get(queryId);\n        if (view) {\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n            if (viewIsEmpty(view)) {\n                syncPoint.views.delete(queryId);\n                // We'll deal with complete views later.\n                if (!view.query._queryParams.loadsAllData()) {\n                    removed.push(view.query);\n                }\n            }\n        }\n    }\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n        // We removed our last complete view.\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n    }\n    return { removed, events: cancelEvents };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n    const result = [];\n    for (const view of syncPoint.views.values()) {\n        if (!view.query._queryParams.loadsAllData()) {\n            result.push(view);\n        }\n    }\n    return result;\n}\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n    let serverCache = null;\n    for (const view of syncPoint.views.values()) {\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\n    }\n    return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n    const params = query._queryParams;\n    if (params.loadsAllData()) {\n        return syncPointGetCompleteView(syncPoint);\n    }\n    else {\n        const queryId = query._queryIdentifier;\n        return syncPoint.views.get(queryId);\n    }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n    return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n    return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n    for (const view of syncPoint.views.values()) {\n        if (view.query._queryParams.loadsAllData()) {\n            return view;\n        }\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\n    referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\n    return referenceConstructor;\n}\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nclass SyncTree {\n    /**\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\n     *   to server data.\n     */\n    constructor(listenProvider_) {\n        this.listenProvider_ = listenProvider_;\n        /**\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n         */\n        this.syncPointTree_ = new ImmutableTree(null);\n        /**\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n         */\n        this.pendingWriteTree_ = newWriteTree();\n        this.tagToQueryMap = new Map();\n        this.queryToTagMap = new Map();\n    }\n}\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n    // Record pending write.\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n    if (!visible) {\n        return [];\n    }\n    else {\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n    }\n}\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n    // Record pending merge.\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n    if (!needToReevaluate) {\n        return [];\n    }\n    else {\n        let affectedTree = new ImmutableTree(null);\n        if (write.snap != null) {\n            // overwrite\n            affectedTree = affectedTree.set(newEmptyPath(), true);\n        }\n        else {\n            each(write.children, (pathString) => {\n                affectedTree = affectedTree.set(new Path(pathString), true);\n            });\n        }\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n    }\n}\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // We've already removed the query. No big deal, ignore the update\n        return [];\n    }\n}\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query._path;\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n    let cancelEvents = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (maybeSyncPoint &&\n        (query._queryIdentifier === 'default' ||\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n        if (syncPointIsEmpty(maybeSyncPoint)) {\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n        }\n        const removed = removedAndEvents.removed;\n        cancelEvents = removedAndEvents.events;\n        if (!skipListenerDedup) {\n            /**\n             * We may have just removed one of many listeners and can short-circuit this whole process\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n             * properly set up.\n             */\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n            // queryId === 'default'\n            const removingDefault = -1 !==\n                removed.findIndex(query => {\n                    return query._queryParams.loadsAllData();\n                });\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n            if (removingDefault && !covered) {\n                const subtree = syncTree.syncPointTree_.subtree(path);\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\n                // removal\n                if (!subtree.isEmpty()) {\n                    // We need to fold over our subtree and collect the listeners to send\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n                    // Ok, we've collected all the listens we need. Set them up.\n                    for (let i = 0; i < newViews.length; ++i) {\n                        const view = newViews[i], newQuery = view.query;\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\n                    }\n                }\n                // Otherwise there's nothing below us, so nothing we need to start listening on\n            }\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\n            if (!covered && removed.length > 0 && !cancelError) {\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n                // default. Otherwise, we need to iterate through and cancel each individual query\n                if (removingDefault) {\n                    // We don't tag default listeners\n                    const defaultTag = null;\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n                }\n                else {\n                    removed.forEach((queryToRemove) => {\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n                    });\n                }\n            }\n        }\n        // Now, clear all of the tags we're tracking for the removed listens\n        syncTreeRemoveTags_(syncTree, removed);\n    }\n    return cancelEvents;\n}\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey != null) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // Query must have been removed already\n        return [];\n    }\n}\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const changeTree = ImmutableTree.fromObject(changedChildren);\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // We've already removed the query. No big deal, ignore the update\n        return [];\n    }\n}\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\n    const path = query._path;\n    let serverCache = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n        const relativePath = newRelativePath(pathToSyncPoint, path);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n        foundAncestorDefaultView =\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\n    });\n    let syncPoint = syncTree.syncPointTree_.get(path);\n    if (!syncPoint) {\n        syncPoint = new SyncPoint();\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n    }\n    else {\n        foundAncestorDefaultView =\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let serverCacheComplete;\n    if (serverCache != null) {\n        serverCacheComplete = true;\n    }\n    else {\n        serverCacheComplete = false;\n        serverCache = ChildrenNode.EMPTY_NODE;\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        subtree.foreachChild((childName, childSyncPoint) => {\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n            if (completeCache) {\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\n            }\n        });\n    }\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n        // We need to track a tag for this query\n        const queryKey = syncTreeMakeQueryKey_(query);\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n        const tag = syncTreeGetNextQueryTag_();\n        syncTree.queryToTagMap.set(queryKey, tag);\n        syncTree.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n        const view = syncPointViewForQuery(syncPoint, query);\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n    }\n    return events;\n}\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n    const includeHiddenSets = true;\n    const writeTree = syncTree.pendingWriteTree_;\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n        const relativePath = newRelativePath(pathSoFar, path);\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n        if (serverCache) {\n            return serverCache;\n        }\n    });\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n    const path = query._path;\n    let serverCache = null;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n        const relativePath = newRelativePath(pathToSyncPoint, path);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    });\n    let syncPoint = syncTree.syncPointTree_.get(path);\n    if (!syncPoint) {\n        syncPoint = new SyncPoint();\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n    }\n    else {\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    const serverCacheComplete = serverCache != null;\n    const serverCacheNode = serverCacheComplete\n        ? new CacheNode(serverCache, true, false)\n        : null;\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n    return viewGetCompleteNode(view);\n}\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n    if (pathIsEmpty(operation.path)) {\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    }\n    else {\n        const syncPoint = syncPointTree.get(newEmptyPath());\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\n        if (serverCache == null && syncPoint != null) {\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n        }\n        let events = [];\n        const childName = pathGetFront(operation.path);\n        const childOperation = operation.operationForChild(childName);\n        const childTree = syncPointTree.children.get(childName);\n        if (childTree && childOperation) {\n            const childServerCache = serverCache\n                ? serverCache.getImmediateChild(childName)\n                : null;\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n        }\n        if (syncPoint) {\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n        }\n        return events;\n    }\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let events = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n        const childServerCache = serverCache\n            ? serverCache.getImmediateChild(childName)\n            : null;\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\n        const childOperation = operation.operationForChild(childName);\n        if (childOperation) {\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n        }\n    });\n    if (syncPoint) {\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n    const query = view.query;\n    const tag = syncTreeTagForQuery(syncTree, query);\n    return {\n        hashFn: () => {\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n            return cache.hash();\n        },\n        onComplete: (status) => {\n            if (status === 'ok') {\n                if (tag) {\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n                }\n                else {\n                    return syncTreeApplyListenComplete(syncTree, query._path);\n                }\n            }\n            else {\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n                const error = errorForServerCode(status, query);\n                return syncTreeRemoveEventRegistration(syncTree, query, \n                /*eventRegistration*/ null, error);\n            }\n        }\n    };\n}\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery(syncTree, query) {\n    const queryKey = syncTreeMakeQueryKey_(query);\n    return syncTree.queryToTagMap.get(queryKey);\n}\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query) {\n    return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n    return syncTree.tagToQueryMap.get(tag);\n}\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n    const splitIndex = queryKey.indexOf('$');\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n        queryId: queryKey.substr(splitIndex + 1),\n        path: new Path(queryKey.substr(0, splitIndex))\n    };\n}\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n            return [completeView];\n        }\n        else {\n            // No complete view here, flatten any deeper listens into an array\n            let views = [];\n            if (maybeChildSyncPoint) {\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\n            }\n            each(childMap, (_key, childViews) => {\n                views = views.concat(childViews);\n            });\n            return views;\n        }\n    });\n}\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query) {\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n        // We treat queries that load all data as default queries\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n        // from Query\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n    }\n    else {\n        return query;\n    }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n    for (let j = 0; j < queries.length; ++j) {\n        const removedQuery = queries[j];\n        if (!removedQuery._queryParams.loadsAllData()) {\n            // We should have a tag for this\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n            syncTree.queryToTagMap.delete(removedQueryKey);\n            syncTree.tagToQueryMap.delete(removedQueryTag);\n        }\n    }\n}\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_() {\n    return syncTreeNextQueryTag_++;\n}\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n    const path = query._path;\n    const tag = syncTreeTagForQuery(syncTree, query);\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n    }\n    else {\n        // Shadow everything at or below this location, this is a default listener.\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n            if (!pathIsEmpty(relativePath) &&\n                maybeChildSyncPoint &&\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n            }\n            else {\n                // No default listener here, flatten any deeper queries into an array\n                let queries = [];\n                if (maybeChildSyncPoint) {\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n                }\n                each(childMap, (_key, childQueries) => {\n                    queries = queries.concat(childQueries);\n                });\n                return queries;\n            }\n        });\n        for (let i = 0; i < queriesToStop.length; ++i) {\n            const queryToStop = queriesToStop[i];\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\n        }\n    }\n    return events;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ExistingValueProvider {\n    constructor(node_) {\n        this.node_ = node_;\n    }\n    getImmediateChild(childName) {\n        const child = this.node_.getImmediateChild(childName);\n        return new ExistingValueProvider(child);\n    }\n    node() {\n        return this.node_;\n    }\n}\nclass DeferredValueProvider {\n    constructor(syncTree, path) {\n        this.syncTree_ = syncTree;\n        this.path_ = path;\n    }\n    getImmediateChild(childName) {\n        const childPath = pathChild(this.path_, childName);\n        return new DeferredValueProvider(this.syncTree_, childPath);\n    }\n    node() {\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n    }\n}\n/**\n * Generate placeholders for deferred values.\n */\nconst generateWithValues = function (values) {\n    values = values || {};\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\n    return values;\n};\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n    if (!value || typeof value !== 'object') {\n        return value;\n    }\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    if (typeof value['.sv'] === 'string') {\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n    }\n    else if (typeof value['.sv'] === 'object') {\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\n    }\n    else {\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n    }\n};\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n    switch (op) {\n        case 'timestamp':\n            return serverValues['timestamp'];\n        default:\n            assert(false, 'Unexpected server value: ' + op);\n    }\n};\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n    if (!op.hasOwnProperty('increment')) {\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n    }\n    const delta = op['increment'];\n    if (typeof delta !== 'number') {\n        assert(false, 'Unexpected increment value: ' + delta);\n    }\n    const existingNode = existing.node();\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n    // Incrementing a non-number sets the value to the incremented amount\n    if (!existingNode.isLeafNode()) {\n        return delta;\n    }\n    const leaf = existingNode;\n    const existingVal = leaf.getValue();\n    if (typeof existingVal !== 'number') {\n        return delta;\n    }\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n    return existingVal + delta;\n};\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n    const rawPri = node.getPriority().val();\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n    let newNode;\n    if (node.isLeafNode()) {\n        const leafNode = node;\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n        if (value !== leafNode.getValue() ||\n            priority !== leafNode.getPriority().val()) {\n            return new LeafNode(value, nodeFromJSON(priority));\n        }\n        else {\n            return node;\n        }\n    }\n    else {\n        const childrenNode = node;\n        newNode = childrenNode;\n        if (priority !== childrenNode.getPriority().val()) {\n            newNode = newNode.updatePriority(new LeafNode(priority));\n        }\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n            if (newChildNode !== childNode) {\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\n            }\n        });\n        return newNode;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nclass Tree {\n    /**\n     * @param name - Optional name of the node.\n     * @param parent - Optional parent node.\n     * @param node - Optional node to wrap.\n     */\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\n        this.name = name;\n        this.parent = parent;\n        this.node = node;\n    }\n}\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nfunction treeSubTree(tree, pathObj) {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = tree, next = pathGetFront(path);\n    while (next !== null) {\n        const childNode = safeGet(child.node.children, next) || {\n            children: {},\n            childCount: 0\n        };\n        child = new Tree(next, child, childNode);\n        path = pathPopFront(path);\n        next = pathGetFront(path);\n    }\n    return child;\n}\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nfunction treeGetValue(tree) {\n    return tree.node.value;\n}\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nfunction treeSetValue(tree, value) {\n    tree.node.value = value;\n    treeUpdateParents(tree);\n}\n/**\n * @returns Whether the tree has any children.\n */\nfunction treeHasChildren(tree) {\n    return tree.node.childCount > 0;\n}\n/**\n * @returns Whether the tree is empty (no value or children).\n */\nfunction treeIsEmpty(tree) {\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nfunction treeForEachChild(tree, action) {\n    each(tree.node.children, (child, childTree) => {\n        action(new Tree(child, tree, childTree));\n    });\n}\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n    if (includeSelf && !childrenFirst) {\n        action(tree);\n    }\n    treeForEachChild(tree, child => {\n        treeForEachDescendant(child, action, true, childrenFirst);\n    });\n    if (includeSelf && childrenFirst) {\n        action(tree);\n    }\n}\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n    let node = includeSelf ? tree : tree.parent;\n    while (node !== null) {\n        if (action(node)) {\n            return true;\n        }\n        node = node.parent;\n    }\n    return false;\n}\n/**\n * @returns The path of this tree node, as a Path.\n */\nfunction treeGetPath(tree) {\n    return new Path(tree.parent === null\n        ? tree.name\n        : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents(tree) {\n    if (tree.parent !== null) {\n        treeUpdateChild(tree.parent, tree.name, tree);\n    }\n}\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild(tree, childName, child) {\n    const childEmpty = treeIsEmpty(child);\n    const childExists = contains(tree.node.children, childName);\n    if (childEmpty && childExists) {\n        delete tree.node.children[childName];\n        tree.node.childCount--;\n        treeUpdateParents(tree);\n    }\n    else if (!childEmpty && !childExists) {\n        tree.node.children[childName] = child.node;\n        tree.node.childCount++;\n        treeUpdateParents(tree);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * True for invalid Firebase keys\n */\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\n * Maximum number of characters to allow in leaf value\n */\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nconst isValidKey = function (key) {\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\n};\nconst isValidPathString = function (pathString) {\n    return (typeof pathString === 'string' &&\n        pathString.length !== 0 &&\n        !INVALID_PATH_REGEX_.test(pathString));\n};\nconst isValidRootPathString = function (pathString) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    return isValidPathString(pathString);\n};\nconst isValidPriority = function (priority) {\n    return (priority === null ||\n        typeof priority === 'string' ||\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n        (priority &&\n            typeof priority === 'object' &&\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            contains(priority, '.sv')));\n};\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n    if (optional && value === undefined) {\n        return;\n    }\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\n * Validate a data object client-side before sending to server.\n */\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n    if (data === undefined) {\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n    }\n    if (typeof data === 'function') {\n        throw new Error(errorPrefix +\n            'contains a function ' +\n            validationPathToErrorString(path) +\n            ' with contents = ' +\n            data.toString());\n    }\n    if (isInvalidJSONNumber(data)) {\n        throw new Error(errorPrefix +\n            'contains ' +\n            data.toString() +\n            ' ' +\n            validationPathToErrorString(path));\n    }\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\n    if (typeof data === 'string' &&\n        data.length > MAX_LEAF_SIZE_ / 3 &&\n        stringLength(data) > MAX_LEAF_SIZE_) {\n        throw new Error(errorPrefix +\n            'contains a string greater than ' +\n            MAX_LEAF_SIZE_ +\n            ' utf8 bytes ' +\n            validationPathToErrorString(path) +\n            \" ('\" +\n            data.substring(0, 50) +\n            \"...')\");\n    }\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n    // to save extra walking of large objects.\n    if (data && typeof data === 'object') {\n        let hasDotValue = false;\n        let hasActualChild = false;\n        each(data, (key, value) => {\n            if (key === '.value') {\n                hasDotValue = true;\n            }\n            else if (key !== '.priority' && key !== '.sv') {\n                hasActualChild = true;\n                if (!isValidKey(key)) {\n                    throw new Error(errorPrefix +\n                        ' contains an invalid key (' +\n                        key +\n                        ') ' +\n                        validationPathToErrorString(path) +\n                        '.  Keys must be non-empty strings ' +\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n                }\n            }\n            validationPathPush(path, key);\n            validateFirebaseData(errorPrefix, value, path);\n            validationPathPop(path);\n        });\n        if (hasDotValue && hasActualChild) {\n            throw new Error(errorPrefix +\n                ' contains \".value\" child ' +\n                validationPathToErrorString(path) +\n                ' in addition to actual children.');\n        }\n    }\n};\n/**\n * Pre-validate paths passed in the firebase function.\n */\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n    let i, curPath;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        const keys = pathSlice(curPath);\n        for (let j = 0; j < keys.length; j++) {\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\n            else if (!isValidKey(keys[j])) {\n                throw new Error(errorPrefix +\n                    'contains an invalid key (' +\n                    keys[j] +\n                    ') in path ' +\n                    curPath.toString() +\n                    '. Keys must be non-empty strings ' +\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n            }\n        }\n    }\n    // Check that update keys are not descendants of each other.\n    // We rely on the property that sorting guarantees that ancestors come\n    // right before descendants.\n    mergePaths.sort(pathCompare);\n    let prevPath = null;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\n            throw new Error(errorPrefix +\n                'contains a path ' +\n                prevPath.toString() +\n                ' that is ancestor of another path ' +\n                curPath.toString());\n        }\n        prevPath = curPath;\n    }\n};\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n    if (optional && data === undefined) {\n        return;\n    }\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n    }\n    const mergePaths = [];\n    each(data, (key, value) => {\n        const curPath = new Path(key);\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n        if (pathGetBack(curPath) === '.priority') {\n            if (!isValidPriority(value)) {\n                throw new Error(errorPrefix$1 +\n                    \"contains an invalid value for '\" +\n                    curPath.toString() +\n                    \"', which must be a valid \" +\n                    'Firebase priority (a string, finite number, server value, or null).');\n            }\n        }\n        mergePaths.push(curPath);\n    });\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nconst validatePriority = function (fnName, priority, optional) {\n    if (optional && priority === undefined) {\n        return;\n    }\n    if (isInvalidJSONNumber(priority)) {\n        throw new Error(errorPrefix(fnName, 'priority') +\n            'is ' +\n            priority.toString() +\n            ', but must be a valid Firebase priority (a string, finite number, ' +\n            'server value, or null).');\n    }\n    // Special case to allow importing data with a .sv.\n    if (!isValidPriority(priority)) {\n        throw new Error(errorPrefix(fnName, 'priority') +\n            'must be a valid Firebase priority ' +\n            '(a string, finite number, server value, or null).');\n    }\n};\nconst validateKey = function (fnName, argumentName, key, optional) {\n    if (optional && key === undefined) {\n        return;\n    }\n    if (!isValidKey(key)) {\n        throw new Error(errorPrefix(fnName, argumentName) +\n            'was an invalid key = \"' +\n            key +\n            '\".  Firebase keys must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n    }\n};\n/**\n * @internal\n */\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n    if (optional && pathString === undefined) {\n        return;\n    }\n    if (!isValidPathString(pathString)) {\n        throw new Error(errorPrefix(fnName, argumentName) +\n            'was an invalid path = \"' +\n            pathString +\n            '\". Paths must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n    }\n};\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\n * @internal\n */\nconst validateWritablePath = function (fnName, path) {\n    if (pathGetFront(path) === '.info') {\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n    }\n};\nconst validateUrl = function (fnName, parsedUrl) {\n    // TODO = Validate server better.\n    const pathString = parsedUrl.path.toString();\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\n        parsedUrl.repoInfo.host.length === 0 ||\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\n        throw new Error(errorPrefix(fnName, 'url') +\n            'must be a valid firebase URL and ' +\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nclass EventQueue {\n    constructor() {\n        this.eventLists_ = [];\n        /**\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n         */\n        this.recursionDepth_ = 0;\n    }\n}\n/**\n * @param eventDataList - The new events to queue.\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n        const data = eventDataList[i];\n        const path = data.getPath();\n        if (currList !== null && !pathEquals(path, currList.path)) {\n            eventQueue.eventLists_.push(currList);\n            currList = null;\n        }\n        if (currList === null) {\n            currList = { events: [], path };\n        }\n        currList.events.push(data);\n    }\n    if (currList) {\n        eventQueue.eventLists_.push(currList);\n    }\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n    eventQueueQueueEvents(eventQueue, eventDataList);\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n    eventQueueQueueEvents(eventQueue, eventDataList);\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\n        pathContains(changedPath, eventPath));\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n    eventQueue.recursionDepth_++;\n    let sentAll = true;\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n        const eventList = eventQueue.eventLists_[i];\n        if (eventList) {\n            const eventPath = eventList.path;\n            if (predicate(eventPath)) {\n                eventListRaise(eventQueue.eventLists_[i]);\n                eventQueue.eventLists_[i] = null;\n            }\n            else {\n                sentAll = false;\n            }\n        }\n    }\n    if (sentAll) {\n        eventQueue.eventLists_ = [];\n    }\n    eventQueue.recursionDepth_--;\n}\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList) {\n    for (let i = 0; i < eventList.events.length; i++) {\n        const eventData = eventList.events[i];\n        if (eventData !== null) {\n            eventList.events[i] = null;\n            const eventFn = eventData.getEventRunner();\n            if (logger) {\n                log('event: ' + eventData.toString());\n            }\n            exceptionGuard(eventFn);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\n * A connection to a single data repository.\n */\nclass Repo {\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n        this.repoInfo_ = repoInfo_;\n        this.forceRestClient_ = forceRestClient_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckProvider_ = appCheckProvider_;\n        this.dataUpdateCount = 0;\n        this.statsListener_ = null;\n        this.eventQueue_ = new EventQueue();\n        this.nextWriteId_ = 1;\n        this.interceptServerDataCallback_ = null;\n        /** A list of data pieces and paths to be set when this client disconnects. */\n        this.onDisconnect_ = newSparseSnapshotTree();\n        /** Stores queues of outstanding transactions for Firebase locations. */\n        this.transactionQueueTree_ = new Tree();\n        // TODO: This should be @private but it's used by test_access.js and internal.js\n        this.persistentConnection_ = null;\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\n        this.key = this.repoInfo_.toURLString();\n    }\n    /**\n     * @returns The URL corresponding to the root of this Firebase.\n     */\n    toString() {\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\n    }\n}\nfunction repoStart(repo, appId, authOverride) {\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n    if (repo.forceRestClient_ || beingCrawled()) {\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n    }\n    else {\n        // Validate authOverride\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\n            if (typeof authOverride !== 'object') {\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n            }\n            try {\n                stringify(authOverride);\n            }\n            catch (e) {\n                throw new Error('Invalid authOverride provided: ' + e);\n            }\n        }\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n        }, (connectStatus) => {\n            repoOnConnectStatus(repo, connectStatus);\n        }, (updates) => {\n            repoOnServerInfoUpdate(repo, updates);\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n        repo.server_ = repo.persistentConnection_;\n    }\n    repo.authTokenProvider_.addTokenChangeListener(token => {\n        repo.server_.refreshAuthToken(token);\n    });\n    repo.appCheckProvider_.addTokenChangeListener(result => {\n        repo.server_.refreshAppCheckToken(result.token);\n    });\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\n    // Used for .info.\n    repo.infoData_ = new SnapshotHolder();\n    repo.infoSyncTree_ = new SyncTree({\n        startListening: (query, tag, currentHashFn, onComplete) => {\n            let infoEvents = [];\n            const node = repo.infoData_.getNode(query._path);\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n            // on initial data...\n            if (!node.isEmpty()) {\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n                setTimeout(() => {\n                    onComplete('ok');\n                }, 0);\n            }\n            return infoEvents;\n        },\n        stopListening: () => { }\n    });\n    repoUpdateInfo(repo, 'connected', false);\n    repo.serverSyncTree_ = new SyncTree({\n        startListening: (query, tag, currentHashFn, onComplete) => {\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n                const events = onComplete(status, data);\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n            });\n            // No synchronous events for network-backed sync trees\n            return [];\n        },\n        stopListening: (query, tag) => {\n            repo.server_.unlisten(query, tag);\n        }\n    });\n}\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nfunction repoServerTime(repo) {\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n    const offset = offsetNode.val() || 0;\n    return new Date().getTime() + offset;\n}\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nfunction repoGenerateServerValues(repo) {\n    return generateWithValues({\n        timestamp: repoServerTime(repo)\n    });\n}\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n    // For testing.\n    repo.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = repo.interceptServerDataCallback_\n        ? repo.interceptServerDataCallback_(pathString, data)\n        : data;\n    let events = [];\n    if (tag) {\n        if (isMerge) {\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n        }\n        else {\n            const taggedSnap = nodeFromJSON(data);\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n        }\n    }\n    else if (isMerge) {\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n    }\n    else {\n        const snap = nodeFromJSON(data);\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n        // Since we have a listener outstanding for each transaction, receiving any events\n        // is a proxy for some change having occurred.\n        affectedPath = repoRerunTransactions(repo, path);\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n    repoUpdateInfo(repo, 'connected', connectStatus);\n    if (connectStatus === false) {\n        repoRunOnDisconnectEvents(repo);\n    }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n    each(updates, (key, value) => {\n        repoUpdateInfo(repo, key, value);\n    });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    repo.infoData_.updateSnapshot(path, newNode);\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n    return repo.nextWriteId_++;\n}\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nfunction repoGetValue(repo, query, eventRegistration) {\n    // Only active queries are cached. There is no persisted cache.\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n    if (cached != null) {\n        return Promise.resolve(cached);\n    }\n    return repo.server_.get(query).then(payload => {\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n        /**\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n         * Add an event registration,\n         * Update data at the path,\n         * Raise any events,\n         * Cleanup the SyncTree\n         */\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\n        let events;\n        if (query._queryParams.loadsAllData()) {\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n        }\n        else {\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n        }\n        /*\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n         * ensure the corresponding child events will get fired.\n         */\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\n        return node;\n    }, err => {\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n        return Promise.reject(new Error(err));\n    });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n    repoLog(repo, 'set', {\n        path: path.toString(),\n        value: newVal,\n        priority: newPriority\n    });\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n            warn('set at ' + path + ' failed: ' + status);\n        }\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = repoGenerateServerValues(repo);\n    const changedChildren = {};\n    each(childrenToMerge, (changedKey, changedValue) => {\n        empty = false;\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n    });\n    if (!empty) {\n        const writeId = repoGetNextWriteId(repo);\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n        eventQueueQueueEvents(repo.eventQueue_, events);\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n            const success = status === 'ok';\n            if (!success) {\n                warn('update at ' + path + ' failed: ' + status);\n            }\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n        });\n        each(childrenToMerge, (changedPath) => {\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n            repoRerunTransactions(repo, affectedPath);\n        });\n        // We queued the events above, so just flush the queue here\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n    }\n    else {\n        log(\"update() called with empty data.  Don't do anything.\");\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    }\n}\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo) {\n    repoLog(repo, 'onDisconnectEvents');\n    const serverValues = repoGenerateServerValues(repo);\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    });\n    let events = [];\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n        const affectedPath = repoAbortTransactions(repo, path);\n        repoRerunTransactions(repo, affectedPath);\n    });\n    repo.onDisconnect_ = newSparseSnapshotTree();\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n    const newNode = nodeFromJSON(value);\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n    const newNode = nodeFromJSON(value, priority);\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n    if (isEmpty(childrenToMerge)) {\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n        return;\n    }\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n        if (status === 'ok') {\n            each(childrenToMerge, (childName, childNode) => {\n                const newChildNode = nodeFromJSON(childNode);\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n            });\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n    let events;\n    if (pathGetFront(query._path) === '.info') {\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n    }\n    else {\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n    }\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (pathGetFront(query._path) === '.info') {\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n    }\n    else {\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n    }\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n    if (repo.persistentConnection_) {\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n}\nfunction repoResume(repo) {\n    if (repo.persistentConnection_) {\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n}\nfunction repoLog(repo, ...varArgs) {\n    let prefix = '';\n    if (repo.persistentConnection_) {\n        prefix = repo.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n    if (callback) {\n        exceptionGuard(() => {\n            if (status === 'ok') {\n                callback(null);\n            }\n            else {\n                const code = (status || 'error').toUpperCase();\n                let message = code;\n                if (errorReason) {\n                    message += ': ' + errorReason;\n                }\n                const error = new Error(message);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                error.code = code;\n                callback(error);\n            }\n        });\n    }\n}\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n    repoLog(repo, 'transaction on ' + path);\n    // Initialize transaction.\n    const transaction = {\n        path,\n        update: transactionUpdate,\n        onComplete,\n        // One of TransactionStatus enums.\n        status: null,\n        // Used when combining transactions at different locations to figure out\n        // which one goes first.\n        order: LUIDGenerator(),\n        // Whether to raise local events for this transaction.\n        applyLocally,\n        // Count of how many times we've retried the transaction.\n        retryCount: 0,\n        // Function to call to clean up our .on() listener.\n        unwatcher,\n        // Stores why a transaction was aborted.\n        abortReason: null,\n        currentWriteId: null,\n        currentInputSnapshot: null,\n        currentOutputSnapshotRaw: null,\n        currentOutputSnapshotResolved: null\n    };\n    // Run transaction initially.\n    const currentState = repoGetLatestState(repo, path, undefined);\n    transaction.currentInputSnapshot = currentState;\n    const newVal = transaction.update(currentState.val());\n    if (newVal === undefined) {\n        // Abort transaction.\n        transaction.unwatcher();\n        transaction.currentOutputSnapshotRaw = null;\n        transaction.currentOutputSnapshotResolved = null;\n        if (transaction.onComplete) {\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\n        }\n    }\n    else {\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n        // Mark as run and add to our queue.\n        transaction.status = 0 /* TransactionStatus.RUN */;\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n        const nodeQueue = treeGetValue(queueNode) || [];\n        nodeQueue.push(transaction);\n        treeSetValue(queueNode, nodeQueue);\n        // Update visibleData and raise events\n        // Note: We intentionally raise events after updating all of our\n        // transaction state, since the user could start new transactions from the\n        // event callbacks.\n        let priorityForNode;\n        if (typeof newVal === 'object' &&\n            newVal !== null &&\n            contains(newVal, '.priority')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            priorityForNode = safeGet(newVal, '.priority');\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\n                'Priority must be a valid string, finite number, server value, or null.');\n        }\n        else {\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n                ChildrenNode.EMPTY_NODE;\n            priorityForNode = currentNode.getPriority().val();\n        }\n        const serverValues = repoGenerateServerValues(repo);\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n        transaction.currentOutputSnapshotResolved = newNode;\n        transaction.currentWriteId = repoGetNextWriteId(repo);\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n    }\n}\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n        ChildrenNode.EMPTY_NODE);\n}\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\n    // Before recursing, make sure any completed transactions are removed.\n    if (!node) {\n        repoPruneCompletedTransactionsBelowNode(repo, node);\n    }\n    if (treeGetValue(node)) {\n        const queue = repoBuildTransactionQueue(repo, node);\n        assert(queue.length > 0, 'Sending zero length transaction queue');\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\n        if (allRun) {\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\n        }\n    }\n    else if (treeHasChildren(node)) {\n        treeForEachChild(node, childNode => {\n            repoSendReadyTransactions(repo, childNode);\n        });\n    }\n}\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n    // Mark transactions as sent and increment retry count!\n    const setsToIgnore = queue.map(txn => {\n        return txn.currentWriteId;\n    });\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\n    let snapToSend = latestState;\n    const latestHash = latestState.hash();\n    for (let i = 0; i < queue.length; i++) {\n        const txn = queue[i];\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n        txn.status = 1 /* TransactionStatus.SENT */;\n        txn.retryCount++;\n        const relativePath = newRelativePath(path, txn.path);\n        // If we've gotten to this point, the output snapshot must be defined.\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n    }\n    const dataToSend = snapToSend.val(true);\n    const pathToSend = path;\n    // Send the put.\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\n        repoLog(repo, 'transaction put response', {\n            path: pathToSend.toString(),\n            status\n        });\n        let events = [];\n        if (status === 'ok') {\n            // Queue up the callbacks and fire them after cleaning up all of our\n            // transaction state, since the callback could trigger more\n            // transactions or sets.\n            const callbacks = [];\n            for (let i = 0; i < queue.length; i++) {\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n                if (queue[i].onComplete) {\n                    // We never unset the output snapshot, and given that this\n                    // transaction is complete, it should be set\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n                }\n                queue[i].unwatcher();\n            }\n            // Now remove the completed transactions.\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n            // There may be pending transactions that we can now send.\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n            // Finally, trigger onComplete callbacks.\n            for (let i = 0; i < callbacks.length; i++) {\n                exceptionGuard(callbacks[i]);\n            }\n        }\n        else {\n            // transactions are no longer sent.  Update their status appropriately.\n            if (status === 'datastale') {\n                for (let i = 0; i < queue.length; i++) {\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n                    }\n                    else {\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\n                    }\n                }\n            }\n            else {\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n                for (let i = 0; i < queue.length; i++) {\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n                    queue[i].abortReason = status;\n                }\n            }\n            repoRerunTransactions(repo, path);\n        }\n    }, latestHash);\n}\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo, changedPath) {\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n    const path = treeGetPath(rootMostTransactionNode);\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n    repoRerunTransactionQueue(repo, queue, path);\n    return path;\n}\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n    if (queue.length === 0) {\n        return; // Nothing to do!\n    }\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions or\n    // sets.\n    const callbacks = [];\n    let events = [];\n    // Ignore all of the sets we're going to re-run.\n    const txnsToRerun = queue.filter(q => {\n        return q.status === 0 /* TransactionStatus.RUN */;\n    });\n    const setsToIgnore = txnsToRerun.map(q => {\n        return q.currentWriteId;\n    });\n    for (let i = 0; i < queue.length; i++) {\n        const transaction = queue[i];\n        const relativePath = newRelativePath(path, transaction.path);\n        let abortTransaction = false, abortReason;\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\n            abortTransaction = true;\n            abortReason = transaction.abortReason;\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n                abortTransaction = true;\n                abortReason = 'maxretry';\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n            }\n            else {\n                // This code reruns a transaction\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n                transaction.currentInputSnapshot = currentNode;\n                const newData = queue[i].update(currentNode.val());\n                if (newData !== undefined) {\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n                    let newDataNode = nodeFromJSON(newData);\n                    const hasExplicitPriority = typeof newData === 'object' &&\n                        newData != null &&\n                        contains(newData, '.priority');\n                    if (!hasExplicitPriority) {\n                        // Keep the old priority if there wasn't a priority explicitly specified.\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n                    }\n                    const oldWriteId = transaction.currentWriteId;\n                    const serverValues = repoGenerateServerValues(repo);\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n                    transaction.currentOutputSnapshotRaw = newDataNode;\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\n                    // Mutates setsToIgnore in place\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n                }\n                else {\n                    abortTransaction = true;\n                    abortReason = 'nodata';\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n                }\n            }\n        }\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n        events = [];\n        if (abortTransaction) {\n            // Abort.\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n            // Removing a listener can trigger pruning which can muck with\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\n            // until we're done.\n            (function (unwatcher) {\n                setTimeout(unwatcher, Math.floor(0));\n            })(queue[i].unwatcher);\n            if (queue[i].onComplete) {\n                if (abortReason === 'nodata') {\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n                }\n                else {\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n                }\n            }\n        }\n    }\n    // Clean up completed transactions.\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n    // Now fire callbacks, now that we're in a good, known state.\n    for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n    }\n    // Try to send the transaction result to the server.\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n    let front;\n    // Start at the root and walk deeper into the tree towards path until we\n    // find a node with pending transactions.\n    let transactionNode = repo.transactionQueueTree_;\n    front = pathGetFront(path);\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\n        transactionNode = treeSubTree(transactionNode, front);\n        path = pathPopFront(path);\n        front = pathGetFront(path);\n    }\n    return transactionNode;\n}\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n    // Walk any child transaction queues and aggregate them into a single queue.\n    const transactionQueue = [];\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n    // Sort them by the order the transactions were created.\n    transactionQueue.sort((a, b) => a.order - b.order);\n    return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n    const nodeQueue = treeGetValue(node);\n    if (nodeQueue) {\n        for (let i = 0; i < nodeQueue.length; i++) {\n            queue.push(nodeQueue[i]);\n        }\n    }\n    treeForEachChild(node, child => {\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\n    });\n}\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n    const queue = treeGetValue(node);\n    if (queue) {\n        let to = 0;\n        for (let from = 0; from < queue.length; from++) {\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\n                queue[to] = queue[from];\n                to++;\n            }\n        }\n        queue.length = to;\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\n    }\n    treeForEachChild(node, childNode => {\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\n    });\n}\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo, path) {\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n    treeForEachAncestor(transactionNode, (node) => {\n        repoAbortTransactionsOnNode(repo, node);\n    });\n    repoAbortTransactionsOnNode(repo, transactionNode);\n    treeForEachDescendant(transactionNode, (node) => {\n        repoAbortTransactionsOnNode(repo, node);\n    });\n    return affectedPath;\n}\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n    const queue = treeGetValue(node);\n    if (queue) {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more transactions\n        // or sets.\n        const callbacks = [];\n        // Go through queue.  Any already-sent transactions must be marked for\n        // abort, while the unsent ones can be immediately aborted and removed.\n        let events = [];\n        let lastSent = -1;\n        for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n                lastSent = i;\n                // Mark transaction for abort when it comes back.\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\n                queue[i].abortReason = 'set';\n            }\n            else {\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\n                // We can abort it immediately.\n                queue[i].unwatcher();\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n                if (queue[i].onComplete) {\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n                }\n            }\n        }\n        if (lastSent === -1) {\n            // We're not waiting for any sent transactions.  We can clear the queue.\n            treeSetValue(node, undefined);\n        }\n        else {\n            // Remove the transactions we aborted.\n            queue.length = lastSent + 1;\n        }\n        // Now fire the callbacks.\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n        for (let i = 0; i < callbacks.length; i++) {\n            exceptionGuard(callbacks[i]);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction decodePath(pathString) {\n    let pathStringDecoded = '';\n    const pieces = pathString.split('/');\n    for (let i = 0; i < pieces.length; i++) {\n        if (pieces[i].length > 0) {\n            let piece = pieces[i];\n            try {\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n            }\n            catch (e) { }\n            pathStringDecoded += '/' + piece;\n        }\n    }\n    return pathStringDecoded;\n}\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString) {\n    const results = {};\n    if (queryString.charAt(0) === '?') {\n        queryString = queryString.substring(1);\n    }\n    for (const segment of queryString.split('&')) {\n        if (segment.length === 0) {\n            continue;\n        }\n        const kv = segment.split('=');\n        if (kv.length === 2) {\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n        }\n        else {\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n        }\n    }\n    return results;\n}\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\n    if (parsedUrl.domain === 'firebase.com') {\n        fatal(parsedUrl.host +\n            ' is no longer supported. ' +\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\n    }\n    // Catch common error of uninitialized namespace value.\n    if ((!namespace || namespace === 'undefined') &&\n        parsedUrl.domain !== 'localhost') {\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n    }\n    if (!parsedUrl.secure) {\n        warnIfPageIsSecure();\n    }\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n    return {\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \n        /*persistenceKey=*/ '', \n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\n        path: new Path(parsedUrl.pathString)\n    };\n};\nconst parseDatabaseURL = function (dataURL) {\n    // Default to empty strings in the event of a malformed string.\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\n    // Always default to SSL, unless otherwise specified.\n    let secure = true, scheme = 'https', port = 443;\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\n    if (typeof dataURL === 'string') {\n        // Parse scheme.\n        let colonInd = dataURL.indexOf('//');\n        if (colonInd >= 0) {\n            scheme = dataURL.substring(0, colonInd - 1);\n            dataURL = dataURL.substring(colonInd + 2);\n        }\n        // Parse host, path, and query string.\n        let slashInd = dataURL.indexOf('/');\n        if (slashInd === -1) {\n            slashInd = dataURL.length;\n        }\n        let questionMarkInd = dataURL.indexOf('?');\n        if (questionMarkInd === -1) {\n            questionMarkInd = dataURL.length;\n        }\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n        if (slashInd < questionMarkInd) {\n            // For pathString, questionMarkInd will always come after slashInd\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n        }\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n        // If we have a port, use scheme for determining if it's secure.\n        colonInd = host.indexOf(':');\n        if (colonInd >= 0) {\n            secure = scheme === 'https' || scheme === 'wss';\n            port = parseInt(host.substring(colonInd + 1), 10);\n        }\n        else {\n            colonInd = host.length;\n        }\n        const hostWithoutPort = host.slice(0, colonInd);\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\n            domain = 'localhost';\n        }\n        else if (hostWithoutPort.split('.').length <= 2) {\n            domain = hostWithoutPort;\n        }\n        else {\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\n            const dotInd = host.indexOf('.');\n            subdomain = host.substring(0, dotInd).toLowerCase();\n            domain = host.substring(dotInd + 1);\n            // Normalize namespaces to lowercase to share storage / connection.\n            namespace = subdomain;\n        }\n        // Always treat the value of the `ns` as the namespace name if it is present.\n        if ('ns' in queryParams) {\n            namespace = queryParams['ns'];\n        }\n    }\n    return {\n        host,\n        port,\n        domain,\n        subdomain,\n        secure,\n        scheme,\n        pathString,\n        namespace\n    };\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nconst nextPushId = (function () {\n    // Timestamp of last push, used to prevent local collisions if you push twice\n    // in one ms.\n    let lastPushTime = 0;\n    // We generate 72-bits of randomness which get turned into 12 characters and\n    // appended to the timestamp to prevent collisions with other clients. We\n    // store the last characters we generated because in the event of a collision,\n    // we'll use those same characters except \"incremented\" by one.\n    const lastRandChars = [];\n    return function (now) {\n        const duplicateTime = now === lastPushTime;\n        lastPushTime = now;\n        let i;\n        const timeStampChars = new Array(8);\n        for (i = 7; i >= 0; i--) {\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n            // NOTE: Can't use << here because javascript will convert to int and lose\n            // the upper bits.\n            now = Math.floor(now / 64);\n        }\n        assert(now === 0, 'Cannot push at time == 0');\n        let id = timeStampChars.join('');\n        if (!duplicateTime) {\n            for (i = 0; i < 12; i++) {\n                lastRandChars[i] = Math.floor(Math.random() * 64);\n            }\n        }\n        else {\n            // If the timestamp hasn't changed since last push, use the same random\n            // number, except incremented by 1.\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n                lastRandChars[i] = 0;\n            }\n            lastRandChars[i]++;\n        }\n        for (i = 0; i < 12; i++) {\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\n        }\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\n        return id;\n    };\n})();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Encapsulates the data needed to raise an event\n */\nclass DataEvent {\n    /**\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n     * @param eventRegistration - The function to call to with the event data. User provided\n     * @param snapshot - The data backing the event\n     * @param prevName - Optional, the name of the previous child for child_* events.\n     */\n    constructor(eventType, eventRegistration, snapshot, prevName) {\n        this.eventType = eventType;\n        this.eventRegistration = eventRegistration;\n        this.snapshot = snapshot;\n        this.prevName = prevName;\n    }\n    getPath() {\n        const ref = this.snapshot.ref;\n        if (this.eventType === 'value') {\n            return ref._path;\n        }\n        else {\n            return ref.parent._path;\n        }\n    }\n    getEventType() {\n        return this.eventType;\n    }\n    getEventRunner() {\n        return this.eventRegistration.getEventRunner(this);\n    }\n    toString() {\n        return (this.getPath().toString() +\n            ':' +\n            this.eventType +\n            ':' +\n            stringify(this.snapshot.exportVal()));\n    }\n}\nclass CancelEvent {\n    constructor(eventRegistration, error, path) {\n        this.eventRegistration = eventRegistration;\n        this.error = error;\n        this.path = path;\n    }\n    getPath() {\n        return this.path;\n    }\n    getEventType() {\n        return 'cancel';\n    }\n    getEventRunner() {\n        return this.eventRegistration.getEventRunner(this);\n    }\n    toString() {\n        return this.path.toString() + ':cancel';\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nclass CallbackContext {\n    constructor(snapshotCallback, cancelCallback) {\n        this.snapshotCallback = snapshotCallback;\n        this.cancelCallback = cancelCallback;\n    }\n    onValue(expDataSnapshot, previousChildName) {\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n    }\n    onCancel(error) {\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n        return this.cancelCallback.call(null, error);\n    }\n    get hasCancelCallback() {\n        return !!this.cancelCallback;\n    }\n    matches(other) {\n        return (this.snapshotCallback === other.snapshotCallback ||\n            (this.snapshotCallback.userCallback !== undefined &&\n                this.snapshotCallback.userCallback ===\n                    other.snapshotCallback.userCallback &&\n                this.snapshotCallback.context === other.snapshotCallback.context));\n    }\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nclass OnDisconnect {\n    /** @hideconstructor */\n    constructor(_repo, _path) {\n        this._repo = _repo;\n        this._path = _path;\n    }\n    /**\n     * Cancels all previously queued `onDisconnect()` set or update events for this\n     * location and all children.\n     *\n     * If a write has been queued for this location via a `set()` or `update()` at a\n     * parent location, the write at this location will be canceled, though writes\n     * to sibling locations will still occur.\n     *\n     * @returns Resolves when synchronization to the server is complete.\n     */\n    cancel() {\n        const deferred = new Deferred();\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is deleted when the client is disconnected\n     * (due to closing the browser, navigating to a new page, or network issues).\n     *\n     * @returns Resolves when synchronization to the server is complete.\n     */\n    remove() {\n        validateWritablePath('OnDisconnect.remove', this._path);\n        const deferred = new Deferred();\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is set to the specified value when the\n     * client is disconnected (due to closing the browser, navigating to a new page,\n     * or network issues).\n     *\n     * `set()` is especially useful for implementing \"presence\" systems, where a\n     * value should be changed or cleared when a user disconnects so that they\n     * appear \"offline\" to other users. See\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n     * for more information.\n     *\n     * Note that `onDisconnect` operations are only triggered once. If you want an\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\n     * the `onDisconnect` operations each time.\n     *\n     * @param value - The value to be written to this location on disconnect (can\n     * be an object, array, string, number, boolean, or null).\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    set(value) {\n        validateWritablePath('OnDisconnect.set', this._path);\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n        const deferred = new Deferred();\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is set to the specified value and priority\n     * when the client is disconnected (due to closing the browser, navigating to a\n     * new page, or network issues).\n     *\n     * @param value - The value to be written to this location on disconnect (can\n     * be an object, array, string, number, boolean, or null).\n     * @param priority - The priority to be written (string, number, or null).\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    setWithPriority(value, priority) {\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\n        const deferred = new Deferred();\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Writes multiple values at this location when the client is disconnected (due\n     * to closing the browser, navigating to a new page, or network issues).\n     *\n     * The `values` argument contains multiple property-value pairs that will be\n     * written to the Database together. Each child property can either be a simple\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\n     * from the current location to the data to update.\n     *\n     * As opposed to the `set()` method, `update()` can be use to selectively update\n     * only the referenced properties at the current location (instead of replacing\n     * all the child properties at the current location).\n     *\n     * @param values - Object containing multiple values.\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    update(values) {\n        validateWritablePath('OnDisconnect.update', this._path);\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n        const deferred = new Deferred();\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nclass QueryImpl {\n    /**\n     * @hideconstructor\n     */\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\n        this._repo = _repo;\n        this._path = _path;\n        this._queryParams = _queryParams;\n        this._orderByCalled = _orderByCalled;\n    }\n    get key() {\n        if (pathIsEmpty(this._path)) {\n            return null;\n        }\n        else {\n            return pathGetBack(this._path);\n        }\n    }\n    get ref() {\n        return new ReferenceImpl(this._repo, this._path);\n    }\n    get _queryIdentifier() {\n        const obj = queryParamsGetQueryObject(this._queryParams);\n        const id = ObjectToUniqueKey(obj);\n        return id === '{}' ? 'default' : id;\n    }\n    /**\n     * An object representation of the query parameters used by this Query.\n     */\n    get _queryObject() {\n        return queryParamsGetQueryObject(this._queryParams);\n    }\n    isEqual(other) {\n        other = getModularInstance(other);\n        if (!(other instanceof QueryImpl)) {\n            return false;\n        }\n        const sameRepo = this._repo === other._repo;\n        const samePath = pathEquals(this._path, other._path);\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n        return sameRepo && samePath && sameQueryIdentifier;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toString() {\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\n    }\n}\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n    if (query._orderByCalled === true) {\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n}\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n        startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n        endNode = params.getIndexEndValue();\n    }\n    if (params.getIndex() === KEY_INDEX) {\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\n            'startAt(), endAt(), or equalTo().';\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n            'endAt(), endBefore(), or equalTo() must be a string.';\n        if (params.hasStart()) {\n            const startName = params.getIndexStartName();\n            if (startName !== MIN_NAME) {\n                throw new Error(tooManyArgsError);\n            }\n            else if (typeof startNode !== 'string') {\n                throw new Error(wrongArgTypeError);\n            }\n        }\n        if (params.hasEnd()) {\n            const endName = params.getIndexEndName();\n            if (endName !== MAX_NAME) {\n                throw new Error(tooManyArgsError);\n            }\n            else if (typeof endNode !== 'string') {\n                throw new Error(wrongArgTypeError);\n            }\n        }\n    }\n    else if (params.getIndex() === PRIORITY_INDEX) {\n        if ((startNode != null && !isValidPriority(startNode)) ||\n            (endNode != null && !isValidPriority(endNode))) {\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n                '(null, a number, or a string).');\n        }\n    }\n    else {\n        assert(params.getIndex() instanceof PathIndex ||\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\n        if ((startNode != null && typeof startNode === 'object') ||\n            (endNode != null && typeof endNode === 'object')) {\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n                'equalTo() cannot be an object.');\n        }\n    }\n}\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params) {\n    if (params.hasStart() &&\n        params.hasEnd() &&\n        params.hasLimit() &&\n        !params.hasAnchoredLimit()) {\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n            'limitToFirst() or limitToLast() instead.');\n    }\n}\n/**\n * @internal\n */\nclass ReferenceImpl extends QueryImpl {\n    /** @hideconstructor */\n    constructor(repo, path) {\n        super(repo, path, new QueryParams(), false);\n    }\n    get parent() {\n        const parentPath = pathParent(this._path);\n        return parentPath === null\n            ? null\n            : new ReferenceImpl(this._repo, parentPath);\n    }\n    get root() {\n        let ref = this;\n        while (ref.parent !== null) {\n            ref = ref.parent;\n        }\n        return ref;\n    }\n}\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nclass DataSnapshot {\n    /**\n     * @param _node - A SnapshotNode to wrap.\n     * @param ref - The location this snapshot came from.\n     * @param _index - The iteration order for this snapshot\n     * @hideconstructor\n     */\n    constructor(_node, \n    /**\n     * The location of this DataSnapshot.\n     */\n    ref, _index) {\n        this._node = _node;\n        this.ref = ref;\n        this._index = _index;\n    }\n    /**\n     * Gets the priority value of the data in this `DataSnapshot`.\n     *\n     * Applications need not use priority but can order collections by\n     * ordinary properties (see\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n     * ).\n     */\n    get priority() {\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n        return this._node.getPriority().val();\n    }\n    /**\n     * The key (last part of the path) of the location of this `DataSnapshot`.\n     *\n     * The last token in a Database location is considered its key. For example,\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n     * `DataSnapshot` will return the key for the location that generated it.\n     * However, accessing the key on the root URL of a Database will return\n     * `null`.\n     */\n    get key() {\n        return this.ref.key;\n    }\n    /** Returns the number of child properties of this `DataSnapshot`. */\n    get size() {\n        return this._node.numChildren();\n    }\n    /**\n     * Gets another `DataSnapshot` for the location at the specified relative path.\n     *\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\n     * another `DataSnapshot` for the location at the specified relative path. The\n     * relative path can either be a simple child name (for example, \"ada\") or a\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n     * whose value is `null`) is returned.\n     *\n     * @param path - A relative path to the location of child data.\n     */\n    child(path) {\n        const childPath = new Path(path);\n        const childRef = child(this.ref, path);\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n    }\n    /**\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\n     * efficient than using `snapshot.val() !== null`.\n     */\n    exists() {\n        return !this._node.isEmpty();\n    }\n    /**\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\n     *\n     * The `exportVal()` method is similar to `val()`, except priority information\n     * is included (if available), making it suitable for backing up your data.\n     *\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    exportVal() {\n        return this._node.val(true);\n    }\n    /**\n     * Enumerates the top-level children in the `IteratedDataSnapshot`.\n     *\n     * Because of the way JavaScript objects work, the ordering of data in the\n     * JavaScript object returned by `val()` is not guaranteed to match the\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\n     * where `forEach()` comes in handy. It guarantees the children of a\n     * `DataSnapshot` will be iterated in their query order.\n     *\n     * If no explicit `orderBy*()` method is used, results are returned\n     * ordered by key (unless priorities are used, in which case, results are\n     * returned by priority).\n     *\n     * @param action - A function that will be called for each child DataSnapshot.\n     * The callback can return true to cancel further enumeration.\n     * @returns true if enumeration was canceled due to your callback returning\n     * true.\n     */\n    forEach(action) {\n        if (this._node.isLeafNode()) {\n            return false;\n        }\n        const childrenNode = this._node;\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n        });\n    }\n    /**\n     * Returns true if the specified child path has (non-null) data.\n     *\n     * @param path - A relative path to the location of a potential child.\n     * @returns `true` if data exists at the specified child path; else\n     *  `false`.\n     */\n    hasChild(path) {\n        const childPath = new Path(path);\n        return !this._node.getChild(childPath).isEmpty();\n    }\n    /**\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\n     * properties.\n     *\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n     * children. If it does, you can enumerate them using `forEach()`. If it\n     * doesn't, then either this snapshot contains a primitive value (which can be\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\n     * `null`).\n     *\n     * @returns true if this snapshot has any children; else false.\n     */\n    hasChildren() {\n        if (this._node.isLeafNode()) {\n            return false;\n        }\n        else {\n            return !this._node.isEmpty();\n        }\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return this.exportVal();\n    }\n    /**\n     * Extracts a JavaScript value from a `DataSnapshot`.\n     *\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n     * scalar type (string, number, or boolean), an array, or an object. It may\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\n     * data).\n     *\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    val() {\n        return this._node.val();\n    }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nfunction ref(db, path) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('ref');\n    return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nfunction refFromURL(db, url) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('refFromURL');\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n    validateUrl('refFromURL', parsedURL);\n    const repoInfo = parsedURL.repoInfo;\n    if (!db._repo.repoInfo_.isCustomHost() &&\n        repoInfo.host !== db._repo.repoInfo_.host) {\n        fatal('refFromURL' +\n            ': Host name does not match the current database: ' +\n            '(found ' +\n            repoInfo.host +\n            ' but expected ' +\n            db._repo.repoInfo_.host +\n            ')');\n    }\n    return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nfunction child(parent, path) {\n    parent = getModularInstance(parent);\n    if (pathGetFront(parent._path) === null) {\n        validateRootPathString('child', 'path', path, false);\n    }\n    else {\n        validatePathString('child', 'path', path, false);\n    }\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nfunction onDisconnect(ref) {\n    ref = getModularInstance(ref);\n    return new OnDisconnect(ref._repo, ref._path);\n}\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nfunction push(parent, value) {\n    parent = getModularInstance(parent);\n    validateWritablePath('push', parent._path);\n    validateFirebaseDataArg('push', value, parent._path, true);\n    const now = repoServerTime(parent._repo);\n    const name = nextPushId(now);\n    // push() returns a ThennableReference whose promise is fulfilled with a\n    // regular Reference. We use child() to create handles to two different\n    // references. The first is turned into a ThennableReference below by adding\n    // then() and catch() methods and is used as the return value of push(). The\n    // second remains a regular Reference and is used as the fulfilled value of\n    // the first ThennableReference.\n    const thenablePushRef = child(parent, name);\n    const pushRef = child(parent, name);\n    let promise;\n    if (value != null) {\n        promise = set(pushRef, value).then(() => pushRef);\n    }\n    else {\n        promise = Promise.resolve(pushRef);\n    }\n    thenablePushRef.then = promise.then.bind(promise);\n    thenablePushRef.catch = promise.then.bind(promise, undefined);\n    return thenablePushRef;\n}\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nfunction remove(ref) {\n    validateWritablePath('remove', ref._path);\n    return set(ref, null);\n}\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction set(ref, value) {\n    ref = getModularInstance(ref);\n    validateWritablePath('set', ref._path);\n    validateFirebaseDataArg('set', value, ref._path, false);\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, ref._path, value, \n    /*priority=*/ null, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setPriority(ref, priority) {\n    ref = getModularInstance(ref);\n    validateWritablePath('setPriority', ref._path);\n    validatePriority('setPriority', priority, false);\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setWithPriority(ref, value, priority) {\n    validateWritablePath('setWithPriority', ref._path);\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n    validatePriority('setWithPriority', priority, false);\n    if (ref.key === '.length' || ref.key === '.keys') {\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n    }\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nfunction update(ref, values) {\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\n    const deferred = new Deferred();\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nfunction get(query) {\n    query = getModularInstance(query);\n    const callbackContext = new CallbackContext(() => { });\n    const container = new ValueEventRegistration(callbackContext);\n    return repoGetValue(query._repo, query, container).then(node => {\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n    });\n}\n/**\n * Represents registration for 'value' events.\n */\nclass ValueEventRegistration {\n    constructor(callbackContext) {\n        this.callbackContext = callbackContext;\n    }\n    respondsTo(eventType) {\n        return eventType === 'value';\n    }\n    createEvent(change, query) {\n        const index = query._queryParams.getIndex();\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n    }\n    getEventRunner(eventData) {\n        if (eventData.getEventType() === 'cancel') {\n            return () => this.callbackContext.onCancel(eventData.error);\n        }\n        else {\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\n        }\n    }\n    createCancelEvent(error, path) {\n        if (this.callbackContext.hasCancelCallback) {\n            return new CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    }\n    matches(other) {\n        if (!(other instanceof ValueEventRegistration)) {\n            return false;\n        }\n        else if (!other.callbackContext || !this.callbackContext) {\n            // If no callback specified, we consider it to match any callback.\n            return true;\n        }\n        else {\n            return other.callbackContext.matches(this.callbackContext);\n        }\n    }\n    hasAnyCallback() {\n        return this.callbackContext !== null;\n    }\n}\n/**\n * Represents the registration of a child_x event.\n */\nclass ChildEventRegistration {\n    constructor(eventType, callbackContext) {\n        this.eventType = eventType;\n        this.callbackContext = callbackContext;\n    }\n    respondsTo(eventType) {\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n        eventToCheck =\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n        return this.eventType === eventToCheck;\n    }\n    createCancelEvent(error, path) {\n        if (this.callbackContext.hasCancelCallback) {\n            return new CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    }\n    createEvent(change, query) {\n        assert(change.childName != null, 'Child events should have a childName.');\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n        const index = query._queryParams.getIndex();\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n    }\n    getEventRunner(eventData) {\n        if (eventData.getEventType() === 'cancel') {\n            return () => this.callbackContext.onCancel(eventData.error);\n        }\n        else {\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n        }\n    }\n    matches(other) {\n        if (other instanceof ChildEventRegistration) {\n            return (this.eventType === other.eventType &&\n                (!this.callbackContext ||\n                    !other.callbackContext ||\n                    this.callbackContext.matches(other.callbackContext)));\n        }\n        return false;\n    }\n    hasAnyCallback() {\n        return !!this.callbackContext;\n    }\n}\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n    let cancelCallback;\n    if (typeof cancelCallbackOrListenOptions === 'object') {\n        cancelCallback = undefined;\n        options = cancelCallbackOrListenOptions;\n    }\n    if (typeof cancelCallbackOrListenOptions === 'function') {\n        cancelCallback = cancelCallbackOrListenOptions;\n    }\n    if (options && options.onlyOnce) {\n        const userCallback = callback;\n        const onceCallback = (dataSnapshot, previousChildName) => {\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\n            userCallback(dataSnapshot, previousChildName);\n        };\n        onceCallback.userCallback = callback.userCallback;\n        onceCallback.context = callback.context;\n        callback = onceCallback;\n    }\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n    const container = eventType === 'value'\n        ? new ValueEventRegistration(callbackContext)\n        : new ChildEventRegistration(eventType, callbackContext);\n    repoAddEventCallbackForQuery(query._repo, query, container);\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nfunction off(query, eventType, callback) {\n    let container = null;\n    const expCallback = callback ? new CallbackContext(callback) : null;\n    if (eventType === 'value') {\n        container = new ValueEventRegistration(expCallback);\n    }\n    else if (eventType) {\n        container = new ChildEventRegistration(eventType, expCallback);\n    }\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass QueryConstraint {\n}\nclass QueryEndAtConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'endAt';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasEnd()) {\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\n                'endBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nfunction endAt(value, key) {\n    validateKey('endAt', 'key', key, true);\n    return new QueryEndAtConstraint(value, key);\n}\nclass QueryEndBeforeConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'endBefore';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasEnd()) {\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\n                'endBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction endBefore(value, key) {\n    validateKey('endBefore', 'key', key, true);\n    return new QueryEndBeforeConstraint(value, key);\n}\nclass QueryStartAtConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'startAt';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasStart()) {\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\n                'startBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAt(value = null, key) {\n    validateKey('startAt', 'key', key, true);\n    return new QueryStartAtConstraint(value, key);\n}\nclass QueryStartAfterConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'startAfter';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasStart()) {\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\n                'startAfter, or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAfter(value, key) {\n    validateKey('startAfter', 'key', key, true);\n    return new QueryStartAfterConstraint(value, key);\n}\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n    constructor(_limit) {\n        super();\n        this._limit = _limit;\n        this.type = 'limitToFirst';\n    }\n    _apply(query) {\n        if (query._queryParams.hasLimit()) {\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\n                'or limitToLast).');\n        }\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToFirst(limit) {\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n        throw new Error('limitToFirst: First argument must be a positive integer.');\n    }\n    return new QueryLimitToFirstConstraint(limit);\n}\nclass QueryLimitToLastConstraint extends QueryConstraint {\n    constructor(_limit) {\n        super();\n        this._limit = _limit;\n        this.type = 'limitToLast';\n    }\n    _apply(query) {\n        if (query._queryParams.hasLimit()) {\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\n                'or limitToLast).');\n        }\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToLast(limit) {\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n        throw new Error('limitToLast: First argument must be a positive integer.');\n    }\n    return new QueryLimitToLastConstraint(limit);\n}\nclass QueryOrderByChildConstraint extends QueryConstraint {\n    constructor(_path) {\n        super();\n        this._path = _path;\n        this.type = 'orderByChild';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByChild');\n        const parsedPath = new Path(this._path);\n        if (pathIsEmpty(parsedPath)) {\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n        }\n        const index = new PathIndex(parsedPath);\n        const newParams = queryParamsOrderBy(query._queryParams, index);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nfunction orderByChild(path) {\n    if (path === '$key') {\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n    }\n    else if (path === '$priority') {\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n    }\n    else if (path === '$value') {\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n    }\n    validatePathString('orderByChild', 'path', path, false);\n    return new QueryOrderByChildConstraint(path);\n}\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByKey';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByKey');\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByKey() {\n    return new QueryOrderByKeyConstraint();\n}\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByPriority';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nfunction orderByPriority() {\n    return new QueryOrderByPriorityConstraint();\n}\nclass QueryOrderByValueConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByValue';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByValue');\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByValue() {\n    return new QueryOrderByValueConstraint();\n}\nclass QueryEqualToValueConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'equalTo';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\n        if (query._queryParams.hasStart()) {\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n                'equalTo).');\n        }\n        if (query._queryParams.hasEnd()) {\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n                'equalTo).');\n        }\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n    }\n}\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction equalTo(value, key) {\n    validateKey('equalTo', 'key', key, true);\n    return new QueryEqualToValueConstraint(value, key);\n}\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nfunction query(query, ...queryConstraints) {\n    let queryImpl = getModularInstance(query);\n    for (const constraint of queryConstraints) {\n        queryImpl = constraint._apply(queryImpl);\n    }\n    return queryImpl;\n}\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos = {};\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(repo, hostAndPort, emulatorOptions, tokenProvider) {\n    const portIndex = hostAndPort.lastIndexOf(':');\n    const host = hostAndPort.substring(0, portIndex);\n    const useSsl = isCloudWorkstation(host);\n    repo.repoInfo_ = new RepoInfo(hostAndPort, \n    /* secure= */ useSsl, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \n    /*isUsingEmulator=*/ true, emulatorOptions);\n    if (tokenProvider) {\n        repo.authTokenProvider_ = tokenProvider;\n    }\n}\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n    let dbUrl = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n        if (!app.options.projectId) {\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\n                ' a Project ID when calling firebase.initializeApp().');\n        }\n        log('Using default host for project ', app.options.projectId);\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n    }\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    let repoInfo = parsedUrl.repoInfo;\n    let isEmulator;\n    let dbEmulatorHost = undefined;\n    if (typeof process !== 'undefined' && process.env) {\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n    if (dbEmulatorHost) {\n        isEmulator = true;\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n        repoInfo = parsedUrl.repoInfo;\n    }\n    else {\n        isEmulator = !parsedUrl.repoInfo.secure;\n    }\n    const authTokenProvider = nodeAdmin && isEmulator\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\n    if (!pathIsEmpty(parsedUrl.path)) {\n        fatal('Database URL must point to the root of a Firebase Database ' +\n            '(not including a child path).');\n    }\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app, appCheckProvider));\n    return new Database(repo, app);\n}\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n    const appRepos = repos[appName];\n    // This should never happen...\n    if (!appRepos || appRepos[repo.key] !== repo) {\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n    }\n    repoInterrupt(repo);\n    delete appRepos[repo.key];\n}\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n    let appRepos = repos[app.name];\n    if (!appRepos) {\n        appRepos = {};\n        repos[app.name] = appRepos;\n    }\n    let repo = appRepos[repoInfo.toURLString()];\n    if (repo) {\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n}\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n    useRestClient = forceRestClient;\n}\n/**\n * Class representing a Firebase Realtime Database.\n */\nclass Database {\n    /** @hideconstructor */\n    constructor(_repoInternal, \n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    app) {\n        this._repoInternal = _repoInternal;\n        this.app = app;\n        /** Represents a `Database` instance. */\n        this['type'] = 'database';\n        /** Track if the instance has been used (root or repo accessed) */\n        this._instanceStarted = false;\n    }\n    get _repo() {\n        if (!this._instanceStarted) {\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n            this._instanceStarted = true;\n        }\n        return this._repoInternal;\n    }\n    get _root() {\n        if (!this._rootInternal) {\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n        }\n        return this._rootInternal;\n    }\n    _delete() {\n        if (this._rootInternal !== null) {\n            repoManagerDeleteRepo(this._repo, this.app.name);\n            this._repoInternal = null;\n            this._rootInternal = null;\n        }\n        return Promise.resolve();\n    }\n    _checkNotDeleted(apiName) {\n        if (this._rootInternal === null) {\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\n        }\n    }\n}\nfunction checkTransportInit() {\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n    }\n}\n/**\n * Force the use of websockets instead of longPolling.\n */\nfunction forceWebSockets() {\n    checkTransportInit();\n    BrowserPollConnection.forceDisallow();\n}\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nfunction forceLongPolling() {\n    checkTransportInit();\n    WebSocketConnection.forceDisallow();\n    BrowserPollConnection.forceAllow();\n}\n/**\n * Returns the instance of the Realtime Database SDK that is associated with the provided\n * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if\n * no instance exists or if the existing instance uses a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nfunction getDatabase(app = getApp(), url) {\n    const db = _getProvider(app, 'database').getImmediate({\n        identifier: url\n    });\n    if (!db._instanceStarted) {\n        const emulator = getDefaultEmulatorHostnameAndPort('database');\n        if (emulator) {\n            connectDatabaseEmulator(db, ...emulator);\n        }\n    }\n    return db;\n}\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('useEmulator');\n    const hostAndPort = `${host}:${port}`;\n    const repo = db._repoInternal;\n    if (db._instanceStarted) {\n        // If the instance has already been started, then silenty fail if this function is called again\n        // with the same parameters. If the parameters differ then assert.\n        if (hostAndPort === db._repoInternal.repoInfo_.host &&\n            deepEqual(options, repo.repoInfo_.emulatorOptions)) {\n            return;\n        }\n        fatal('connectDatabaseEmulator() cannot initialize or alter the emulator configuration after the database instance has started.');\n    }\n    let tokenProvider = undefined;\n    if (repo.repoInfo_.nodeAdmin) {\n        if (options.mockUserToken) {\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n        }\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n    }\n    else if (options.mockUserToken) {\n        const token = typeof options.mockUserToken === 'string'\n            ? options.mockUserToken\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n        tokenProvider = new EmulatorTokenProvider(token);\n    }\n    // Workaround to get cookies in Firebase Studio\n    if (isCloudWorkstation(host)) {\n        void pingServer(host);\n        updateEmulatorBanner('Database', true);\n    }\n    // Modify the repo to apply emulator settings\n    repoManagerApplyEmulatorSettings(repo, hostAndPort, options, tokenProvider);\n}\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nfunction goOffline(db) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('goOffline');\n    repoInterrupt(db._repo);\n}\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nfunction goOnline(db) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('goOnline');\n    repoResume(db._repo);\n}\nfunction enableLogging(logger, persistent) {\n    enableLogging$1(logger, persistent);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction registerDatabase(variant) {\n    setSDKVersion(SDK_VERSION$1);\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n    registerVersion(name, version, variant);\n    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n    registerVersion(name, version, 'esm2020');\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SERVER_TIMESTAMP = {\n    '.sv': 'timestamp'\n};\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nfunction serverTimestamp() {\n    return SERVER_TIMESTAMP;\n}\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nfunction increment(delta) {\n    return {\n        '.sv': {\n            'increment': delta\n        }\n    };\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nclass TransactionResult {\n    /** @hideconstructor */\n    constructor(\n    /** Whether the transaction was successfully committed. */\n    committed, \n    /** The resulting data snapshot. */\n    snapshot) {\n        this.committed = committed;\n        this.snapshot = snapshot;\n    }\n    /** Returns a JSON-serializable representation of this object. */\n    toJSON() {\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n    }\n}\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nfunction runTransaction(ref, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n    ref = getModularInstance(ref);\n    validateWritablePath('Reference.transaction', ref._path);\n    if (ref.key === '.length' || ref.key === '.keys') {\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\n    }\n    const applyLocally = options?.applyLocally ?? true;\n    const deferred = new Deferred();\n    const promiseComplete = (error, committed, node) => {\n        let dataSnapshot = null;\n        if (error) {\n            deferred.reject(error);\n        }\n        else {\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\n        }\n    };\n    // Add a watch to make sure we get server updates.\n    const unwatcher = onValue(ref, () => { });\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n    return deferred.promise;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nPersistentConnection;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n    this.sendRequest('q', { p: pathString }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n    this.sendRequest('echo', { d: data }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nConnection;\n/**\n * @internal\n */\nconst hijackHash = function (newHash) {\n    const oldPut = PersistentConnection.prototype.put;\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n        if (hash !== undefined) {\n            hash = newHash();\n        }\n        oldPut.call(this, pathString, data, onComplete, hash);\n    };\n    return function () {\n        PersistentConnection.prototype.put = oldPut;\n    };\n};\nRepoInfo;\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nconst forceRestClient = function (forceRestClient) {\n    repoManagerForceRestClient(forceRestClient);\n};\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n * @internal\n * @param app - A valid FirebaseApp-like object\n * @param url - A valid Firebase databaseURL\n * @param version - custom version e.g. firebase-admin version\n * @param customAppCheckImpl - custom app check implementation\n * @param customAuthImpl - custom auth implementation\n */\nfunction _initStandalone({ app, url, version, customAuthImpl, customAppCheckImpl, nodeAdmin = false }) {\n    setSDKVersion(version);\n    /**\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n     * any actual function.\n     */\n    const componentContainer = new ComponentContainer('database-standalone');\n    const authProvider = new Provider('auth-internal', componentContainer);\n    let appCheckProvider;\n    if (customAppCheckImpl) {\n        appCheckProvider = new Provider('app-check-internal', componentContainer);\n        appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n    }\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin);\n}\n\n/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, _initStandalone, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm.js.map\n"],"mappings":"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"}